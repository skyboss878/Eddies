// src/App.jsx - Complete Updated Version with All Integrations
import React, { Suspense, lazy, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { SettingsProvider } from './contexts/SettingsContext';
import ErrorBoundary from './components/ErrorBoundary';
import LoadingSpinner from './components/LoadingSpinner';
import ProtectedRoute from './components/ProtectedRoute';
import Layout from './components/Layout';
import websocketService from './services/websocketService';

// Lazy load pages for better code splitting
const Dashboard = lazy(() => import('./pages/Dashboard'));
const VehicleList = lazy(() => import('./pages/VehicleList'));
const VehicleDetail = lazy(() => import('./pages/VehicleDetail'));
const AddVehicle = lazy(() => import('./pages/AddVehicle'));
const ViewJobs = lazy(() => import('./pages/ViewJobs'));
const CreateJob = lazy(() => import('./pages/CreateJob'));
const EstimateAI = lazy(() => import('./pages/EstimateAI'));
const CustomerList = lazy(() => import('./pages/CustomerList'));
const CustomerDetail = lazy(() => import('./pages/CustomerDetail'));
const AddAndEditCustomer = lazy(() => import('./pages/AddAndEditCustomer'));
const Invoice = lazy(() => import('./pages/Invoice'));
const Reports = lazy(() => import('./pages/Reports'));
const AppointmentCalendar = lazy(() => import('./pages/AppointmentCalendar'));
const PartsLaborManagement = lazy(() => import('./pages/PartsLaborManagement'));
const Settings = lazy(() => import('./pages/Settings'));
const Login = lazy(() => import('./pages/Login'));
const Register = lazy(() => import('./pages/Register'));
const NotFound = lazy(() => import('./pages/NotFound'));

// AI Components
const AIDashboard = lazy(() => import('./components/ai/AIDashboard'));
const TimeClock = lazy(() => import('./pages/TimeClock'));

// Data Context
const DataContext = React.createContext();

export const useData = () => {
  const context = React.useContext(DataContext);
  if (!context) {
    throw new Error('useData must be used within a DataProvider');
  }
  return context;
};

const DataProvider = ({ children }) => {
  const [customers, setCustomers] = React.useState([]);
  const [vehicles, setVehicles] = React.useState([]);
  const [jobs, setJobs] = React.useState([]);
  const [appointments, setAppointments] = React.useState([]);
  const [estimates, setEstimates] = React.useState([]);
  const [invoices, setInvoices] = React.useState([]);
  const [loading, setLoading] = React.useState(false);

  // Sample data for development
  React.useEffect(() => {
    const sampleData = {
      customers: [
        {
          id: 1,
          name: 'John Smith',
          first_name: 'John',
          last_name: 'Smith',
          phone: '(555) 123-4567',
          email: 'john.smith@email.com',
          address: '123 Main St, Bakersfield, CA 93301'
        },
        {
          id: 2,
          name: 'Sarah Wilson',
          first_name: 'Sarah',
          last_name: 'Wilson',
          phone: '(555) 987-6543',
          email: 'sarah.wilson@email.com',
          address: '456 Oak Ave, Bakersfield, CA 93301'
        }
      ],
      vehicles: [
        {
          id: 1,
          customer_id: 1,
          year: 2020,
          make: 'Honda',
          model: 'Civic',
          vin: '2HGFC2F59LH123456',
          license_plate: 'ABC123',
          customer: { name: 'John Smith' }
        },
        {
          id: 2,
          customer_id: 2,
          year: 2021,
          make: 'Toyota',
          model: 'Camry',
          vin: '4T1BF1FK8JU654321',
          license_plate: 'XYZ789',
          customer: { name: 'Sarah Wilson' }
        }
      ],
      jobs: [
        {
          id: 1,
          job_number: 'JOB-2024-001',
          title: 'Oil Change Service',
          customer: { name: 'John Smith' },
          vehicle: { year: 2020, make: 'Honda', model: 'Civic' },
          status: 'in_progress',
          total_amount: 85.50
        },
        {
          id: 2,
          job_number: 'JOB-2024-002',
          title: 'Brake Inspection',
          customer: { name: 'Sarah Wilson' },
          vehicle: { year: 2021, make: 'Toyota', model: 'Camry' },
          status: 'pending',
          total_amount: 125.00
        }
      ]
    };

    setCustomers(sampleData.customers);
    setVehicles(sampleData.vehicles);
    setJobs(sampleData.jobs);
  }, []);

  const contextValue = {
    customers,
    vehicles,
    jobs,
    appointments,
    estimates,
    invoices,
    loading,
    setCustomers,
    setVehicles,
    setJobs,
    setAppointments,
    setEstimates,
    setInvoices,
    setLoading
  };

  return (
    <DataContext.Provider value={contextValue}>
      {children}
    </DataContext.Provider>
  );
};

// App Content Component
function AppContent() {
  const { user, token } = useAuth();

  useEffect(() => {
    // Initialize WebSocket connection when user is logged in
    if (user && token) {
      try {
        websocketService.connect(token);
      } catch (error) {
        console.warn('WebSocket connection failed:', error);
      }
    } else {
      websocketService.disconnect();
    }

    // Cleanup on unmount
    return () => {
      websocketService.disconnect();
    };
  }, [user, token]);

  return (
    <DataProvider>
      <Router>
        <ErrorBoundary>
          <Suspense fallback={
            <div className="min-h-screen flex items-center justify-center bg-gray-50">
              <LoadingSpinner size="large" />
            </div>
          }>
            <Routes>
              {/* Public routes */}
              <Route 
                path="/login" 
                element={user ? <Navigate to="/dashboard" /> : <Login />} 
              />
              <Route 
                path="/register" 
                element={user ? <Navigate to="/dashboard" /> : <Register />} 
              />

              {/* Protected routes with layout */}
              <Route path="/" element={
                <ProtectedRoute>
                  <Layout />
                </ProtectedRoute>
              }>
                {/* Default redirect */}
                <Route index element={<Navigate to="/dashboard" replace />} />

                {/* Dashboard */}
                <Route path="dashboard" element={<Dashboard />} />

                {/* AI Routes */}
                <Route path="ai" element={<AIDashboard />} />
                <Route path="ai-diagnostics" element={<AIDashboard />} />

                {/* Vehicle routes */}
                <Route path="vehicles">
                  <Route index element={<VehicleList />} />
                  <Route path="add" element={<AddVehicle />} />
                  <Route path="new" element={<AddVehicle />} />
                  <Route path=":id" element={<VehicleDetail />} />
                  <Route path=":id/edit" element={<AddVehicle />} />
                </Route>

                {/* Job routes */}
                <Route path="jobs">
                  <Route index element={<ViewJobs />} />
                  <Route path="create" element={<CreateJob />} />
                  <Route path="new" element={<CreateJob />} />
                  <Route path=":id" element={<ViewJobs />} />
                  <Route path=":id/edit" element={<CreateJob />} />
                </Route>

                {/* Customer routes */}
                <Route path="customers">
                  <Route index element={<CustomerList />} />
                  <Route path="add" element={<AddAndEditCustomer />} />
                  <Route path="new" element={<AddAndEditCustomer />} />
                  <Route path=":id" element={<CustomerDetail />} />
                  <Route path=":id/edit" element={<AddAndEditCustomer />} />
                </Route>

                {/* Estimate routes */}
                <Route path="estimates">
                  <Route index element={<EstimateAI />} />
                  <Route path="ai" element={<EstimateAI />} />
                  <Route path="new" element={<EstimateAI />} />
                  <Route path="create" element={<EstimateAI />} />
                </Route>

                {/* Invoice routes */}
                <Route path="invoices">
                  <Route index element={<Invoice />} />
                  <Route path="new" element={<Invoice />} />
                  <Route path="create" element={<Invoice />} />
                  <Route path=":id" element={<Invoice />} />
                </Route>

                {/* Appointment routes */}
                <Route path="appointments">
                  <Route index element={<AppointmentCalendar />} />
                  <Route path="new" element={<AppointmentCalendar />} />
                  <Route path="calendar" element={<AppointmentCalendar />} />
                </Route>

                {/* Business routes */}
                <Route path="reports" element={<Reports />} />
                <Route path="calendar" element={<AppointmentCalendar />} />
                <Route path="parts-labor" element={<PartsLaborManagement />} />
                <Route path="inventory" element={<PartsLaborManagement />} />
                <Route path="parts" element={<PartsLaborManagement />} />
                
                {/* Time Clock routes */}
                <Route path="timeclock" element={<Dashboard />} />
                <Route path="employees" element={<Settings />} />
                <Route path="payroll" element={<Reports />} />

                {/* Settings and Profile */}
                <Route path="settings" element={<Settings />} />
                <Route path="profile" element={<Settings />} />

                {/* Data Management */}
                <Route path="data" element={<Settings />} />
                <Route path="backup" element={<Settings />} />
                <Route path="export" element={<Reports />} />

                {/* Legacy routes for compatibility */}
                <Route path="invoice/:id" element={<Invoice />} />
              </Route>

              {/* Catch-all for 404 */}
              <Route path="*" element={<NotFound />} />
            </Routes>
          </Suspense>
        </ErrorBoundary>

        {/* Global Toast Notifications */}
        <Toaster 
          position="top-right"
          toastOptions={{
            duration: 4000,
            style: {
              background: '#363636',
              color: '#fff',
              borderRadius: '8px',
              fontSize: '14px',
              boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'
            },
            success: {
              iconTheme: {
                primary: '#10B981',
                secondary: '#fff',
              },
            },
            error: {
              iconTheme: {
                primary: '#EF4444',
                secondary: '#fff',
              },
            },
            loading: {
              iconTheme: {
                primary: '#3B82F6',
                secondary: '#fff',
              },
            }
          }}
        />
      </Router>
    </DataProvider>
  );
}

// Main App Component with Providers
const App = () => {
  return (
    <AuthProvider>
      <SettingsProvider>
        <div className="app-wrapper">
          <AppContent />
        </div>
      </SettingsProvider>
    </AuthProvider>
  );
};

export default App;
