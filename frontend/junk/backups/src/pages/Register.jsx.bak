import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, Shield, User, Lock, Phone, Mail, Car, Users, Settings, LogIn, UserPlus, Key, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';

// Simulated API calls - Replace with your actual backend
const api = {
  async login(credentials) {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Mock validation - replace with real API
    const validCredentials = [
      { email: 'manager@eddiesautomotive.com', password: 'manager123', role: 'shop_manager', name: 'John Smith' },
      { email: 'staff@eddiesautomotive.com', password: 'staff123', role: 'staff', name: 'Sarah Johnson' },
      { email: 'admin@eddiesautomotive.com', password: 'admin123', role: 'admin', name: 'Mike Wilson' }
    ];
    
    const user = validCredentials.find(u => 
      u.email === credentials.email && u.password === credentials.password
    );
    
    if (user) {
      const token = `jwt_token_${Date.now()}_${Math.random()}`;
      return {
        success: true,
        data: {
          token,
          user: {
            id: Math.floor(Math.random() * 1000),
            email: user.email,
            name: user.name,
            role: user.role,
            permissions: user.role === 'shop_manager' ? ['all'] : ['read', 'update']
          }
        }
      };
    }
    
    throw new Error('Invalid email or password');
  },

  async register(userData) {
    await new Promise(resolve => setTimeout(resolve, 1200));
    
    // Mock registration codes
    const validCodes = ['EDDIE2024', 'STAFF2024', 'MANAGER2024'];
    
    if (!validCodes.includes(userData.registrationCode)) {
      throw new Error('Invalid registration code. Please contact your administrator.');
    }
    
    const role = userData.registrationCode === 'MANAGER2024' ? 'shop_manager' : 'staff';
    const token = `jwt_token_${Date.now()}_${Math.random()}`;
    
    return {
      success: true,
      data: {
        token,
        user: {
          id: Math.floor(Math.random() * 1000),
          email: userData.email,
          name: `${userData.firstName} ${userData.lastName}`,
          role: role,
          permissions: role === 'shop_manager' ? ['all'] : ['read', 'update']
        }
      }
    };
  }
};

// Auth Context
const AuthContext = React.createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(null);

  useEffect(() => {
    // Check for existing auth on mount
    const savedToken = localStorage.getItem('auth_token');
    const savedUser = localStorage.getItem('auth_user');
    
    if (savedToken && savedUser) {
      try {
        setToken(savedToken);
        setUser(JSON.parse(savedUser));
      } catch (error) {
        localStorage.removeItem('auth_token');
        localStorage.removeItem('auth_user');
      }
    }
    
    setLoading(false);
  }, []);

  const login = async (credentials) => {
    try {
      const response = await api.login(credentials);
      const { token, user } = response.data;
      
      setToken(token);
      setUser(user);
      localStorage.setItem('auth_token', token);
      localStorage.setItem('auth_user', JSON.stringify(user));
      
      return response;
    } catch (error) {
      throw error;
    }
  };

  const register = async (userData) => {
    try {
      const response = await api.register(userData);
      const { token, user } = response.data;
      
      setToken(token);
      setUser(user);
      localStorage.setItem('auth_token', token);
      localStorage.setItem('auth_user', JSON.stringify(user));
      
      return response;
    } catch (error) {
      throw error;
    }
  };

  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem('auth_token');
    localStorage.removeItem('auth_user');
  };

  const hasRole = (role) => {
    return user?.role === role;
  };

  const hasPermission = (permission) => {
    return user?.permissions?.includes('all') || user?.permissions?.includes(permission);
  };

  return (
    <AuthContext.Provider value={{
      user,
      token,
      loading,
      login,
      register,
      logout,
      hasRole,
      hasPermission,
      isAuthenticated: !!user
    }}>
      {children}
    </AuthContext.Provider>
  );
};

const useAuth = () => {
  const context = React.useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

// Login Component
const Login = ({ onSwitchToRegister }) => {
  const { login } = useAuth();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setErrors({});
    setIsSubmitting(true);

    try {
      await login(formData);
    } catch (error) {
      setErrors({ general: error.message });
    } finally {
      setIsSubmitting(false);
    }
  };

  const demoAccounts = [
    { role: 'Shop Manager', email: 'manager@eddiesautomotive.com', password: 'manager123' },
    { role: 'Staff Member', email: 'staff@eddiesautomotive.com', password: 'staff123' },
    { role: 'Administrator', email: 'admin@eddiesautomotive.com', password: 'admin123' }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo and Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-orange-500 rounded-full mb-4">
            <Car className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-white mb-2">Eddie's Automotive</h1>
          <p className="text-blue-200">Management System</p>
        </div>

        {/* Login Form */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 shadow-2xl border border-white/20">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-white mb-1">Welcome Back</h2>
            <p className="text-blue-200 text-sm">Sign in to your account</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Email Field */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">Email Address</label>
              <div className="relative">
                <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="email"
                  required
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                  className="w-full pl-10 pr-4 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  placeholder="Enter your email"
                />
              </div>
            </div>

            {/* Password Field */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">Password</label>
              <div className="relative">
                <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type={showPassword ? 'text' : 'password'}
                  required
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                  className="w-full pl-10 pr-12 py-3 bg-white/20 border border-white/30 rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  placeholder="Enter your password"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>

            {/* Error Message */}
            {errors.general && (
              <div className="flex items-center gap-2 p-3 bg-red-500/20 border border-red-500/30 rounded-lg text-red-200">
                <AlertCircle className="w-4 h-4" />
                <span className="text-sm">{errors.general}</span>
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-bold py-3 px-4 rounded-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 focus:ring-offset-transparent disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center gap-2">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Signing In...</span>
                </div>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  <LogIn className="w-5 h-5" />
                  <span>Sign In</span>
                </div>
              )}
            </button>
          </form>

          {/* Demo Accounts */}
          <div className="mt-6 pt-6 border-t border-white/20">
            <p className="text-white text-sm font-medium mb-3 text-center">Demo Accounts</p>
            <div className="space-y-2">
              {demoAccounts.map((account, index) => (
                <button
                  key={index}
                  onClick={() => setFormData({ email: account.email, password: account.password })}
                  className="w-full text-left p-3 bg-white/10 hover:bg-white/20 rounded-lg border border-white/20 transition-colors"
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <div className="text-white text-sm font-medium">{account.role}</div>
                      <div className="text-blue-200 text-xs">{account.email}</div>
                    </div>
                    <User className="w-4 h-4 text-gray-400" />
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Switch to Register */}
          <div className="mt-6 text-center">
            <p className="text-blue-200 text-sm">
              Don't have an account?{' '}
              <button
                onClick={onSwitchToRegister}
                className="text-orange-400 hover:text-orange-300 font-medium transition-colors"
              >
                Create Account
              </button>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Register Component
const Register = ({ onSwitchToLogin }) => {
  const { register } = useAuth();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    registrationCode: ''
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const validateForm = () => {
    const newErrors = {};

    if (!formData.firstName.trim()) newErrors.firstName = 'First name is required';
    if (!formData.lastName.trim()) newErrors.lastName = 'Last name is required';
    if (!formData.email.trim()) newErrors.email = 'Email is required';
    else if (!/\S+@\S+\.\S+/.test(formData.email)) newErrors.email = 'Email is invalid';
    if (!formData.phone.trim()) newErrors.phone = 'Phone number is required';
    if (!formData.password) newErrors.password = 'Password is required';
    else if (formData.password.length < 8) newErrors.password = 'Password must be at least 8 characters';
    if (!formData.confirmPassword) newErrors.confirmPassword = 'Please confirm your password';
    else if (formData.password !== formData.confirmPassword) newErrors.confirmPassword = 'Passwords do not match';
    if (!formData.registrationCode.trim()) newErrors.registrationCode = 'Registration code is required';

    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newErrors = validateForm();
    setErrors(newErrors);

    if (Object.keys(newErrors).length === 0) {
      setIsSubmitting(true);
      try {
        await register(formData);
      } catch (error) {
        setErrors({ general: error.message });
      } finally {
        setIsSubmitting(false);
      }
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo and Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-orange-500 rounded-full mb-4">
            <Car className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-white mb-2">Eddie's Automotive</h1>
          <p className="text-blue-200">Create Your Account</p>
        </div>

        {/* Registration Form */}
        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 shadow-2xl border border-white/20 max-h-[85vh] overflow-y-auto">
          <div className="text-center mb-6">
            <h2 className="text-2xl font-bold text-white mb-1">Join Our Team</h2>
            <p className="text-blue-200 text-sm">Create your account to get started</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-4">
            {/* Registration Code - Highlighted */}
            <div className="p-4 bg-orange-500/20 border border-orange-500/30 rounded-lg">
              <label className="block text-orange-200 text-sm font-medium mb-2">
                <Key className="inline w-4 h-4 mr-1" />
                Registration Code *
              </label>
              <input
                type="text"
                required
                value={formData.registrationCode}
                onChange={(e) => setFormData({ ...formData, registrationCode: e.target.value })}
                className={`w-full px-4 py-2 bg-white/20 border ${errors.registrationCode ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                placeholder="Enter registration code"
              />
              {errors.registrationCode && (
                <p className="text-red-300 text-xs mt-1">{errors.registrationCode}</p>
              )}
              <p className="text-orange-200 text-xs mt-1">Valid codes: EDDIE2024, STAFF2024, MANAGER2024</p>
            </div>

            {/* Name Fields */}
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-white text-sm font-medium mb-2">First Name *</label>
                <input
                  type="text"
                  required
                  value={formData.firstName}
                  onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                  className={`w-full px-4 py-2 bg-white/20 border ${errors.firstName ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                  placeholder="John"
                />
                {errors.firstName && <p className="text-red-300 text-xs mt-1">{errors.firstName}</p>}
              </div>
              <div>
                <label className="block text-white text-sm font-medium mb-2">Last Name *</label>
                <input
                  type="text"
                  required
                  value={formData.lastName}
                  onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                  className={`w-full px-4 py-2 bg-white/20 border ${errors.lastName ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                  placeholder="Doe"
                />
                {errors.lastName && <p className="text-red-300 text-xs mt-1">{errors.lastName}</p>}
              </div>
            </div>

            {/* Email */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">Email Address *</label>
              <input
                type="email"
                required
                value={formData.email}
                onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                className={`w-full px-4 py-2 bg-white/20 border ${errors.email ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                placeholder="john@example.com"
              />
              {errors.email && <p className="text-red-300 text-xs mt-1">{errors.email}</p>}
            </div>

            {/* Phone */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">Phone Number *</label>
              <input
                type="tel"
                required
                value={formData.phone}
                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                className={`w-full px-4 py-2 bg-white/20 border ${errors.phone ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                placeholder="(555) 123-4567"
              />
              {errors.phone && <p className="text-red-300 text-xs mt-1">{errors.phone}</p>}
            </div>

            {/* Password */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">Password *</label>
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  required
                  value={formData.password}
                  onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                  className={`w-full px-4 py-2 pr-10 bg-white/20 border ${errors.password ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                  placeholder="Minimum 8 characters"
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                >
                  {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
              {errors.password && <p className="text-red-300 text-xs mt-1">{errors.password}</p>}
            </div>

            {/* Confirm Password */}
            <div>
              <label className="block text-white text-sm font-medium mb-2">Confirm Password *</label>
              <div className="relative">
                <input
                  type={showConfirmPassword ? 'text' : 'password'}
                  required
                  value={formData.confirmPassword}
                  onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                  className={`w-full px-4 py-2 pr-10 bg-white/20 border ${errors.confirmPassword ? 'border-red-500' : 'border-white/30'} rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-orange-500`}
                  placeholder="Confirm your password"
                />
                <button
                  type="button"
                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                  className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                >
                  {showConfirmPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                </button>
              </div>
              {errors.confirmPassword && <p className="text-red-300 text-xs mt-1">{errors.confirmPassword}</p>}
            </div>

            {/* Error Message */}
            {errors.general && (
              <div className="flex items-center gap-2 p-3 bg-red-500/20 border border-red-500/30 rounded-lg text-red-200">
                <AlertCircle className="w-4 h-4" />
                <span className="text-sm">{errors.general}</span>
              </div>
            )}

            {/* Submit Button */}
            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full bg-gradient-to-r from-orange-500 to-orange-600 hover:from-orange-600 hover:to-orange-700 text-white font-bold py-3 px-4 rounded-lg transition-all duration-200 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-orange-500 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
            >
              {isSubmitting ? (
                <div className="flex items-center justify-center gap-2">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Creating Account...</span>
                </div>
              ) : (
                <div className="flex items-center justify-center gap-2">
                  <UserPlus className="w-5 h-5" />
                  <span>Create Account</span>
                </div>
              )}
            </button>
          </form>

          {/* Switch to Login */}
          <div className="mt-6 text-center">
            <p className="text-blue-200 text-sm">
              Already have an account?{' '}
              <button
                onClick={onSwitchToLogin}
                className="text-orange-400 hover:text-orange-300 font-medium transition-colors"
              >
                Sign In
              </button>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Dashboard Component
const Dashboard = () => {
  const { user, logout, hasRole, hasPermission } = useAuth();
  
  const roleConfig = {
    shop_manager: {
      title: 'Shop Manager Dashboard',
      icon: Settings,
      color: 'text-purple-400',
      bgColor: 'bg-purple-500/20',
      borderColor: 'border-purple-500/30'
    },
    staff: {
      title: 'Staff Dashboard',
      icon: Users,
      color: 'text-blue-400',
      bgColor: 'bg-blue-500/20',
      borderColor: 'border-blue-500/30'
    },
    admin: {
      title: 'Administrator Dashboard',
      icon: Shield,
      color: 'text-red-400',
      bgColor: 'bg-red-500/20',
      borderColor: 'border-red-500/30'
    }
  };

  const config = roleConfig[user?.role] || roleConfig.staff;
  const IconComponent = config.icon;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900">
      {/* Navigation */}
      <nav className="bg-black/20 backdrop-blur-lg border-b border-white/10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center gap-3">
              <Car className="w-8 h-8 text-orange-500" />
              <span className="text-xl font-bold text-white">Eddie's Automotive</span>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-right">
                <p className="text-white font-medium">{user?.name}</p>
                <p className="text-blue-200 text-sm capitalize">{user?.role?.replace('_', ' ')}</p>
              </div>
              <button
                onClick={logout}
                className="bg-red-500/20 hover:bg-red-500/30 text-red-300 hover:text-red-200 px-4 py-2 rounded-lg transition-colors border border-red-500/30"
              >
                Logout
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Welcome Section */}
        <div className={`${config.bgColor} ${config.borderColor} border rounded-2xl p-8 mb-8`}>
          <div className="flex items-center gap-4 mb-4">
            <IconComponent className={`w-12 h-12 ${config.color}`} />
            <div>
              <h1 className="text-3xl font-bold text-white">{config.title}</h1>
              <p className="text-blue-200">Welcome back, {user?.name}!</p>
            </div>
          </div>
          
          {/* Success Message */}
          <div className="flex items-center gap-2 p-4 bg-green-500/20 border border-green-500/30 rounded-lg text-green-200">
            <CheckCircle className="w-5 h-5" />
            <span>Authentication successful! You are now logged in as a {user?.role?.replace('_', ' ')}.</span>
          </div>
        </div>

        {/* Role-Based Content */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* Always Available */}
          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <div className="flex items-center gap-3 mb-4">
              <Car className="w-8 h-8 text-blue-400" />
              <h3 className="text-xl font-semibold text-white">Vehicle Management</h3>
            </div>
            <p className="text-blue-200 mb-4">View and manage vehicle information</p>
            <div className="space-y-2 text-sm text-gray-300">
              <div>✓ View vehicle details</div>
              <div>✓ Service history</div>
              {hasPermission('update') && <div>✓ Update records</div>}
            </div>
          </div>

          {/* Staff and Manager */}
          {(hasRole('staff') || hasRole('shop_manager') || hasRole('admin')) && (
            <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
              <div className="flex items-center gap-3 mb-4">
                <Users className="w-8 h-8 text-green-400" />
                <h3 className="text-xl font-semibold text-white">Customer Service</h3>
              </div>
              <p className="text-blue-200 mb-4">Handle customer interactions</p>
              <div className="space-y-2 text-sm text-gray-300">
                <div>✓ Customer records</div>
                <div>✓ Appointment scheduling</div>
                <div>✓ Service estimates</div>
              </div>
            </div>
          )}

          {/* Manager and Admin Only */}
          {(hasRole('shop_manager') || hasRole('admin')) && (
            <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
              <div className="flex items-center gap-3 mb-4">
                <Settings className="w-8 h-8 text-purple-400" />
                <h3 className="text-xl font-semibold text-white">Management Tools</h3>
              </div>
              <p className="text-blue-200 mb-4">Advanced management features</p>
              <div className="space-y-2 text-sm text-gray-300">
                <div>✓ Staff management</div>
                <div>✓ Financial reports</div>
                <div>✓ System settings</div>
                <div>✓ Inventory control</div>
              </div>
            </div>
          )}

          {/* Admin Only */}
          {hasRole('admin') && (
            <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
              <div className="flex items-center gap-3 mb-4">
                <Shield className="w-8 h-8 text-red-400" />
                <h3 className="text-xl font-semibold text-white">System Administration</h3>
              </div>
              <p className="text-blue-200 mb-4">Full system control</p>
              <div className="space-y-2 text-sm text-gray-300">
                <div>✓ User management</div>
                <div>✓ System backups</div>
                <div>✓ Security settings</div>
                <div>✓ Registration codes</div>
              </div>
            </div>
          )}

          {/* Quick Actions */}
          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <h3 className="text-xl font-semibold text-white mb-4">Quick Actions</h3>
            <div className="space-y-3">
              <button className="w-full bg-blue-500/20 hover:bg-blue-500/30 text-blue-300 py-2 px-4 rounded-lg transition-colors border border-blue-500/30">
                View Today's Schedule
              </button>
              {hasPermission('update') && (
                <button className="w-full bg-green-500/20 hover:bg-green-500/30 text-green-300 py-2 px-4 rounded-lg transition-colors border border-green-500/30">
                  Add New Customer
                </button>
              )}
              {(hasRole('shop_manager') || hasRole('admin')) && (
                <button className="w-full bg-purple-500/20 hover:bg-purple-500/30 text-purple-300 py-2 px-4 rounded-lg transition-colors border border-purple-500/30">
                  Generate Reports
                </button>
              )}
            </div>
          </div>

          {/* Recent Activity */}
          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <h3 className="text-xl font-semibold text-white mb-4">Recent Activity</h3>
            <div className="space-y-3 text-sm text-gray-300">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                <span>Login successful</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-blue-400 rounded-full"></div>
                <span>Session started</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-400 rounded-full"></div>
                <span>Dashboard loaded</span>
              </div>
            </div>
          </div>

          {/* System Status */}
          <div className="bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
            <h3 className="text-xl font-semibold text-white mb-4">System Status</h3>
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-gray-300">API Status</span>
                <span className="text-green-300 text-sm">Online</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-gray-300">Database</span>
                <span className="text-green-300 text-sm">Connected</span>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-gray-300">Last Backup</span>
                <span className="text-gray-400 text-sm">2 hours ago</span>
              </div>
            </div>
          </div>
        </div>

        {/* User Info Panel */}
        <div className="mt-8 bg-white/10 backdrop-blur-lg rounded-xl p-6 border border-white/20">
          <h3 className="text-xl font-semibold text-white mb-4">Your Profile</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="block text-gray-300 text-sm mb-2">Name</label>
              <p className="text-white font-medium">{user?.name}</p>
            </div>
            <div>
              <label className="block text-gray-300 text-sm mb-2">Email</label>
              <p className="text-white font-medium">{user?.email}</p>
            </div>
            <div>
              <label className="block text-gray-300 text-sm mb-2">Role</label>
              <p className="text-white font-medium capitalize">{user?.role?.replace('_', ' ')}</p>
            </div>
          </div>
          
          <div className="mt-4 pt-4 border-t border-white/20">
            <label className="block text-gray-300 text-sm mb-2">Permissions</label>
            <div className="flex flex-wrap gap-2">
              {user?.permissions?.map((permission, index) => (
                <span
                  key={index}
                  className="px-3 py-1 bg-blue-500/20 border border-blue-500/30 text-blue-300 text-sm rounded-full"
                >
                  {permission}
                </span>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main App Component
const App = () => {
  const [currentView, setCurrentView] = useState('login');
  
  return (
    <AuthProvider>
      <AuthRouter 
        currentView={currentView} 
        setCurrentView={setCurrentView}
      />
    </AuthProvider>
  );
};

// Auth Router Component
const AuthRouter = ({ currentView, setCurrentView }) => {
  const { user, loading } = useAuth();
  
  // Loading state
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-white/20 border-top-4 border-t-orange-500 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-white">Loading...</p>
        </div>
      </div>
    );
  }
  
  // If user is authenticated, show dashboard
  if (user) {
    return <Dashboard />;
  }
  
  // Show auth forms based on current view
  switch (currentView) {
    case 'register':
      return <Register onSwitchToLogin={() => setCurrentView('login')} />;
    default:
      return <Login onSwitchToRegister={() => setCurrentView('register')} />;
  }
};

export default App;
