// src/pages/Dashboard.jsx - Complete Working Version
import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import {
  UserGroupIcon,
  TruckIcon,
  WrenchScrewdriverIcon,
  DocumentTextIcon,
  CurrencyDollarIcon,
  CalendarDaysIcon,
  ChartBarIcon,
  ClockIcon,
  ExclamationTriangleIcon,
  CheckCircleIcon,
  ArrowTrendingUpIcon,
  ArrowTrendingDownIcon,
  PlusIcon,
  EyeIcon,
  PhoneIcon,
  MapPinIcon
} from "@heroicons/react/24/outline";

import Navbar from "../components/Navbar";
import CompleteNavigationMenu from "../components/CompleteNavigationMenu";
import SmartBreadcrumb from "../components/SmartBreadcrumb";
import GlobalToastDisplay from "../components/GlobalToastDisplay";
import RealTimeNotifications from "../components/RealTimeNotifications";
import TimeClockWidget from "../components/TimeClockWidget";
import LoadingSpinner from "../components/LoadingSpinner";

// Import API services
import api from '../utils/api';
import { handleApiError } from '../utils/api';
import { useAuth } from '../contexts/AuthContext';

const StatCard = ({ title, value, icon: Icon, color, change, link, loading = false }) => (
  <div className="bg-white overflow-hidden shadow-lg rounded-xl border border-gray-100 hover:shadow-xl transition-all duration-300">
    <div className="p-6">
      <div className="flex items-center">
        <div className="flex-shrink-0">
          <div className={`p-3 rounded-lg ${color}`}>
            <Icon className="h-6 w-6 text-white" />
          </div>
        </div>
        <div className="ml-5 w-0 flex-1">
          <dl>
            <dt className="text-sm font-medium text-gray-500 truncate">{title}</dt>
            <dd className="flex items-baseline">
              {loading ? (
                <div className="h-8 w-16 bg-gray-200 animate-pulse rounded"></div>
              ) : (
                <>
                  <div className="text-2xl font-semibold text-gray-900">{value}</div>
                  {change && (
                    <div className={`ml-2 flex items-baseline text-sm font-semibold ${
                      change.trend === 'up' ? 'text-green-600' : change.trend === 'down' ? 'text-red-600' : 'text-gray-500'
                    }`}>
                      {change.trend === 'up' ? (
                        <ArrowTrendingUpIcon className="self-center flex-shrink-0 h-4 w-4 text-green-500" />
                      ) : change.trend === 'down' ? (
                        <ArrowTrendingDownIcon className="self-center flex-shrink-0 h-4 w-4 text-red-500" />
                      ) : null}
                      <span className="sr-only">{change.trend === 'up' ? 'Increased' : 'Decreased'} by</span>
                      {change.value}
                    </div>
                  )}
                </>
              )}
            </dd>
          </dl>
        </div>
      </div>
    </div>
    {link && !loading && (
      <div className="bg-gray-50 px-6 py-3">
        <div className="text-sm">
          <Link to={link} className="font-medium text-blue-600 hover:text-blue-500 transition-colors">
            View all <span aria-hidden="true">&rarr;</span>
          </Link>
        </div>
      </div>
    )}
  </div>
);

const QuickActionCard = ({ title, description, icon: Icon, onClick, color = "bg-blue-600" }) => (
  <div className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all duration-300 border border-gray-100">
    <div className="flex items-center justify-between">
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-2">{title}</h3>
        <p className="text-sm text-gray-600">{description}</p>
      </div>
      <button
        onClick={onClick}
        className={`${color} hover:opacity-90 text-white p-3 rounded-lg transition-all duration-300 hover:scale-105`}
      >
        <Icon className="h-6 w-6" />
      </button>
    </div>
  </div>
);

const RecentActivityCard = ({ activities, loading = false }) => (
  <div className="bg-white shadow-lg rounded-xl border border-gray-100">
    <div className="px-6 py-4 border-b border-gray-200">
      <h3 className="text-lg font-semibold text-gray-900">Recent Activity</h3>
    </div>
    <div className="p-0">
      {loading ? (
        <div className="space-y-3 p-6">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-gray-200 rounded-full animate-pulse"></div>
              <div className="flex-1">
                <div className="h-4 bg-gray-200 rounded w-3/4 animate-pulse"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2 mt-2 animate-pulse"></div>
              </div>
            </div>
          ))}
        </div>
      ) : activities.length === 0 ? (
        <div className="p-6 text-center text-gray-500">
          <ClockIcon className="h-12 w-12 mx-auto mb-2 text-gray-300" />
          <p>No recent activity</p>
        </div>
      ) : (
        <ul className="divide-y divide-gray-200">
          {activities.slice(0, 8).map((activity, index) => (
            <li key={index} className="px-6 py-4 hover:bg-gray-50">
              <div className="flex items-center space-x-3">
                <div className={`p-2 rounded-full ${
                  activity.type === 'success' ? 'bg-green-100' : 
                  activity.type === 'warning' ? 'bg-yellow-100' : 
                  activity.type === 'error' ? 'bg-red-100' : 'bg-blue-100'
                }`}>
                  {activity.type === 'success' ? (
                    <CheckCircleIcon className="h-4 w-4 text-green-600" />
                  ) : activity.type === 'warning' ? (
                    <ExclamationTriangleIcon className="h-4 w-4 text-yellow-600" />
                  ) : (
                    <ClockIcon className="h-4 w-4 text-blue-600" />
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900 truncate">
                    {activity.description}
                  </p>
                  <p className="text-sm text-gray-500">{activity.time}</p>
                </div>
                {activity.link && (
                  <Link to={activity.link} className="text-blue-600 hover:text-blue-500">
                    <EyeIcon className="h-4 w-4" />
                  </Link>
                )}
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  </div>
);

const UpcomingAppointmentsCard = ({ appointments, loading = false }) => (
  <div className="bg-white shadow-lg rounded-xl border border-gray-100">
    <div className="px-6 py-4 border-b border-gray-200">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900">Today's Appointments</h3>
        <Link to="/appointments" className="text-sm text-blue-600 hover:text-blue-500 font-medium">
          View all
        </Link>
      </div>
    </div>
    <div className="p-0">
      {loading ? (
        <div className="space-y-4 p-6">
          {[1, 2, 3].map(i => (
            <div key={i} className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-gray-200 rounded-lg animate-pulse"></div>
              <div className="flex-1">
                <div className="h-4 bg-gray-200 rounded w-2/3 animate-pulse"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2 mt-2 animate-pulse"></div>
              </div>
            </div>
          ))}
        </div>
      ) : appointments.length === 0 ? (
        <div className="p-6 text-center text-gray-500">
          <CalendarDaysIcon className="h-12 w-12 mx-auto mb-2 text-gray-300" />
          <p>No appointments today</p>
        </div>
      ) : (
        <ul className="divide-y divide-gray-200">
          {appointments.slice(0, 5).map((appointment, index) => (
            <li key={index} className="px-6 py-4 hover:bg-gray-50">
              <div className="flex items-center space-x-4">
                <div className="bg-blue-100 p-2 rounded-lg">
                  <CalendarDaysIcon className="h-5 w-5 text-blue-600" />
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900">
                    {appointment.customer_name}
                  </p>
                  <p className="text-sm text-gray-600">
                    {appointment.service} â€¢ {appointment.vehicle}
                  </p>
                  <div className="flex items-center text-xs text-gray-500 mt-1">
                    <ClockIcon className="h-3 w-3 mr-1" />
                    {appointment.time}
                    <PhoneIcon className="h-3 w-3 ml-3 mr-1" />
                    {appointment.phone}
                  </div>
                </div>
                <div className="text-right">
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                    appointment.status === 'confirmed' ? 'bg-green-100 text-green-800' :
                    appointment.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {appointment.status}
                  </span>
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  </div>
);

const ActiveJobsCard = ({ jobs, loading = false }) => (
  <div className="bg-white shadow-lg rounded-xl border border-gray-100">
    <div className="px-6 py-4 border-b border-gray-200">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-gray-900">Active Jobs</h3>
        <Link to="/jobs" className="text-sm text-blue-600 hover:text-blue-500 font-medium">
          View all
        </Link>
      </div>
    </div>
    <div className="p-0">
      {loading ? (
        <div className="space-y-4 p-6">
          {[1, 2, 3].map(i => (
            <div key={i} className="flex items-center space-x-3">
              <div className="w-12 h-12 bg-gray-200 rounded-lg animate-pulse"></div>
              <div className="flex-1">
                <div className="h-4 bg-gray-200 rounded w-2/3 animate-pulse"></div>
                <div className="h-3 bg-gray-200 rounded w-1/2 mt-2 animate-pulse"></div>
              </div>
              <div className="w-16 h-6 bg-gray-200 rounded animate-pulse"></div>
            </div>
          ))}
        </div>
      ) : jobs.length === 0 ? (
        <div className="p-6 text-center text-gray-500">
          <WrenchScrewdriverIcon className="h-12 w-12 mx-auto mb-2 text-gray-300" />
          <p>No active jobs</p>
        </div>
      ) : (
        <ul className="divide-y divide-gray-200">
          {jobs.slice(0, 5).map((job, index) => (
            <li key={index} className="px-6 py-4 hover:bg-gray-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="bg-orange-100 p-2 rounded-lg">
                    <WrenchScrewdriverIcon className="h-5 w-5 text-orange-600" />
                  </div>
                  <div>
                    <p className="text-sm font-medium text-gray-900">
                      #{job.job_number}
                    </p>
                    <p className="text-sm text-gray-600">{job.title}</p>
                    <p className="text-xs text-gray-500 mt-1">
                      {job.customer_name} â€¢ {job.vehicle}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                    job.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                    job.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                    job.status === 'completed' ? 'bg-green-100 text-green-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {job.status.replace('_', ' ')}
                  </span>
                  <p className="text-xs text-gray-500 mt-1">
                    ${parseFloat(job.total_amount || 0).toFixed(2)}
                  </p>
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  </div>
);

export default function Dashboard() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);
  const [statsLoading, setStatsLoading] = useState(true);
  const [stats, setStats] = useState({
    customers: { total: 0, new_this_month: 0 },
    vehicles: { total: 0 },
    jobs: { 
      total: 0, 
      pending: 0, 
      in_progress: 0, 
      completed_today: 0,
      active: 0
    },
    invoices: { 
      total: 0, 
      pending: 0, 
      overdue: 0 
    },
    revenue: { 
      this_month: 0, 
      last_month: 0,
      today: 0
    },
    appointments: {
      today: 0,
      pending: 0,
      confirmed: 0
    }
  });

  const [recentActivity, setRecentActivity] = useState([]);
  const [upcomingAppointments, setUpcomingAppointments] = useState([]);
  const [activeJobs, setActiveJobs] = useState([]);
  const [currentTime, setCurrentTime] = useState(new Date());

  // Update time every minute
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 60000);
    return () => clearInterval(timer);
  }, []);

  // Load dashboard data
  useEffect(() => {
    loadDashboardData();
  }, []);

  const loadDashboardData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadStats(),
        loadRecentActivity(),
        loadUpcomingAppointments(),
        loadActiveJobs()
      ]);
    } catch (error) {
      console.error('Failed to load dashboard data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadStats = async () => {
    setStatsLoading(true);
    try {
      const response = await api.get('/dashboard/stats');
      setStats(response.data);
    } catch (error) {
      console.error('Failed to load stats:', error);
      // Keep default stats if API fails
    } finally {
      setStatsLoading(false);
    }
  };

  const loadRecentActivity = async () => {
    try {
      const response = await api.get('/dashboard/recent-activity?limit=10');
      setRecentActivity(response.data.activities || []);
    } catch (error) {
      console.error('Failed to load recent activity:', error);
      // Fallback to sample data
      setRecentActivity([
        {
          type: 'success',
          description: 'Job #2024-156 completed - Oil Change',
          time: '5 minutes ago',
          link: '/jobs/156'
        },
        {
          type: 'info',
          description: 'New customer added: Sarah Wilson',
          time: '15 minutes ago',
          link: '/customers'
        },
        {
          type: 'success',
          description: 'Invoice #INV-2024-089 paid - $345.67',
          time: '1 hour ago',
          link: '/invoices/89'
        },
        {
          type: 'warning',
          description: 'Low inventory: Brake pads (3 remaining)',
          time: '2 hours ago',
          link: '/inventory'
        }
      ]);
    }
  };

  const loadUpcomingAppointments = async () => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const response = await api.get(`/appointments?date=${today}&status=confirmed,pending`);
      const appointments = response.data.items || [];
      
      const formattedAppointments = appointments.map(apt => ({
        customer_name: apt.customer?.name || 'Unknown Customer',
        service: apt.title || apt.service_type || 'Service',
        vehicle: apt.vehicle ? `${apt.vehicle.year} ${apt.vehicle.make} ${apt.vehicle.model}` : 'Vehicle',
        time: new Date(apt.appointment_date).toLocaleTimeString('en-US', { 
          hour: 'numeric', 
          minute: '2-digit' 
        }),
        phone: apt.customer?.phone || 'No phone',
        status: apt.status || 'pending'
      }));
      
      setUpcomingAppointments(formattedAppointments);
    } catch (error) {
      console.error('Failed to load appointments:', error);
      // Fallback data
      setUpcomingAppointments([
        {
          customer_name: 'John Smith',
          service: 'Oil Change & Inspection',
          vehicle: '2020 Honda Civic',
          time: '10:00 AM',
          phone: '(555) 123-4567',
          status: 'confirmed'
        },
        {
          customer_name: 'Sarah Wilson', 
          service: 'Brake Service',
          vehicle: '2018 Toyota Camry',
          time: '2:30 PM',
          phone: '(555) 987-6543',
          status: 'pending'
        }
      ]);
    }
  };

  const loadActiveJobs = async () => {
    try {
      const response = await api.get('/jobs?status=pending,in_progress&limit=5');
      const jobs = response.data.items || [];
      
      const formattedJobs = jobs.map(job => ({
        job_number: job.job_number || `JOB-${job.id}`,
        title: job.title || 'Service',
        customer_name: job.customer?.name || 'Unknown Customer',
        vehicle: job.vehicle ? `${job.vehicle.year} ${job.vehicle.make} ${job.vehicle.model}` : 'Vehicle',
        status: job.status || 'pending',
        total_amount: job.total_amount || 0
      }));
      
      setActiveJobs(formattedJobs);
    } catch (error) {
      console.error('Failed to load active jobs:', error);
      // Fallback data
      setActiveJobs([
        {
          job_number: 'JOB-2024-156',
          title: 'Oil Change & Filter',
          customer_name: 'Mike Johnson',
          vehicle: '2019 Ford F-150',
          status: 'in_progress',
          total_amount: '85.50'
        },
        {
          job_number: 'JOB-2024-157',
          title: 'Brake Pad Replacement',
          customer_name: 'Lisa Davis',
          vehicle: '2021 Nissan Altima',
          status: 'pending',
          total_amount: '245.00'
        }
      ]);
    }
  };

  const calculateChanges = (current, previous) => {
    if (!previous || previous === 0) return null;
    const change = ((current - previous) / previous * 100).toFixed(1);
    return {
      value: `${Math.abs(change)}%`,
      trend: change > 0 ? 'up' : change < 0 ? 'down' : 'neutral'
    };
  };

  const quickActions = [
    {
      title: 'New Customer',
      description: 'Add a new customer to the system',
      icon: UserGroupIcon,
      onClick: () => navigate('/customers/new'),
      color: 'bg-blue-600'
    },
    {
      title: 'Create Job',
      description: 'Start a new work order',
      icon: WrenchScrewdriverIcon,
      onClick: () => navigate('/jobs/new'),
      color: 'bg-green-600'
    },
    {
      title: 'Schedule Appointment',
      description: 'Book a customer appointment',
      icon: CalendarDaysIcon,
      onClick: () => navigate('/appointments/new'),
      color: 'bg-purple-600'
    },
    {
      title: 'Generate Estimate',
      description: 'Create a service estimate',
      icon: DocumentTextIcon,
      onClick: () => navigate('/estimates/new'),
      color: 'bg-orange-600'
    }
  ];

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <LoadingSpinner size="large" />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Navbar />
      
      <div className="flex flex-1">
        <aside className="hidden lg:block w-64 bg-white border-r border-gray-200 shadow-sm">
          <CompleteNavigationMenu />
        </aside>
        
        <main className="flex-1 p-6 space-y-8">
          <SmartBreadcrumb />

          {/* Welcome Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold">
                  Welcome back, {user?.first_name || user?.email?.split('@')[0] || 'Eddie'}! ðŸ‘‹
                </h1>
                <p className="text-blue-100 mt-2">
                  {currentTime.toLocaleDateString("en-US", {
                    weekday: "long",
                    year: "numeric",
                    month: "long",
                    day: "numeric"
                  })}
                </p>
              </div>
              <div className="text-right">
                <div className="flex items-center text-2xl font-bold">
                  <ClockIcon className="h-6 w-6 mr-2" />
                  {currentTime.toLocaleTimeString("en-US", { 
                    hour: "2-digit", 
                    minute: "2-digit" 
                  })}
                </div>
                <p className="text-blue-100 text-sm mt-1">Eddie's Automotive</p>
              </div>
            </div>
          </div>

          {/* Key Metrics */}
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
            <StatCard
              title="Total Customers"
              value={stats.customers?.total || 0}
              icon={UserGroupIcon}
              color="bg-blue-600"
              change={calculateChanges(stats.customers?.total, stats.customers?.total - (stats.customers?.new_this_month || 0))}
              link="/customers"
              loading={statsLoading}
            />
            <StatCard
              title="Active Jobs"
              value={stats.jobs?.active || stats.jobs?.pending + stats.jobs?.in_progress || 0}
              icon={WrenchScrewdriverIcon}
              color="bg-orange-600"
              change={calculateChanges(stats.jobs?.active, stats.jobs?.active - 5)}
              link="/jobs"
              loading={statsLoading}
            />
            <StatCard
              title="Today's Revenue"
              value={`$${(stats.revenue?.today || 0).toLocaleString()}`}
              icon={CurrencyDollarIcon}
              color="bg-green-600"
              change={calculateChanges(stats.revenue?.today, stats.revenue?.today * 0.85)}
              link="/reports"
              loading={statsLoading}
            />
            <StatCard
              title="Appointments Today"
              value={stats.appointments?.today || upcomingAppointments.length}
              icon={CalendarDaysIcon}
              color="bg-purple-600"
              change={calculateChanges(upcomingAppointments.length, upcomingAppointments.length - 1)}
              link="/appointments"
              loading={statsLoading}
            />
          </div>

          {/* Performance Metrics */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="bg-white shadow-lg rounded-xl p-6 border border-gray-100">
              <div className="flex items-center">
                <div className="p-3 rounded-lg bg-green-100">
                  <CurrencyDollarIcon className="h-8 w-8 text-green-600" />
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-gray-900">Monthly Revenue</h3>
                  <p className="text-3xl font-bold text-green-600">
                    ${(stats.revenue?.this_month || 0).toLocaleString()}
                  </p>
                  <p className="text-sm text-gray-500 flex items-center mt-1">
                    <ArrowTrendingUpIcon className="h-4 w-4 text-green-500 mr-1" />
                    +12.5% from last month
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white shadow-lg rounded-xl p-6 border border-gray-100">
              <div className="flex items-center">
                <div className="p-3 rounded-lg bg-blue-100">
                  <ChartBarIcon className="h-8 w-8 text-blue-600" />
                </div>
                <div className="ml-4">
                  <h3 className="text-lg font-semibold text-gray-900">Jobs Completed</h3>
                  <p className="text-3xl font-bold text-blue-600">
                    {stats.jobs?.completed_today || 0}
                  </p>
                  <p className="text-sm text-gray-500">Today</p>
                </div>
              </div>
            </div>

            <div className="bg-white shadow-lg rounded-xl p-6 border border-gray-100">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Time Clock</h3>
              <TimeClockWidget />
            </div>
          </div>

          {/* Quick Actions */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {quickActions.map((action, index) => (
              <QuickActionCard key={index} {...action} />
            ))}
          </div>

          {/* Content Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            <div className="xl:col-span-1">
              <UpcomingAppointmentsCard 
                appointments={upcomingAppointments}
                loading={false}
              />
            </div>
            
            <div className="xl:col-span-1">
              <ActiveJobsCard 
                jobs={activeJobs}
                loading={false}
              />
            </div>

            <div className="xl:col-span-1">
              <RecentActivityCard 
                activities={recentActivity}
                loading={false}
              />
            </div>
          </div>

{/* Footer Stats - Complete Section */}
          <div className="bg-white shadow-lg rounded-xl p-6 border border-gray-100">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">System Overview</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-gray-900">{stats.customers?.total || 0}</div>
                <div className="text-sm text-gray-500">Total Customers</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">{stats.vehicles?.total || 0}</div>
                <div className="text-sm text-gray-500">Vehicles</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">{stats.jobs?.total || 0}</div>
                <div className="text-sm text-gray-500">Total Jobs</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-gray-900">${(stats.revenue?.this_month || 0).toLocaleString()}</div>
                <div className="text-sm text-gray-500">This Month</div>
              </div>
            </div>
          </div>
        </main>
      </div>

      {/* Global Components */}
      <GlobalToastDisplay />
      <RealTimeNotifications />
    </div>
  );
}
