import React, { createContext, useContext, useState } from 'react';
import { apiEndpoints } from '../utils/apiEndpoints';

const AuthContext = createContext({});

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const login = async (email, password) => {
    setLoading(true);
    setError(null);
    try {
      const response = await apiEndpoints.auth.login({ email, password });
      const { token, user: userData } = response.data;

      localStorage.setItem('token', token);
      localStorage.setItem('user', JSON.stringify(userData));
      setUser(userData);
      setLoading(false);

      return { success: true, user: userData };
    } catch (err) {
      setError(err.response?.data?.message || 'Login failed');
      setLoading(false);
      return { success: false, error: err.response?.data?.message || 'Login failed' };
    }
  };

  const logout = async () => {

  const register = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const response = await apiEndpoints.auth.register(userData);
      const { token, user: newUser } = response.data;

      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(newUser));
      setUser(newUser);
      setLoading(false);

      return { success: true, user: newUser };
    } catch (err) {
      setError(err.response?.data?.message || "Registration failed");
      setLoading(false);
      return { success: false, error: err.response?.data?.message || "Registration failed" };
    }
  };
    localStorage.removeItem('token');

  const register = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const response = await apiEndpoints.auth.register(userData);
      const { token, user: newUser } = response.data;

      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(newUser));
      setUser(newUser);
      setLoading(false);

      return { success: true, user: newUser };
    } catch (err) {
      setError(err.response?.data?.message || "Registration failed");
      setLoading(false);
      return { success: false, error: err.response?.data?.message || "Registration failed" };
    }
  };
    localStorage.removeItem('user');

  const register = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const response = await apiEndpoints.auth.register(userData);
      const { token, user: newUser } = response.data;

      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(newUser));
      setUser(newUser);
      setLoading(false);

      return { success: true, user: newUser };
    } catch (err) {
      setError(err.response?.data?.message || "Registration failed");
      setLoading(false);
      return { success: false, error: err.response?.data?.message || "Registration failed" };
    }
  };
    setUser(null);

  const register = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const response = await apiEndpoints.auth.register(userData);
      const { token, user: newUser } = response.data;

      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(newUser));
      setUser(newUser);
      setLoading(false);

      return { success: true, user: newUser };
    } catch (err) {
      setError(err.response?.data?.message || "Registration failed");
      setLoading(false);
      return { success: false, error: err.response?.data?.message || "Registration failed" };
    }
  };
  };

  const register = async (userData) => {
    setLoading(true);
    setError(null);
    try {
      const response = await apiEndpoints.auth.register(userData);
      const { token, user: newUser } = response.data;

      localStorage.setItem("token", token);
      localStorage.setItem("user", JSON.stringify(newUser));
      setUser(newUser);
      setLoading(false);

      return { success: true, user: newUser };
    } catch (err) {
      setError(err.response?.data?.message || "Registration failed");
      setLoading(false);
      return { success: false, error: err.response?.data?.message || "Registration failed" };
    }
  };

  const isAuthenticated = !!user;

  const value = {
    user,
    loading,
    error,
    login,
    register,
    logout,
    isAuthenticated,
    setError,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
