===== FULL APP ANALYSIS REPORT =====
Generated on: Sat Oct 11 19:04:09 PDT 2025

== Backend Routes ==

---- dashboard ----

---- settings ----

---- invoices ----

---- estimates ----

---- customers ----

---- vehicles ----

---- jobs ----

---- appointments ----

---- ai ----


== Frontend Component Usage ==

---- dashboard ----
./frontend/src/App.jsx:import Dashboard from './pages/Dashboard';
./frontend/src/App.jsx:import ProtectedDashboardLayout from './layouts/ProtectedDashboardLayout';
./frontend/src/App.jsx:            {/* Protected dashboard routes */}
./frontend/src/App.jsx:            <Route element={<ProtectedDashboardLayout />}>
./frontend/src/App.jsx:              <Route path="/" element={<Dashboard />} />
./frontend/src/App.jsx:              <Route path="/dashboard" element={<Dashboard />} />
./frontend/src/App.jsx:              {/* Other dashboard pages */}
./frontend/src/pages/Login.jsx:        // Direct redirect to dashboard - no double login
./frontend/src/pages/Login.jsx:navigate("/dashboard", { replace: true });
./frontend/src/pages/Login.jsx:        navigate("/dashboard", { replace: true });
./frontend/src/pages/Dashboard.jsx:// src/pages/Dashboard.jsx - Fixed to use correct data sources
./frontend/src/pages/Dashboard.jsx:import DashboardCard from '../components/DashboardCard';
./frontend/src/pages/Dashboard.jsx:const Dashboard = () => {
./frontend/src/pages/Dashboard.jsx:            <p className="text-gray-600 mb-6">Please log in to view the dashboard.</p>
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:          <DashboardCard
./frontend/src/pages/Dashboard.jsx:export default Dashboard;
./frontend/src/pages/Mobile.jsx:        <h1 className="text-2xl font-bold text-gray-900 mb-6">Mobile Dashboard</h1>
./frontend/src/pages/Reports.jsx:import { reportsService, dashboardService } from '../utils';
./frontend/src/pages/Reports.jsx:  const [dashboardStats, setDashboardStats] = useState(null);
./frontend/src/pages/Reports.jsx:  // Load dashboard stats on mount
./frontend/src/pages/Reports.jsx:    const loadDashboardStats = async () => {
./frontend/src/pages/Reports.jsx:        const stats = await dashboardService.stats();
./frontend/src/pages/Reports.jsx:        setDashboardStats(stats.data || stats);
./frontend/src/pages/Reports.jsx:        console.error('Failed to load dashboard stats:', error);
./frontend/src/pages/Reports.jsx:    loadDashboardStats();
./frontend/src/pages/Reports.jsx:        {/* Dashboard Stats Summary */}
./frontend/src/pages/Reports.jsx:        {dashboardStats && (
./frontend/src/pages/Reports.jsx:                {currency(dashboardStats.total_revenue || dashboardStats.totalRevenue || 0)}
./frontend/src/pages/Reports.jsx:                {dashboardStats.active_jobs || dashboardStats.activeJobs || 0}
./frontend/src/pages/Reports.jsx:                {dashboardStats.unpaid_invoices || dashboardStats.unpaidInvoices || 0}
./frontend/src/pages/Reports.jsx:                {dashboardStats.total_customers || dashboardStats.totalCustomers || 0}
./frontend/src/pages/Login.jsx.safe:      // Success handled by AuthContext redirect to dashboard
./frontend/src/pages/Dashboard.jsx.broken-again:// src/pages/Dashboard.jsx - Clean working version
./frontend/src/pages/Dashboard.jsx.broken-again:const Dashboard = () => {
./frontend/src/pages/Dashboard.jsx.broken-again:    // Load dashboard data
./frontend/src/pages/Dashboard.jsx.broken-again:    loadDashboardData();
./frontend/src/pages/Dashboard.jsx.broken-again:  const loadDashboardData = async () => {
./frontend/src/pages/Dashboard.jsx.broken-again:      setError('Failed to load dashboard data');
./frontend/src/pages/Dashboard.jsx.broken-again:          <p className="text-gray-600">Loading Dashboard...</p>
./frontend/src/pages/Dashboard.jsx.broken-again:                onClick={loadDashboardData}
./frontend/src/pages/Dashboard.jsx.broken-again:export default Dashboard;
./frontend/src/pages/AddAndEditCustomer.jsx:// src/pages/AddAndEditCustomer.jsx - Following Dashboard.jsx pattern
./frontend/src/pages/AddAndEditCustomer.jsx:  // State variables following Dashboard pattern
./frontend/src/pages/AddAndEditCustomer.jsx:  // Load customer data when editing - following Dashboard pattern
./frontend/src/pages/AddAndEditCustomer.jsx:  // Utility functions following Dashboard pattern
./frontend/src/pages/AddAndEditCustomer.jsx:  // Error handling following Dashboard pattern
./frontend/src/pages/AddAndEditCustomer.jsx:        {/* Header following Dashboard pattern */}
./frontend/src/pages/index.js:export { default as Dashboard } from './Dashboard';
./frontend/src/pages/Dashboard.jsx.before-fix:// src/pages/Dashboard.jsx - Enhanced version with fallback data
./frontend/src/pages/Dashboard.jsx.before-fix:import DashboardCard from '../components/DashboardCard';
./frontend/src/pages/Dashboard.jsx.before-fix:const Dashboard = () => {
./frontend/src/pages/Dashboard.jsx.before-fix:    fetchDashboardStats
./frontend/src/pages/Dashboard.jsx.before-fix:          await fetchDashboardStats();
./frontend/src/pages/Dashboard.jsx.before-fix:          console.error('Failed to load dashboard stats:', error);
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [isAuthenticated, token, fetchDashboardStats, lastFetch]);
./frontend/src/pages/Dashboard.jsx.before-fix:      await fetchDashboardStats();
./frontend/src/pages/Dashboard.jsx.before-fix:            <p className="text-gray-600 mb-6">Please log in to view the dashboard.</p>
./frontend/src/pages/Dashboard.jsx.before-fix:          <h2 className="text-xl font-semibold text-gray-900 mb-2">Loading Dashboard...</h2>
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:          <DashboardCard
./frontend/src/pages/Dashboard.jsx.before-fix:export default Dashboard;
./frontend/src/components/Navbar.jsx:            <Link to="/dashboard" className="text-xl font-bold">
./frontend/src/components/Navbar.jsx:            <Link to="/dashboard" className="nav-link">Dashboard</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/dashboard" className="nav-link block">Dashboard</Link>
./frontend/src/components/DashboardCard.jsx:// src/components/DashboardCard.jsx - ENHANCED VERSION
./frontend/src/components/DashboardCard.jsx:const DashboardCard = ({ 
./frontend/src/components/DashboardCard.jsx:export default DashboardCard;
./frontend/src/components/SearchSystem.jsx:// Search button component for the Navbar/Dashboard
./frontend/src/components/Navigation.jsx:    { path: "/dashboard", label: "Dashboard", icon: HomeIcon },
./frontend/src/components/TechnicianCard.jsx:// src/components/TechnicianCard.jsx - Updated for Dashboard
./frontend/src/components/LogoSplash.jsx:    // Auto-redirect to dashboard after 3 seconds
./frontend/src/components/LogoSplash.jsx:      navigate('/app/dashboard', { replace: true });
./frontend/src/components/LogoSplash.jsx:    navigate('/app/dashboard', { replace: true });
./frontend/src/components/LogoSplash.jsx:          <p className="text-white text-lg">Loading Dashboard...</p>
./frontend/src/components/LogoSplash.jsx:          Skip to Dashboard →
./frontend/src/components/ai/AIDashboard.jsx:const AIDashboard = () => {
./frontend/src/components/ai/AIDashboard.jsx:      <h2 className="text-2xl font-bold text-gray-800 mb-6">AI Dashboard</h2>
./frontend/src/components/ai/AIDashboard.jsx:export default AIDashboard;
./frontend/src/components/ai/index.js:export { default as AIDashboard } from './AIDashboard.jsx';
./frontend/src/components/layout/MobileNavigation.jsx:      <button onClick={() => setActive('dashboard')} className={active==='dashboard'?'active':''}><FaHome /></button>
./frontend/src/components/SmartBreadcrumb.jsx:    'dashboard': 'Dashboard',
./frontend/src/components/SmartBreadcrumb.jsx:    'ai': 'AI Dashboard',
./frontend/src/components/SmartBreadcrumb.jsx:  // Don't show breadcrumbs if we're on the root dashboard
./frontend/src/components/SmartBreadcrumb.jsx:  if (pathnames.length === 0 || (pathnames.length === 1 && pathnames[0] === 'dashboard')) {
./frontend/src/components/SmartBreadcrumb.jsx:      {/* Home/Dashboard Link */}
./frontend/src/components/SmartBreadcrumb.jsx:        to="/dashboard"
./frontend/src/components/SmartBreadcrumb.jsx:        <span className="ml-1 hidden sm:inline">Dashboard</span>
./frontend/src/components/LandingPage.jsx:            Access Your Dashboard →
./frontend/src/components/index.js:export { default as DashboardCard } from './DashboardCard';
./frontend/src/components/index.js:export { default as Dashboard } from './Dashboard';
./frontend/src/components/index.js:export { default as FullDashboardNavbar } from './FullDashboardNavbar';
./frontend/src/components/Layout.jsx:    { name: 'Dashboard', href: '/dashboard', icon: HomeIcon },
./frontend/src/config/navigation.js:    to: '/dashboard',
./frontend/src/config/navigation.js:    label: 'Dashboard',
./frontend/src/config/navigation.js:  { to: '/dashboard', label: 'Home', icon: '🏠' },
./frontend/src/config/navigation.js:    'Reporting Dashboard (/reports)',
./frontend/src/config/navigation.js:    mainNavLinks[0], // Dashboard
./frontend/src/config/navigation.js:    mainNavLinks[0], // Dashboard
./frontend/src/config/navigation.js:  '/dashboard': ['Dashboard'],
./frontend/src/config/navigation.js:  '/customers': ['Dashboard', 'Customers'],
./frontend/src/config/navigation.js:  '/customers/add': ['Dashboard', 'Customers', 'Add Customer'],
./frontend/src/config/navigation.js:  '/customers/edit': ['Dashboard', 'Customers', 'Edit Customer'],
./frontend/src/config/navigation.js:  '/vehicles': ['Dashboard', 'Vehicles'],
./frontend/src/config/navigation.js:  '/vehicles/add': ['Dashboard', 'Vehicles', 'Add Vehicle'],
./frontend/src/config/navigation.js:  '/jobs': ['Dashboard', 'Jobs'],
./frontend/src/config/navigation.js:  '/jobs/create': ['Dashboard', 'Jobs', 'Create Job'],
./frontend/src/config/navigation.js:  '/jobs/edit': ['Dashboard', 'Jobs', 'Edit Job'],
./frontend/src/config/navigation.js:  '/estimates': ['Dashboard', 'Estimates'],
./frontend/src/config/navigation.js:  '/estimates/create': ['Dashboard', 'Estimates', 'Create Estimate'],
./frontend/src/config/navigation.js:  '/estimates/ai': ['Dashboard', 'Estimates', 'AI Estimates'],
./frontend/src/config/navigation.js:  '/inventory': ['Dashboard', 'Inventory'],
./frontend/src/config/navigation.js:  '/invoices': ['Dashboard', 'Invoices'],
./frontend/src/config/navigation.js:  '/reports': ['Dashboard', 'Reports'],
./frontend/src/config/navigation.js:  '/parts-labor': ['Dashboard', 'Parts & Labor'],
./frontend/src/config/navigation.js:  '/settings': ['Dashboard', 'Settings'],
./frontend/src/config/navigation.js:  '/ai-diagnostics': ['Dashboard', 'AI Diagnostics'],
./frontend/src/config/navigation.js:  '/diagnosis': ['Dashboard', 'Diagnosis'],
./frontend/src/config/navigation.js:  '/migration': ['Dashboard', 'Data Migration'],
./frontend/src/config/navigation.js:  '/appointments': ['Dashboard', 'Appointments'],
./frontend/src/config/navigation.js:  '/profile': ['Dashboard', 'Profile']
./frontend/src/utils/apiEndpoints.js:  // Dashboard
./frontend/src/utils/apiEndpoints.js:  dashboard: {
./frontend/src/utils/apiEndpoints.js:    stats: () => api.get('/api/auth/dashboard/stats'),
./frontend/src/utils/apiEndpoints.js:    getRecentActivity: () => api.get('/api/auth/dashboard/recent-activity'),
./frontend/src/utils/apiEndpoints.js:    getOverview: () => api.get('/api/dashboard/overview'),
./frontend/src/utils/apiEndpoints.js:export const dashboardService = apiEndpoints.dashboard;
./frontend/src/utils/testApi.js:    dashboard: null,
./frontend/src/utils/testApi.js:    // Test dashboard (requires auth)
./frontend/src/utils/testApi.js:      const response = await apiEndpoints.dashboard.stats();
./frontend/src/utils/testApi.js:      results.dashboard = '✅ Dashboard API working';
./frontend/src/utils/testApi.js:        results.dashboard = '⚠️ Dashboard requires authentication';
./frontend/src/utils/testApi.js:        results.dashboard = `❌ Dashboard failed: ${error.message}`;
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/index.js:import dashboardService from './dashboardService';
./frontend/src/utils/services/index.js:  dashboardService
./frontend/src/utils/services/dashboardService.js:export const dashboardService = {
./frontend/src/utils/services/dashboardService.js:      const response = await api.get('/api/auth/dashboard/stats');
./frontend/src/utils/services/dashboardService.js:      console.error('Dashboard stats error:', error);
./frontend/src/utils/services/dashboardService.js:export default dashboardService;
./frontend/src/hooks/useEnhancedNavigation.js:      // Fallback to browser back or dashboard
./frontend/src/hooks/useEnhancedNavigation.js:        navigate('/dashboard');
./frontend/src/contexts/SettingsProvider.jsx:  // Helper function to get shop info for dashboard
./frontend/src/layouts/Layout.jsx:// src/layouts/Layout.jsx - Full Dashboard Layout with complete navbar
./frontend/src/layouts/ProtectedDashboardLayout.jsx:// src/layouts/ProtectedDashboardLayout.jsx
./frontend/src/layouts/ProtectedDashboardLayout.jsx:// Full Dashboard components
./frontend/src/layouts/ProtectedDashboardLayout.jsx:export default function ProtectedDashboardLayout() {
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:// src/layouts/ProtectedDashboardLayout.jsx
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:// Full Dashboard components
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:export default function ProtectedDashboardLayout() {
./frontend/src/_backups/MobileTechApp.tsx:          to="/dashboard" 
./frontend/src/_backups/MobileTechApp.tsx:            to="/dashboard"
./frontend/src/_backups/MobileTechApp.tsx:            Back to Dashboard
./frontend/src/_backups/Dashboard.tsx:const Dashboard: React.FC = () => {
./frontend/src/_backups/Dashboard.tsx:    queryKey: ['dashboard-stats'],
./frontend/src/_backups/Dashboard.tsx:      const response = await axios.get('/api/v1/dashboard/stats');
./frontend/src/_backups/Dashboard.tsx:        <h1 className="text-3xl font-bold mb-2">💎 Billion-Dollar Dashboard</h1>
./frontend/src/_backups/Dashboard.tsx:export default Dashboard;
./frontend/src/_backups/App.tsx:const Dashboard = lazy(() => import('./pages/Dashboard'))
./frontend/src/_backups/App.tsx:              element={user ? <Navigate to="/dashboard" /> : <Login />} 
./frontend/src/_backups/App.tsx:              element={user ? <Navigate to="/dashboard" /> : <Register />} 
./frontend/src/_backups/App.tsx:              <Route index element={<Navigate to="/dashboard" replace />} />
./frontend/src/_backups/App.tsx:              <Route path="dashboard" element={<Dashboard />} />
./frontend/src/fix_api.sh:  // Dashboard & Reports
./frontend/src/fix_api.sh:  dashboard: {
./frontend/src/fix_api.sh:    stats: () => api.get('/api/auth/dashboard/stats'),
./frontend/src/fix_api.sh:    recentActivity: () => api.get('/api/auth/dashboard/recent-activity'),
./frontend/src/fix_api.sh:// Dashboard & Reports
./frontend/src/fix_api.sh:export const dashboard_stats_get = () => apiEndpoints.dashboard.stats();
./frontend/src/fix_api.sh:export const dashboard_recent_activity_get = () => apiEndpoints.dashboard.recentActivity();
./frontend/src/fix_api.sh:export const dashboardService = apiEndpoints.dashboard;
./frontend/src/types/index.ts:export interface DashboardStats {
./frontend/src/App-20250831_000053.jsx:  Dashboard,
./frontend/src/App-20250831_000053.jsx:              <Route index element={<Navigate to="dashboard" replace />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="dashboard" element={<Dashboard />} />
./frontend/src/App-20250831_000053.jsx:            <Route path="*" element={<Navigate to="/app/dashboard" replace />} />
./frontend/src/index.js:export { default as DashboardCard } from './components/DashboardCard';
./frontend/src/index.js:export { default as FullDashboardNavbar } from './components/FullDashboardNavbar';
./frontend/src/index.js:export { default as Dashboard } from './pages/Dashboard';

---- settings ----
./frontend/src/App.jsx:import Settings from './pages/Settings';
./frontend/src/App.jsx:              <Route path="/settings" element={<Settings />} />
./frontend/src/pages/CreateJob.jsx:  Cpu, Activity, Settings, Database, Globe, Calendar, Clock, 
./frontend/src/pages/CreateJob.jsx:                <Settings className="w-5 h-5" />
./frontend/src/pages/Dashboard.jsx:  Clipboard, Database, Sparkles, Brain, Settings, Zap, X
./frontend/src/pages/Dashboard.jsx:            title="Settings"
./frontend/src/pages/Dashboard.jsx:            icon={Settings}
./frontend/src/pages/Dashboard.jsx:            href="/settings"
./frontend/src/pages/CreateEditEstimate.jsx:import { useSettings } from "../contexts/SettingsProvider";
./frontend/src/pages/CreateEditEstimate.jsx:  const { settings } = useSettings();
./frontend/src/pages/CreateEditEstimate.jsx:  const totals = computeTotals({ parts: estimate.parts, labor: estimate.labor }, settings);
./frontend/src/pages/CreateEditEstimate.jsx:  const addLabor = () => setEstimate((e) => ({ ...e, labor: [...e.labor, { description: "", hours: "", rate: settings.laborRate }] }));
./frontend/src/pages/CreateEditEstimate.jsx:        settings={settings}
./frontend/src/pages/CreateEditEstimate.jsx:            {settings.licenseNumber ? <div>CA ARD License: {settings.licenseNumber}</div> : null}
./frontend/src/pages/CreateEditEstimate.jsx:                      <input type="number" step="1" className="w-24 border rounded p-1 text-right" value={l.rate ?? settings.laborRate}
./frontend/src/pages/CreateEditEstimate.jsx:            <div className="flex justify-between text-green-600"><span>Parts Markup ({(settings.partsMarkup*100).toFixed(1)}%):</span><span>+${totals.partsMarkup.toFixed(2)}</span></div>
./frontend/src/pages/CreateEditEstimate.jsx:            <div className="flex justify-between text-blue-600"><span>Shop Supplies ({(settings.shopSuppliesRate*100).toFixed(1)}%):</span><span>+${totals.shopSupplies.toFixed(2)}</span></div>
./frontend/src/pages/CreateEditEstimate.jsx:            <div className="flex justify-between text-red-600"><span>Tax ({(settings.taxRate*100).toFixed(2)}%):</span><span>+${totals.tax.toFixed(2)}</span></div>
./frontend/src/pages/CreateInvoice.jsx:import { useSettings } from '../contexts/SettingsProvider';
./frontend/src/pages/CreateInvoice.jsx:  const { settings } = useSettings();
./frontend/src/pages/CreateInvoice.jsx:      return settings.pricing?.laborRate || 140;
./frontend/src/pages/CreateInvoice.jsx:    taxRate: settings.pricing?.taxRate * 100 || 8.75,
./frontend/src/pages/CreateInvoice.jsx:    shopSuppliesFee: settings.pricing?.shopSuppliesRate * 100 || 5
./frontend/src/pages/CreateInvoice.jsx:      total: newItem.type === "part" ? newItem.quantity * newItem.unitPrice * (1 + (settings.pricing?.partsMarkup || 0.35)) : newItem.quantity * newItem.unitPrice
./frontend/src/pages/CreateInvoice.jsx:            updated.total = updated.type === "part" ? updated.quantity * updated.unitPrice * (1 + (settings.pricing?.partsMarkup || 0.35)) : updated.quantity * updated.unitPrice;
./frontend/src/pages/Settings.jsx:// src/pages/Settings.jsx - FINAL CORRECTED VERSION
./frontend/src/pages/Settings.jsx:export default function Settings() {
./frontend/src/pages/Settings.jsx:  const [settings, setSettings] = useState({
./frontend/src/pages/Settings.jsx:    // Invoice/Estimate Template Settings
./frontend/src/pages/Settings.jsx:    // AI Settings
./frontend/src/pages/Settings.jsx:    aiSettings: {
./frontend/src/pages/Settings.jsx:  // Fetch settings on mount
./frontend/src/pages/Settings.jsx:    async function fetchSettings() {
./frontend/src/pages/Settings.jsx:        const res = await fetch('/api/settings', {
./frontend/src/pages/Settings.jsx:          setSettings(prev => ({ ...prev, ...data }));
./frontend/src/pages/Settings.jsx:          throw new Error(`Failed to load settings. Status: ${res.status}`);
./frontend/src/pages/Settings.jsx:    fetchSettings();
./frontend/src/pages/Settings.jsx:      setSettings(prev => ({
./frontend/src/pages/Settings.jsx:      setSettings(prev => ({
./frontend/src/pages/Settings.jsx:    setSettings(prev => ({
./frontend/src/pages/Settings.jsx:      const res = await fetch('/api/settings', {
./frontend/src/pages/Settings.jsx:        body: JSON.stringify(settings),
./frontend/src/pages/Settings.jsx:        throw new Error(`Failed to save settings. Status: ${res.status}`);
./frontend/src/pages/Settings.jsx:      setSettings(updated);
./frontend/src/pages/Settings.jsx:      const hours = settings.businessHours[day];
./frontend/src/pages/Settings.jsx:        { description: 'Oil Change Service', hours: 0.5, rate: settings.laborRate },
./frontend/src/pages/Settings.jsx:        { description: 'Multi-Point Inspection', hours: 0.25, rate: settings.laborRate }
./frontend/src/pages/Settings.jsx:      sum + (p.cost * (1 + settings.partsMarkup) * p.quantity), 0);
./frontend/src/pages/Settings.jsx:    const shopSupplies = subtotal * settings.shopSuppliesRate;
./frontend/src/pages/Settings.jsx:    const tax = (subtotal + shopSupplies) * settings.taxRate;
./frontend/src/pages/Settings.jsx:        <div className="text-lg">Loading settings...</div>
./frontend/src/pages/Settings.jsx:    { id: 'ai', label: 'AI Settings', icon: Wrench },
./frontend/src/pages/Settings.jsx:                Shop Management Settings
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600 mt-2">Configure all business settings that control estimates, invoices, and AI behavior</p>
./frontend/src/pages/Settings.jsx:                {saving ? 'Saving...' : 'Save All Settings'}
./frontend/src/pages/Settings.jsx:            <p className="text-green-700 font-medium">Settings saved successfully! All estimates and invoices will now use these settings.</p>
./frontend/src/pages/Settings.jsx:                    value={settings.shopName}
./frontend/src/pages/Settings.jsx:                    value={settings.phone}
./frontend/src/pages/Settings.jsx:                    value={settings.address}
./frontend/src/pages/Settings.jsx:                    value={settings.email}
./frontend/src/pages/Settings.jsx:                    value={settings.website}
./frontend/src/pages/Settings.jsx:                    value={settings.licenseNumber}
./frontend/src/pages/Settings.jsx:                    value={settings.laborRate}
./frontend/src/pages/Settings.jsx:                    value={settings.partsMarkup}
./frontend/src/pages/Settings.jsx:                    value={settings.taxRate}
./frontend/src/pages/Settings.jsx:                    value={settings.shopSuppliesRate}
./frontend/src/pages/Settings.jsx:                    value={settings.diagnosticFee}
./frontend/src/pages/Settings.jsx:                  <div>Sample part ($20 cost) → Customer pays: ${(20 * (1 + settings.partsMarkup)).toFixed(2)}</div>
./frontend/src/pages/Settings.jsx:                  <div>1 hour labor → Customer pays: ${settings.laborRate.toFixed(2)}</div>
./frontend/src/pages/Settings.jsx:                  <div>$100 subtotal + supplies (${(100 * settings.shopSuppliesRate).toFixed(2)}) + tax (${((100 + 100 * settings.shopSuppliesRate) * settings.taxRate).toFixed(2)}) = ${(100 + 100 * settings.shopSuppliesRate + (100 + 100 * settings.shopSuppliesRate) * settings.taxRate).toFixed(2)} total</div>
./frontend/src/pages/Settings.jsx:                {Object.entries(settings.businessHours).map(([day, hours]) => (
./frontend/src/pages/Settings.jsx:                      value={settings.invoiceTemplate.headerColor}
./frontend/src/pages/Settings.jsx:                      value={settings.invoiceTemplate.paymentTerms}
./frontend/src/pages/Settings.jsx:                      value={settings.invoiceTemplate.warrantyInfo}
./frontend/src/pages/Settings.jsx:                      value={settings.invoiceTemplate.disclaimers}
./frontend/src/pages/Settings.jsx:                      value={settings.invoiceTemplate.footerNotes}
./frontend/src/pages/Settings.jsx:                        checked={settings.invoiceTemplate.showBusinessHours}
./frontend/src/pages/Settings.jsx:                        checked={settings.invoiceTemplate.showTaxID}
./frontend/src/pages/Settings.jsx:                  {settings.invoiceTemplate.showTaxID && (
./frontend/src/pages/Settings.jsx:                        value={settings.invoiceTemplate.taxID}
./frontend/src/pages/Settings.jsx:          {/* AI Settings Tab */}
./frontend/src/pages/Settings.jsx:              <h2 className="text-xl font-semibold text-gray-900">AI Behavior Settings</h2>
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includePartsPricing}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includePartsPricing', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeLaborEstimates}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeLaborEstimates', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeWarrantyInfo}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeWarrantyInfo', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeSafetyNotes}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeSafetyNotes', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          value={settings.aiSettings.defaultConfidenceThreshold}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'defaultConfidenceThreshold', e.target.value)}
./frontend/src/pages/Settings.jsx:                          value={settings.aiSettings.maxPartsPerEstimate}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'maxPartsPerEstimate', e.target.value)}
./frontend/src/pages/Settings.jsx:                          value={settings.aiSettings.maxLaborHoursPerJob}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'maxLaborHoursPerJob', e.target.value)}
./frontend/src/pages/Settings.jsx:                  The AI system automatically uses your labor rate (${settings.laborRate}/hr),
./frontend/src/pages/Settings.jsx:                  parts markup ({(settings.partsMarkup * 100).toFixed(1)}%),
./frontend/src/pages/Settings.jsx:                  and tax rate ({(settings.taxRate * 100).toFixed(2)}%) for all estimates.
./frontend/src/pages/Settings.jsx:                  When you update these settings, all future AI estimates will use the new values immediately.
./frontend/src/pages/Settings.jsx:            <p className="text-gray-600">See how your settings look on actual documents</p>
./frontend/src/pages/Settings.jsx:            <EstimatePreview settings={settings} />
./frontend/src/pages/Settings.jsx:function EstimatePreview({ settings }) {
./frontend/src/pages/Settings.jsx:      { description: 'Oil Change Service', hours: 0.5, rate: settings.laborRate },
./frontend/src/pages/Settings.jsx:      { description: 'Multi-Point Inspection', hours: 0.25, rate: settings.laborRate }
./frontend/src/pages/Settings.jsx:  const partsMarkupAmount = partsSubtotal * settings.partsMarkup;
./frontend/src/pages/Settings.jsx:  const shopSupplies = subtotal * settings.shopSuppliesRate;
./frontend/src/pages/Settings.jsx:  const tax = taxableAmount * settings.taxRate;
./frontend/src/pages/Settings.jsx:      const hours = settings.businessHours[day];
./frontend/src/pages/Settings.jsx:      <div className="p-6 border-b-2" style={{ backgroundColor: settings.invoiceTemplate.headerColor, color: 'white' }}>
./frontend/src/pages/Settings.jsx:            <h1 className="text-3xl font-bold">{settings.shopName || "Eddie's Automotive"}</h1>
./frontend/src/pages/Settings.jsx:              <div>{settings.address || "123 Main Street, Bakersfield, CA 93301"}</div>
./frontend/src/pages/Settings.jsx:              <div>Phone: {settings.phone || "(661) 555-0123"} | Email: {settings.email || "info@eddiesautomotive.com"}</div>
./frontend/src/pages/Settings.jsx:              {settings.website && <div>Web: {settings.website}</div>}
./frontend/src/pages/Settings.jsx:              {settings.licenseNumber && <div>License: {settings.licenseNumber}</div>}
./frontend/src/pages/Settings.jsx:        {settings.invoiceTemplate.showBusinessHours && (
./frontend/src/pages/Settings.jsx:                const markup = part.cost * settings.partsMarkup;
./frontend/src/pages/Settings.jsx:                <span>Parts Markup ({(settings.partsMarkup * 100).toFixed(1)}%):</span>
./frontend/src/pages/Settings.jsx:              {settings.shopSuppliesRate > 0 && (
./frontend/src/pages/Settings.jsx:                  <span>Shop Supplies ({(settings.shopSuppliesRate * 100).toFixed(1)}%):</span>
./frontend/src/pages/Settings.jsx:                <span>Tax ({(settings.taxRate * 100).toFixed(2)}%):</span>
./frontend/src/pages/Settings.jsx:        <div><strong>Payment Terms:</strong> {settings.invoiceTemplate.paymentTerms}</div>
./frontend/src/pages/Settings.jsx:        <div><strong>Warranty:</strong> {settings.invoiceTemplate.warrantyInfo}</div>
./frontend/src/pages/Settings.jsx:        {settings.invoiceTemplate.disclaimers && (
./frontend/src/pages/Settings.jsx:          <div><strong>Important:</strong> {settings.invoiceTemplate.disclaimers}</div>
./frontend/src/pages/Settings.jsx:        {settings.invoiceTemplate.showTaxID && settings.invoiceTemplate.taxID && (
./frontend/src/pages/Settings.jsx:          <div><strong>Tax ID:</strong> {settings.invoiceTemplate.taxID}</div>
./frontend/src/pages/Settings.jsx:          {settings.invoiceTemplate.footerNotes}
./frontend/src/pages/Dashboard.jsx.broken-again:  Clock, Plus, RefreshCw, Download, Bell, Settings, MapPin, Phone, Mail,
./frontend/src/pages/DataMigration.jsx:import { UploadCloud, ArrowRight, CheckCircle, AlertTriangle, Loader2, FileText, Settings, Database } from 'lucide-react';
./frontend/src/pages/DataMigration.jsx:          icon: <Settings className="h-5 w-5" />,
./frontend/src/pages/DataMigration.jsx:      case 'vehicle': return <Settings className="h-4 w-4" />;
./frontend/src/pages/DataMigration.jsx:            <Settings className="h-5 w-5 text-green-600" />
./frontend/src/pages/index.js:export { default as Settings } from './Settings';
./frontend/src/pages/Dashboard.jsx.before-fix:  Clock, Plus, RefreshCw, Download, Bell, Settings, MapPin, Phone, Mail,
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Settings"
./frontend/src/pages/Dashboard.jsx.before-fix:            icon={Settings}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/settings"
./frontend/src/pages/CreateEditEstimate.jsx.backup:import { useSettings } from "../contexts/SettingsProvider";
./frontend/src/pages/CreateEditEstimate.jsx.backup:  const { settings } = useSettings();
./frontend/src/pages/CreateEditEstimate.jsx.backup:  const totals = computeTotals({ parts: estimate.parts, labor: estimate.labor }, settings);
./frontend/src/pages/CreateEditEstimate.jsx.backup:  const addLabor = () => setEstimate((e) => ({ ...e, labor: [...e.labor, { description: "", hours: 0, rate: settings.laborRate }] }));
./frontend/src/pages/CreateEditEstimate.jsx.backup:        settings={settings}
./frontend/src/pages/CreateEditEstimate.jsx.backup:            {settings.licenseNumber ? <div>CA ARD License: {settings.licenseNumber}</div> : null}
./frontend/src/pages/CreateEditEstimate.jsx.backup:                      <input type="number" step="1" className="w-24 border rounded p-1 text-right" value={l.rate ?? settings.laborRate}
./frontend/src/pages/CreateEditEstimate.jsx.backup:            <div className="flex justify-between text-green-600"><span>Parts Markup ({(settings.partsMarkup*100).toFixed(1)}%):</span><span>+${totals.partsMarkup.toFixed(2)}</span></div>
./frontend/src/pages/CreateEditEstimate.jsx.backup:            <div className="flex justify-between text-blue-600"><span>Shop Supplies ({(settings.shopSuppliesRate*100).toFixed(1)}%):</span><span>+${totals.shopSupplies.toFixed(2)}</span></div>
./frontend/src/pages/CreateEditEstimate.jsx.backup:            <div className="flex justify-between text-red-600"><span>Tax ({(settings.taxRate*100).toFixed(2)}%):</span><span>+${totals.tax.toFixed(2)}</span></div>
./frontend/src/components/UserDropdown.jsx:            {/* Settings */}
./frontend/src/components/UserDropdown.jsx:                  to="/settings"
./frontend/src/components/UserDropdown.jsx:                  Settings
./frontend/src/components/TimeClockNavbar.jsx:const TimeClockNavbar = ({ settings }) => {
./frontend/src/components/TimeClockNavbar.jsx:        {settings?.shop?.name && (
./frontend/src/components/TimeClockNavbar.jsx:            {settings.shop.name}
./frontend/src/components/DocumentTemplplateRenderer.jsx: * Generic header/footer wrapper driven by Settings.invoiceTemplate
./frontend/src/components/DocumentTemplplateRenderer.jsx:  settings,
./frontend/src/components/DocumentTemplplateRenderer.jsx:  const it = settings.invoiceTemplate || {};
./frontend/src/components/DocumentTemplplateRenderer.jsx:  const businessHours = settings.businessHours || {};
./frontend/src/components/DocumentTemplplateRenderer.jsx:          {it.showLogo && settings.logoUrl && (
./frontend/src/components/DocumentTemplplateRenderer.jsx:            <img src={settings.logoUrl} alt="logo" className="h-10 object-contain" />
./frontend/src/components/DocumentTemplplateRenderer.jsx:          <div className="text-2xl font-bold">{settings.shopName || "Your Shop"}</div>
./frontend/src/components/DocumentTemplplateRenderer.jsx:            <div>{settings.address}</div>
./frontend/src/components/DocumentTemplplateRenderer.jsx:              {settings.phone ? `Phone: ${settings.phone}` : null}
./frontend/src/components/DocumentTemplplateRenderer.jsx:              {settings.email ? ` • Email: ${settings.email}` : null}
./frontend/src/components/DocumentTemplplateRenderer.jsx:              {settings.website ? ` • Web: ${settings.website}` : null}
./frontend/src/components/DocumentTemplplateRenderer.jsx:              {settings.licenseNumber ? ` • License: ${settings.licenseNumber}` : null}
./frontend/src/components/SmartBreadcrumb.jsx:    'settings': 'Settings',
./frontend/src/components/Layout.jsx:    { name: 'Settings', href: '/settings', icon: CogIcon },
./frontend/src/config/navigation.js:    to: '/settings',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    label: 'Settings',
./frontend/src/config/navigation.js:  '/settings': ['Dashboard', 'Settings'],
./frontend/src/utils/apiEndpoints.js:  // Settings
./frontend/src/utils/apiEndpoints.js:  settings: {
./frontend/src/utils/apiEndpoints.js:    get: () => api.get('/api/settings'),
./frontend/src/utils/apiEndpoints.js:    update: (data) => mutateOrQueue('put', '/api/settings', data),
./frontend/src/utils/apiEndpoints.js:    getShop: () => api.get('/api/auth/settings/shop'),
./frontend/src/utils/apiEndpoints.js:    updateShop: (data) => mutateOrQueue('put', '/api/auth/settings/shop', data),
./frontend/src/utils/apiEndpoints.js:      get: () => api.get('/api/auth/settings/shop'),
./frontend/src/utils/apiEndpoints.js:      update: (data) => mutateOrQueue('put', '/api/auth/settings/shop', data)
./frontend/src/utils/apiEndpoints.js:export const settingsService = apiEndpoints.settings;
./frontend/src/utils/api.js:  settings: {
./frontend/src/utils/api.js:      get: () => api.get('/api/auth/settings/shop'),
./frontend/src/utils/api.js:      update: (data) => api.put('/api/auth/settings/shop', data)
./frontend/src/utils/billing.js: * Returns a detailed breakdown using Settings.
./frontend/src/utils/billing.js:export function computeTotals({ parts, labor }, settings) {
./frontend/src/utils/billing.js:  const partsMarkup = calcPartsMarkup(partsSubtotal, settings.partsMarkup);
./frontend/src/utils/billing.js:  const laborSubtotal = calcLaborSubtotal(labor, settings.laborRate);
./frontend/src/utils/billing.js:  const shopSupplies = calcShopSupplies(subtotal, settings.shopSuppliesRate);
./frontend/src/utils/billing.js:  const tax = calcTax(taxable, settings.taxRate);
./frontend/src/utils/shopService.js:export const getShopSettings = async () => {
./frontend/src/utils/shopService.js:    const response = await api.get('/auth/settings/shop');
./frontend/src/utils/shopService.js:    showError('Failed to load shop settings');
./frontend/src/utils/shopService.js:export const updateShopSettings = async (settings) => {
./frontend/src/utils/shopService.js:    const response = await api.put('/auth/settings/shop', settings);
./frontend/src/utils/shopService.js:    showError('Failed to update shop settings');
./frontend/src/contexts/SettingsProvider.jsx:// src/contexts/SettingsProvider.jsx - FIXED VERSION
./frontend/src/contexts/SettingsProvider.jsx:const SettingsContext = createContext();
./frontend/src/contexts/SettingsProvider.jsx:export const SettingsProvider = ({ children }) => {
./frontend/src/contexts/SettingsProvider.jsx:  const [settings, setSettings] = useState({
./frontend/src/contexts/SettingsProvider.jsx:    aiSettings: {},
./frontend/src/contexts/SettingsProvider.jsx:  // Load settings when authenticated
./frontend/src/contexts/SettingsProvider.jsx:    const loadSettings = async () => {
./frontend/src/contexts/SettingsProvider.jsx:        const response = await apiEndpoints.settings.get();
./frontend/src/contexts/SettingsProvider.jsx:        setSettings(prev => ({
./frontend/src/contexts/SettingsProvider.jsx:          aiSettings: data.aiSettings || {}
./frontend/src/contexts/SettingsProvider.jsx:        console.error('Failed to load settings:', error);
./frontend/src/contexts/SettingsProvider.jsx:          console.warn(`Settings API error: ${error.response?.status || 'Network error'}`);
./frontend/src/contexts/SettingsProvider.jsx:    loadSettings();
./frontend/src/contexts/SettingsProvider.jsx:  const updateShopSettings = async (newShopSettings) => {
./frontend/src/contexts/SettingsProvider.jsx:      const response = await apiEndpoints.settings.update({
./frontend/src/contexts/SettingsProvider.jsx:        shopName: newShopSettings.name,
./frontend/src/contexts/SettingsProvider.jsx:        address: newShopSettings.address,
./frontend/src/contexts/SettingsProvider.jsx:        phone: newShopSettings.phone,
./frontend/src/contexts/SettingsProvider.jsx:        email: newShopSettings.email,
./frontend/src/contexts/SettingsProvider.jsx:        website: newShopSettings.website,
./frontend/src/contexts/SettingsProvider.jsx:        taxRate: newShopSettings.tax_rate,
./frontend/src/contexts/SettingsProvider.jsx:        laborRate: newShopSettings.labor_rate,
./frontend/src/contexts/SettingsProvider.jsx:        ...newShopSettings
./frontend/src/contexts/SettingsProvider.jsx:      setSettings(prev => ({
./frontend/src/contexts/SettingsProvider.jsx:        shop: { ...prev.shop, ...newShopSettings }
./frontend/src/contexts/SettingsProvider.jsx:      console.error('Failed to update shop settings:', error);
./frontend/src/contexts/SettingsProvider.jsx:        error: error.response?.data?.message || error.message || 'Failed to update settings'
./frontend/src/contexts/SettingsProvider.jsx:    return settings.shop;
./frontend/src/contexts/SettingsProvider.jsx:    settings,
./frontend/src/contexts/SettingsProvider.jsx:    updateShopSettings,
./frontend/src/contexts/SettingsProvider.jsx:  return <SettingsContext.Provider value={value}>{children}</SettingsContext.Provider>;
./frontend/src/contexts/SettingsProvider.jsx:export const useSettings = () => {
./frontend/src/contexts/SettingsProvider.jsx:  const context = useContext(SettingsContext);
./frontend/src/contexts/SettingsProvider.jsx:  if (!context) throw new Error('useSettings must be used within a SettingsProvider');
./frontend/src/contexts/CombinedProviders.jsx:import { SettingsProvider } from './SettingsProvider';
./frontend/src/contexts/CombinedProviders.jsx:      <SettingsProvider>
./frontend/src/contexts/CombinedProviders.jsx:      </SettingsProvider>
./frontend/src/contexts/index.js:export { useSettings } from './SettingsProvider';
./frontend/src/contexts/index.js:export { SettingsProvider } from './SettingsProvider';
./frontend/src/_backups/App.tsx:const Settings = lazy(() => import('./pages/Settings'))
./frontend/src/_backups/App.tsx:              <Route path="settings" element={<Settings />} />
./frontend/src/fix_api.sh:  // Settings
./frontend/src/fix_api.sh:  settings: {
./frontend/src/fix_api.sh:    get: () => api.get('/api/auth/settings'),
./frontend/src/fix_api.sh:      get: () => api.get('/api/auth/settings/shop'),
./frontend/src/fix_api.sh:      update: (data) => api.put('/api/auth/settings/shop', data),
./frontend/src/fix_api.sh:// Settings
./frontend/src/fix_api.sh:export const settings_get = () => apiEndpoints.settings.get();
./frontend/src/fix_api.sh:export const settings_shop_get = () => apiEndpoints.settings.shop.get();
./frontend/src/fix_api.sh:export const settings_shop_put = (data) => apiEndpoints.settings.shop.update(data);
./frontend/src/fix_api.sh:export const settingsService = apiEndpoints.settings;
./frontend/src/App-20250831_000053.jsx:  Settings,
./frontend/src/App-20250831_000053.jsx:              <Route path="settings" element={<Settings />} />
./frontend/src/index.js:export { default as Settings } from './pages/Settings';

---- invoices ----
./frontend/src/App.jsx:import Invoices from './pages/Invoices';
./frontend/src/App.jsx:              {/* Invoices */}
./frontend/src/App.jsx:              <Route path="/invoices" element={<Invoices />} />
./frontend/src/App.jsx:              <Route path="/invoices/new" element={<CreateInvoice />} />
./frontend/src/App.jsx:              <Route path="/invoices/:id" element={<InvoiceDetail />} />
./frontend/src/pages/Dashboard.jsx:  const { customers, vehicles, jobs, estimates, invoices, appointments } = data || {};
./frontend/src/pages/Dashboard.jsx:    unpaidInvoices: hasRealData
./frontend/src/pages/Dashboard.jsx:      ? (invoices?.filter(inv => inv.status !== 'paid' && inv.status !== 'cancelled')?.length || 0)
./frontend/src/pages/Dashboard.jsx:      ? (invoices?.reduce((sum, inv) => sum + (parseFloat(inv.total) || 0), 0) || 0)
./frontend/src/pages/Dashboard.jsx:            title="Unpaid Invoices"
./frontend/src/pages/Dashboard.jsx:            value={stats.unpaidInvoices}
./frontend/src/pages/Dashboard.jsx:            href="/invoices"
./frontend/src/pages/Reports.jsx:              <span className="text-sm font-medium text-yellow-800">Pending Invoices</span>
./frontend/src/pages/Reports.jsx:                {dashboardStats.unpaid_invoices || dashboardStats.unpaidInvoices || 0}
./frontend/src/pages/Invoices.jsx:        const invoice = await apiEndpoints.invoices.getById(invoiceId);
./frontend/src/pages/Invoices.jsx:        await apiEndpoints.invoices.email?.(invoiceId);
./frontend/src/pages/Invoices.jsx:        await apiEndpoints.invoices.markPaid(invoiceId);
./frontend/src/pages/Invoices.jsx:              onClick={() => navigate('/invoices')}
./frontend/src/pages/Invoices.jsx:              Back to Invoices
./frontend/src/pages/CreateInvoice.jsx:      const invoice = await apiEndpoints.invoices.getById(editId);
./frontend/src/pages/CreateInvoice.jsx:      navigate('/app/invoices');
./frontend/src/pages/CreateInvoice.jsx:      const response = await apiEndpoints.invoices.generateNumber();
./frontend/src/pages/CreateInvoice.jsx:        await apiEndpoints.invoices.update(editId, invoiceToSave);
./frontend/src/pages/CreateInvoice.jsx:        await apiEndpoints.invoices.create(invoiceToSave);
./frontend/src/pages/CreateInvoice.jsx:      navigate('/app/invoices');
./frontend/src/pages/CreateInvoice.jsx:                onClick={() => navigate('/app/invoices')}
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600 mt-2">Configure all business settings that control estimates, invoices, and AI behavior</p>
./frontend/src/pages/Settings.jsx:            <p className="text-green-700 font-medium">Settings saved successfully! All estimates and invoices will now use these settings.</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">This information appears on all estimates and invoices</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">These rates automatically update all estimates, invoices, and AI calculations</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">Set your operating hours (appears on estimates and invoices)</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">Customize how your estimates and invoices look</p>
./frontend/src/pages/Settings.jsx:// Preview Component for Estimates/Invoices
./frontend/src/pages/index.js:export { default as Invoices } from './Invoices';
./frontend/src/pages/Dashboard.jsx.before-fix:    invoices,
./frontend/src/pages/Dashboard.jsx.before-fix:        unpaidInvoices: invoices?.filter(inv => inv.status !== 'paid' && inv.status !== 'cancelled')?.length || 0,
./frontend/src/pages/Dashboard.jsx.before-fix:        monthlyRevenue: invoices?.reduce((sum, inv) => sum + (parseFloat(inv.total) || 0), 0) || 0
./frontend/src/pages/Dashboard.jsx.before-fix:        unpaidInvoices: 5,
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [customers, vehicles, jobs, estimates, invoices, appointments]);
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Unpaid Invoices"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.unpaidInvoices}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/invoices"
./frontend/src/components/Navbar.jsx:            <Link to="/invoices" className="nav-link">Invoices</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/invoices" className="nav-link block">Invoices</Link>
./frontend/src/components/Navigation.jsx:    { path: "/invoices", label: "Invoices", icon: CurrencyDollarIcon },
./frontend/src/components/ComplianceNoticeCA.jsx: * Include this on Estimates and Invoices to stay compliant.
./frontend/src/components/SmartBreadcrumb.jsx:    'invoices': 'Invoices',
./frontend/src/components/Layout.jsx:    { name: 'Invoices', href: '/invoices', icon: CurrencyDollarIcon },
./frontend/src/config/navigation.js:    to: '/invoices',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    'Invoice Creation (/invoices)',
./frontend/src/config/navigation.js:  '/invoices': ['Dashboard', 'Invoices'],
./frontend/src/utils/apiEndpoints.js:  // Invoices
./frontend/src/utils/apiEndpoints.js:  invoices: {
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get("/api/auth/invoices", { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue("post", "/api/auth/invoices", data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/invoices/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue("put", `/api/auth/invoices/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue("delete", `/api/auth/invoices/${id}`),
./frontend/src/utils/apiEndpoints.js:    markPaid: (id) => mutateOrQueue("post", `/api/auth/invoices/${id}/mark-paid`, {}),
./frontend/src/utils/apiEndpoints.js:    generateNumber: () => api.get('/api/auth/invoices/generate-number'),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/invoices',
./frontend/src/utils/apiEndpoints.js:export const invoiceService = apiEndpoints.invoices;
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/invoiceService.js:// src/utils/services/invoiceService.js
./frontend/src/utils/services/invoiceService.js:const baseURL = '/api/invoices';
./frontend/src/utils/services/invoiceService.js:    return handleError(error, 'Failed to fetch invoices');
./frontend/src/utils/services/reportService.js:// Fetch a specific report by type (e.g., payroll, jobs, invoices)
./frontend/src/utils/services/index.js:import invoiceService from './invoiceService';
./frontend/src/utils/services/index.js:  invoiceService,
./frontend/src/utils/services/dashboardService.js:        const [customers, jobs, invoices] = await Promise.all([
./frontend/src/utils/services/dashboardService.js:          api.get('/api/auth/invoices')
./frontend/src/utils/services/dashboardService.js:          totalRevenue: invoices.data?.reduce((sum, inv) => sum + (inv.total_amount || 0), 0) || 0,
./frontend/src/utils/services/dashboardService.js:          unpaidInvoices: invoices.data?.filter(inv => inv.status !== 'paid')?.length || 0
./frontend/src/utils/services/dashboardService.js:          unpaidInvoices: 0
./frontend/src/hooks/useDataOperations.js:  invoiceService,
./frontend/src/hooks/useDataOperations.js:    invoices: false,
./frontend/src/hooks/useDataOperations.js:  const fetchInvoices = useCallback(async () => {
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('invoices', true);
./frontend/src/hooks/useDataOperations.js:      const response = await invoiceService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch invoices');
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('invoices', false);
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('invoices', true);
./frontend/src/hooks/useDataOperations.js:      const response = await invoiceService.create(invoiceData);
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('invoices', false);
./frontend/src/hooks/useDataOperations.js:        fetchInvoices(),
./frontend/src/hooks/useDataOperations.js:    fetchInvoices,
./frontend/src/hooks/useDataOperations.js:    fetchInvoices,
./frontend/src/hooks/useShopData.js:  const [invoices, setInvoices] = useState([]);
./frontend/src/hooks/useShopData.js:        const [customersData, vehiclesData, jobsData, estimatesData, invoicesData, appointmentsData] = 
./frontend/src/hooks/useShopData.js:            dataOps.fetchInvoices().catch(() => []),
./frontend/src/hooks/useShopData.js:        setInvoices(invoicesData || []);
./frontend/src/hooks/useShopData.js:    invoices,
./frontend/src/hooks/useDataOperations.js.backup:  invoiceService,
./frontend/src/hooks/useDataOperations.js.backup:    invoices: false,
./frontend/src/hooks/useDataOperations.js.backup:        fetchInvoices(),
./frontend/src/hooks/useDataOperations.js.backup:    fetchInvoices,
./frontend/src/hooks/useDataOperations.js.backup:    fetchInvoices,
./frontend/src/contexts/DataContext.jsx:import invoiceService from '../utils/services/invoiceService';
./frontend/src/contexts/DataContext.jsx:    invoices: [],
./frontend/src/contexts/DataContext.jsx:        invoicesResponse,
./frontend/src/contexts/DataContext.jsx:        invoiceService.getAll(),
./frontend/src/contexts/DataContext.jsx:        invoices: invoicesResponse.status === 'fulfilled' ? invoicesResponse.value.data : [],
./frontend/src/contexts/DataContext.jsx:    invoiceService,
./frontend/src/_backups/App.tsx:              <Route path="invoices">
./frontend/src/fix_api.sh:  // Invoices
./frontend/src/fix_api.sh:  invoices: {
./frontend/src/fix_api.sh:    getAll: (params) => api.get('/api/auth/invoices', { params }),
./frontend/src/fix_api.sh:    create: (data) => api.post('/api/auth/invoices', data),
./frontend/src/fix_api.sh:    getById: (invoice_id) => api.get(`/api/auth/invoices/${invoice_id}`),
./frontend/src/fix_api.sh:    update: (invoice_id, data) => api.put(`/api/auth/invoices/${invoice_id}`, data),
./frontend/src/fix_api.sh:    markPaid: (invoice_id, data) => api.post(`/api/auth/invoices/${invoice_id}/mark-paid`, data),
./frontend/src/fix_api.sh:// Invoices
./frontend/src/fix_api.sh:export const invoices_get = (params) => apiEndpoints.invoices.getAll(params);
./frontend/src/fix_api.sh:export const invoices_post = (data) => apiEndpoints.invoices.create(data);
./frontend/src/fix_api.sh:export const invoices_int_invoice_id_get = (invoice_id) => apiEndpoints.invoices.getById(invoice_id);
./frontend/src/fix_api.sh:export const invoices_int_invoice_id_put = (invoice_id, data) => apiEndpoints.invoices.update(invoice_id, data);
./frontend/src/fix_api.sh:export const invoices_int_invoice_id_mark_paid_post = (invoice_id, data) =>
./frontend/src/fix_api.sh:  apiEndpoints.invoices.markPaid(invoice_id, data);
./frontend/src/fix_api.sh:export const invoiceService = apiEndpoints.invoices;
./frontend/src/App-20250831_000053.jsx:  Invoices,
./frontend/src/App-20250831_000053.jsx:              <Route path="invoices" element={<Invoices />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="invoices/:id" element={<InvoiceDetail />} />
./frontend/src/index.js:export { default as Invoices } from './pages/Invoices';

---- estimates ----
./frontend/src/App.jsx:import Estimates from './pages/Estimates';
./frontend/src/App.jsx:import EstimatesList from './pages/EstimatesList';
./frontend/src/App.jsx:              {/* Estimates */}
./frontend/src/App.jsx:              <Route path="/estimates" element={<Estimates />} />
./frontend/src/App.jsx:              <Route path="/estimates/list" element={<EstimatesList />} />
./frontend/src/App.jsx:              <Route path="/estimates/new" element={<CreateEditEstimate />} />
./frontend/src/App.jsx:              <Route path="/estimates/ai" element={<EstimateAI />} />
./frontend/src/App.jsx:              <Route path="/estimates/:id" element={<EstimateDetail />} />
./frontend/src/App.jsx:              <Route path="/estimates/:id/edit" element={<CreateEditEstimate />} />
./frontend/src/pages/Dashboard.jsx:  const { customers, vehicles, jobs, estimates, invoices, appointments } = data || {};
./frontend/src/pages/Dashboard.jsx:    pendingEstimates: hasRealData
./frontend/src/pages/Dashboard.jsx:      ? (estimates?.filter(est => est.status === 'pending' || est.status === 'draft')?.length || 0)
./frontend/src/pages/Dashboard.jsx:            title="Pending Estimates"
./frontend/src/pages/Dashboard.jsx:            value={stats.pendingEstimates}
./frontend/src/pages/Dashboard.jsx:            href="/estimates"
./frontend/src/pages/Dashboard.jsx:                onClick={() => handleNavigation('/estimates/create')}
./frontend/src/pages/Dashboard.jsx:                Get AI-powered assistance for diagnostics, estimates, and more.
./frontend/src/pages/EstimateDetail.jsx:  const { estimates } = useData();
./frontend/src/pages/EstimateDetail.jsx:  const estimate = estimates.find(e => e.id === parseInt(id));
./frontend/src/pages/CreateEditEstimate.jsx:        const res = await fetch(`/api/auth/estimates/${id}`);
./frontend/src/pages/CreateEditEstimate.jsx:      const url = isEdit ? `/api/auth/estimates/${id}` : "/api/auth/estimates";
./frontend/src/pages/EstimatesList.jsx:export default function EstimatesList() {
./frontend/src/pages/EstimatesList.jsx:  const [estimates, setEstimates] = useState([]);
./frontend/src/pages/EstimatesList.jsx:  } = useSearchFilter(estimates || [], ['customerName', 'vehicleInfo', 'status', 'total', 'date']);
./frontend/src/pages/EstimatesList.jsx:    loadEstimates();
./frontend/src/pages/EstimatesList.jsx:  const loadEstimates = async () => {
./frontend/src/pages/EstimatesList.jsx:      const response = await apiEndpoints.estimates.getAll();
./frontend/src/pages/EstimatesList.jsx:      const estimatesData = Array.isArray(response?.data) ? response.data : [];
./frontend/src/pages/EstimatesList.jsx:      setEstimates(estimatesData);
./frontend/src/pages/EstimatesList.jsx:      setError('Failed to load estimates');
./frontend/src/pages/EstimatesList.jsx:      showMessage('Failed to load estimates', 'error');
./frontend/src/pages/EstimatesList.jsx:      setEstimates([]);
./frontend/src/pages/EstimatesList.jsx:      await estimateService.delete(id);
./frontend/src/pages/EstimatesList.jsx:      setEstimates(prev => prev.filter(est => est.id !== id));
./frontend/src/pages/EstimatesList.jsx:    doc.save('estimates.pdf');
./frontend/src/pages/EstimatesList.jsx:    // Convert estimates into CSV rows
./frontend/src/pages/EstimatesList.jsx:    link.setAttribute("download", "estimates.csv");
./frontend/src/pages/EstimatesList.jsx:        <h1 className="text-2xl font-bold">Estimates</h1>
./frontend/src/pages/EstimatesList.jsx:            onClick={() => navigate('/estimates/new')}
./frontend/src/pages/EstimatesList.jsx:          placeholder="Search estimates..."
./frontend/src/pages/EstimatesList.jsx:                      No estimates found
./frontend/src/pages/EstimatesList.jsx:                          to={`/estimates/${estimate.id}`}
./frontend/src/pages/EstimatesList.jsx:                            onClick={() => navigate(`/estimates/${estimate.id}/edit`)}
./frontend/src/pages/Settings.jsx:      includeLaborEstimates: true,
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600 mt-2">Configure all business settings that control estimates, invoices, and AI behavior</p>
./frontend/src/pages/Settings.jsx:            <p className="text-green-700 font-medium">Settings saved successfully! All estimates and invoices will now use these settings.</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">This information appears on all estimates and invoices</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">These rates automatically update all estimates, invoices, and AI calculations</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">Set your operating hours (appears on estimates and invoices)</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">Customize how your estimates and invoices look</p>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">Control how AI generates estimates and uses your business data</p>
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeLaborEstimates}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeLaborEstimates', e.target.checked)}
./frontend/src/pages/Settings.jsx:                        Include labor estimates (uses your labor rate)
./frontend/src/pages/Settings.jsx:                  and tax rate ({(settings.taxRate * 100).toFixed(2)}%) for all estimates.
./frontend/src/pages/Settings.jsx:                  When you update these settings, all future AI estimates will use the new values immediately.
./frontend/src/pages/Settings.jsx:// Preview Component for Estimates/Invoices
./frontend/src/pages/Dashboard.jsx.broken-again:                onClick={() => handleNavigation('/estimates/create')}
./frontend/src/pages/Dashboard.jsx.broken-again:                  Get AI-powered assistance for diagnostics and estimates.
./frontend/src/pages/EstimateAI.jsx:export { default } from "./Estimates";
./frontend/src/pages/CustomerDetail.jsx:    estimates, 
./frontend/src/pages/CustomerDetail.jsx:  const customerEstimates = estimates?.filter(e => {
./frontend/src/pages/CustomerDetail.jsx:                <div className="text-2xl font-bold text-purple-600">{customerEstimates.length}</div>
./frontend/src/pages/CustomerDetail.jsx:                <div className="text-sm text-gray-500">Estimates</div>
./frontend/src/pages/CustomerDetail.jsx:              { id: 'estimates', name: 'Estimates', icon: ClipboardDocumentListIcon },
./frontend/src/pages/CustomerDetail.jsx:          {/* Estimates Tab */}
./frontend/src/pages/CustomerDetail.jsx:          {activeTab === 'estimates' && (
./frontend/src/pages/CustomerDetail.jsx:                <h2 className="text-xl font-semibold text-gray-900">Estimates</h2>
./frontend/src/pages/CustomerDetail.jsx:                  onClick={() => navigate('/estimates/new')}
./frontend/src/pages/CustomerDetail.jsx:              {customerEstimates.length === 0 ? (
./frontend/src/pages/CustomerDetail.jsx:                  <h3 className="mt-2 text-sm font-medium text-gray-900">No estimates</h3>
./frontend/src/pages/CustomerDetail.jsx:                  <p className="mt-1 text-sm text-gray-500">No estimates have been created for this customer yet.</p>
./frontend/src/pages/CustomerDetail.jsx:                  {customerEstimates.map((estimate) => {
./frontend/src/pages/VehicleDetail.jsx:  const { vehicles, customers, jobs, estimates, vehicleOps } = useData();
./frontend/src/pages/VehicleDetail.jsx:  const vehicleEstimates = estimates.filter(e => e.vehicle_id === parseInt(id));
./frontend/src/pages/VehicleDetail.jsx:                onClick={() => navigate(`/estimates/new?vehicleId=${vehicle.id}`)}
./frontend/src/pages/Estimates.jsx:export default function EstimatesList() {
./frontend/src/pages/Estimates.jsx:  const [estimates, setEstimates] = useState([]);
./frontend/src/pages/Estimates.jsx:  } = useSearchFilter(estimates || [], ['customerName', 'vehicleInfo', 'status', 'total', 'date']);
./frontend/src/pages/Estimates.jsx:    loadEstimates();
./frontend/src/pages/Estimates.jsx:  const loadEstimates = async () => {
./frontend/src/pages/Estimates.jsx:      const response = await apiEndpoints.estimates.getAll();
./frontend/src/pages/Estimates.jsx:      const estimatesData = Array.isArray(response?.data) ? response.data : [];
./frontend/src/pages/Estimates.jsx:      setEstimates(estimatesData);
./frontend/src/pages/Estimates.jsx:      setError('Failed to load estimates');
./frontend/src/pages/Estimates.jsx:      showMessage('Failed to load estimates', 'error');
./frontend/src/pages/Estimates.jsx:      setEstimates([]);
./frontend/src/pages/Estimates.jsx:      await estimateService.delete(id);
./frontend/src/pages/Estimates.jsx:      setEstimates(prev => prev.filter(est => est.id !== id));
./frontend/src/pages/Estimates.jsx:    doc.save('estimates.pdf');
./frontend/src/pages/Estimates.jsx:link.setAttribute("download", "estimates.csv");
./frontend/src/pages/Estimates.jsx:        <h1 className="text-2xl font-bold">Estimates</h1>
./frontend/src/pages/Estimates.jsx:            onClick={() => navigate('/estimates/new')}
./frontend/src/pages/Estimates.jsx:          placeholder="Search estimates..."
./frontend/src/pages/Estimates.jsx:                      No estimates found
./frontend/src/pages/Estimates.jsx:                          to={`/estimates/${estimate.id}`}
./frontend/src/pages/Estimates.jsx:                            onClick={() => navigate(`/estimates/${estimate.id}/edit`)}
./frontend/src/pages/index.js:export { default as Estimates } from './Estimates';
./frontend/src/pages/index.js:export { default as EstimatesList } from './EstimatesList';
./frontend/src/pages/Dashboard.jsx.before-fix:    estimates,
./frontend/src/pages/Dashboard.jsx.before-fix:        pendingEstimates: estimates?.filter(est => est.status === 'pending' || est.status === 'draft')?.length || 0,
./frontend/src/pages/Dashboard.jsx.before-fix:        pendingEstimates: 8,
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [customers, vehicles, jobs, estimates, invoices, appointments]);
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Pending Estimates"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.pendingEstimates}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/estimates"
./frontend/src/pages/Dashboard.jsx.before-fix:                onClick={() => handleNavigation('/estimates/create')}
./frontend/src/pages/Dashboard.jsx.before-fix:                Get AI-powered assistance for diagnostics, estimates, and more.
./frontend/src/pages/CreateEditEstimate.jsx.backup:        const res = await fetch(`/api/auth/estimates/${id}`);
./frontend/src/pages/CreateEditEstimate.jsx.backup:      const url = isEdit ? `/api/auth/estimates/${id}` : "/api/auth/estimates";
./frontend/src/pages/CustomerDetail.jsx.backup:    estimates, 
./frontend/src/pages/CustomerDetail.jsx.backup:  const customerEstimates = estimates.filter(e => {
./frontend/src/pages/CustomerDetail.jsx.backup:                <div className="text-2xl font-bold text-purple-600">{customerEstimates.length}</div>
./frontend/src/pages/CustomerDetail.jsx.backup:                <div className="text-sm text-gray-500">Estimates</div>
./frontend/src/pages/CustomerDetail.jsx.backup:              { id: 'estimates', name: 'Estimates', icon: ClipboardDocumentListIcon },
./frontend/src/pages/CustomerDetail.jsx.backup:          {/* Estimates Tab */}
./frontend/src/pages/CustomerDetail.jsx.backup:          {activeTab === 'estimates' && (
./frontend/src/pages/CustomerDetail.jsx.backup:                <h2 className="text-xl font-semibold text-gray-900">Estimates</h2>
./frontend/src/pages/CustomerDetail.jsx.backup:                  onClick={() => navigate('/estimates/new')}
./frontend/src/pages/CustomerDetail.jsx.backup:              {customerEstimates.length === 0 ? (
./frontend/src/pages/CustomerDetail.jsx.backup:                  <h3 className="mt-2 text-sm font-medium text-gray-900">No estimates</h3>
./frontend/src/pages/CustomerDetail.jsx.backup:                  <p className="mt-1 text-sm text-gray-500">No estimates have been created for this customer yet.</p>
./frontend/src/pages/CustomerDetail.jsx.backup:                  {customerEstimates.map((estimate) => {
./frontend/src/components/Navbar.jsx:            <Link to="/estimates" className="nav-link">Estimates</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/estimates" className="nav-link block">Estimates</Link>
./frontend/src/components/Navigation.jsx:    { path: "/estimates", label: "Estimates", icon: DocumentTextIcon },
./frontend/src/components/ai/AIChat.jsx:      content: "Hello! I'm Eddie, your AI automotive assistant. I can help with diagnostics, repair advice, cost estimates, and general automotive questions. What can I help you with today?",
./frontend/src/components/ai/AIChat.jsx:              placeholder="Ask about diagnostics, repairs, estimates..."
./frontend/src/components/ComplianceNoticeCA.jsx: * Include this on Estimates and Invoices to stay compliant.
./frontend/src/components/ComplianceNoticeCA.jsx:        <li>Smog-related estimates will include required notices and you may choose another station for any repairs.</li>
./frontend/src/components/SmartBreadcrumb.jsx:    'estimates': 'Estimates',
./frontend/src/components/LandingPage.jsx:              { title: "Service Tracking", desc: "Complete job management from estimates to invoicing", icon: "🔧" },
./frontend/src/components/Layout.jsx:    { name: 'Estimates', href: '/estimates', icon: DocumentTextIcon },
./frontend/src/config/navigation.js:    to: '/estimates',
./frontend/src/config/navigation.js:    label: 'Estimates',
./frontend/src/config/navigation.js:    to: '/estimates/ai',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    label: 'AI Estimates',
./frontend/src/config/navigation.js:    to: '/estimates/create',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    'Estimate Generation (/estimates)',
./frontend/src/config/navigation.js:  '/estimates': ['Dashboard', 'Estimates'],
./frontend/src/config/navigation.js:  '/estimates/create': ['Dashboard', 'Estimates', 'Create Estimate'],
./frontend/src/config/navigation.js:  '/estimates/ai': ['Dashboard', 'Estimates', 'AI Estimates'],
./frontend/src/utils/apiEndpoints.js:  // Estimates
./frontend/src/utils/apiEndpoints.js:  estimates: {
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get("/api/auth/estimates", { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue("post", "/api/auth/estimates", data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/estimates/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue("put", `/api/auth/estimates/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue("delete", `/api/auth/estimates/${id}`),
./frontend/src/utils/apiEndpoints.js:    convertToJob: (id) => mutateOrQueue("post", `/api/auth/estimates/${id}/convert-to-job`, {}),
./frontend/src/utils/apiEndpoints.js:    generateNumber: () => api.get('/api/auth/estimates/generate-number'),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/estimates',
./frontend/src/utils/apiEndpoints.js:export const estimateService = apiEndpoints.estimates;
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/auth/estimates', estimateData);
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/estimateService.js:// src/utils/services/estimateService.js
./frontend/src/utils/services/estimateService.js:const baseURL = '/api/estimates';
./frontend/src/utils/services/estimateService.js:    return handleError(error, 'Failed to fetch estimates');
./frontend/src/utils/services/index.js:import estimateService from './estimateService';
./frontend/src/utils/services/index.js:  estimateService,
./frontend/src/utils/services/aiService.js:      const response = await api.post('/api/auth/estimates', estimateData);
./frontend/src/utils/calculations.js:// Calculation utilities for work orders, estimates, etc.
./frontend/src/hooks/useDataOperations.js:  estimateService,
./frontend/src/hooks/useDataOperations.js:    estimates: false,
./frontend/src/hooks/useDataOperations.js:  const fetchEstimates = useCallback(async () => {
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('estimates', true);
./frontend/src/hooks/useDataOperations.js:      const response = await estimateService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch estimates');
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('estimates', false);
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('estimates', true);
./frontend/src/hooks/useDataOperations.js:      const response = await estimateService.create(estimateData);
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('estimates', false);
./frontend/src/hooks/useDataOperations.js:        fetchEstimates(),
./frontend/src/hooks/useDataOperations.js:    fetchEstimates,
./frontend/src/hooks/useDataOperations.js:    fetchEstimates,
./frontend/src/hooks/useShopData.js:  const [estimates, setEstimates] = useState([]);
./frontend/src/hooks/useShopData.js:        const [customersData, vehiclesData, jobsData, estimatesData, invoicesData, appointmentsData] = 
./frontend/src/hooks/useShopData.js:            dataOps.fetchEstimates().catch(() => []),
./frontend/src/hooks/useShopData.js:        setEstimates(estimatesData || []);
./frontend/src/hooks/useShopData.js:    estimates,
./frontend/src/hooks/useDataOperations.js.backup:  estimateService, 
./frontend/src/hooks/useDataOperations.js.backup:    estimates: false,
./frontend/src/hooks/useDataOperations.js.backup:        fetchEstimates(),
./frontend/src/hooks/useDataOperations.js.backup:    fetchEstimates,
./frontend/src/hooks/useDataOperations.js.backup:    fetchEstimates,
./frontend/src/contexts/DataContext.jsx:import estimateService from '../utils/services/estimateService';
./frontend/src/contexts/DataContext.jsx:    estimates: [],
./frontend/src/contexts/DataContext.jsx:        estimatesResponse,
./frontend/src/contexts/DataContext.jsx:        estimateService.getAll(),
./frontend/src/contexts/DataContext.jsx:        estimates: estimatesResponse.status === 'fulfilled' ? estimatesResponse.value.data : [],
./frontend/src/contexts/DataContext.jsx:    estimateService,
./frontend/src/_backups/App.tsx:              <Route path="estimates">
./frontend/src/fix_api.sh:  // Estimates
./frontend/src/fix_api.sh:  estimates: {
./frontend/src/fix_api.sh:    getAll: (params) => api.get('/api/auth/estimates', { params }),
./frontend/src/fix_api.sh:    create: (data) => api.post('/api/auth/estimates', data),
./frontend/src/fix_api.sh:    convertToJob: (estimate_id) => api.post(`/api/auth/estimates/${estimate_id}/convert-to-job`),
./frontend/src/fix_api.sh:// Estimates
./frontend/src/fix_api.sh:export const estimates_get = (params) => apiEndpoints.estimates.getAll(params);
./frontend/src/fix_api.sh:export const estimates_post = (data) => apiEndpoints.estimates.create(data);
./frontend/src/fix_api.sh:export const estimates_int_estimate_id_convert_to_job_post = (estimate_id) =>
./frontend/src/fix_api.sh:  apiEndpoints.estimates.convertToJob(estimate_id);
./frontend/src/fix_api.sh:export const estimateService = apiEndpoints.estimates;
./frontend/src/App-20250831_000053.jsx:  Estimates,
./frontend/src/App-20250831_000053.jsx:              <Route path="estimates" element={<Estimates />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="estimates/:id" element={<EstimateDetail />} />
./frontend/src/index.js:export { default as EstimatesList } from './pages/EstimatesList';
./frontend/src/index.js:export { default as Estimates } from './pages/Estimates';

---- customers ----
./frontend/src/App.jsx:import Customers from './pages/Customers';
./frontend/src/App.jsx:              {/* Customers */}
./frontend/src/App.jsx:              <Route path="/customers" element={<Customers />} />
./frontend/src/App.jsx:              <Route path="/customers/list" element={<CustomerList />} />
./frontend/src/App.jsx:              <Route path="/customers/new" element={<AddAndEditCustomer />} />
./frontend/src/App.jsx:              <Route path="/customers/:id" element={<CustomerDetail />} />
./frontend/src/App.jsx:              <Route path="/customers/:id/edit" element={<AddAndEditCustomer />} />
./frontend/src/pages/Invoice.jsx:          apiEndpoints.customers.getById(job.customerId),
./frontend/src/pages/CustomerList.jsx:// src/pages/CustomerList.jsx - FIXED VERSION using customerService
./frontend/src/pages/CustomerList.jsx:import * as customerService from '../utils/services/customerService'; // Import all named exports
./frontend/src/pages/CustomerList.jsx:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/CustomerList.jsx:  const [selectedCustomers, setSelectedCustomers] = useState([]);
./frontend/src/pages/CustomerList.jsx:    if (savedState.selectedCustomers) setSelectedCustomers(savedState.selectedCustomers);
./frontend/src/pages/CustomerList.jsx:        selectedCustomers,
./frontend/src/pages/CustomerList.jsx:  }, [searchTerm, selectedCustomers, sortBy, sortOrder, filterStatus, viewMode, savePageState, currentPath]);
./frontend/src/pages/CustomerList.jsx:  // FIXED: Fetch customers using service
./frontend/src/pages/CustomerList.jsx:    fetchCustomers();
./frontend/src/pages/CustomerList.jsx:  const fetchCustomers = useCallback(async () => {
./frontend/src/pages/CustomerList.jsx:      // Use customerService.getAll() for authenticated requests
./frontend/src/pages/CustomerList.jsx:      const data = await customerService.getAll();
./frontend/src/pages/CustomerList.jsx:      const processedCustomers = Array.isArray(data)
./frontend/src/pages/CustomerList.jsx:      setCustomers(processedCustomers);
./frontend/src/pages/CustomerList.jsx:      console.error('Error fetching customers:', err);
./frontend/src/pages/CustomerList.jsx:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx:  const filteredCustomers = useMemo(() => {
./frontend/src/pages/CustomerList.jsx:    let filtered = [...customers];
./frontend/src/pages/CustomerList.jsx:  }, [customers, searchTerm, filterStatus, dateRange, vehicleCount, totalSpentRange, sortBy, sortOrder]);
./frontend/src/pages/CustomerList.jsx:    navigateTo(`/customers/${customer.id}`, {
./frontend/src/pages/CustomerList.jsx:        returnTo: '/customers',
./frontend/src/pages/CustomerList.jsx:    navigateTo('/customers/add', { state: { returnTo: '/customers' } });
./frontend/src/pages/CustomerList.jsx:    navigateTo(`/customers/${customer.id}/edit`, {
./frontend/src/pages/CustomerList.jsx:      state: { customer, returnTo: '/customers', isEditing: true }
./frontend/src/pages/CustomerList.jsx:      // Use customerService.deleteCustomer() for authenticated deletion
./frontend/src/pages/CustomerList.jsx:      await customerService.deleteCustomer(customer.id);
./frontend/src/pages/CustomerList.jsx:      setCustomers(prev => prev.filter(c => c.id !== customer.id));
./frontend/src/pages/CustomerList.jsx:      setSelectedCustomers(prev => [...prev, customerId]);
./frontend/src/pages/CustomerList.jsx:      setSelectedCustomers(prev => prev.filter(id => id !== customerId));
./frontend/src/pages/CustomerList.jsx:      setSelectedCustomers(filteredCustomers.map(c => c.id));
./frontend/src/pages/CustomerList.jsx:      setSelectedCustomers([]);
./frontend/src/pages/CustomerList.jsx:  }, [filteredCustomers]);
./frontend/src/pages/CustomerList.jsx:    if (selectedCustomers.length === 0) return;
./frontend/src/pages/CustomerList.jsx:      `Delete ${selectedCustomers.length} selected customers? This action cannot be undone.`
./frontend/src/pages/CustomerList.jsx:      // Use customerService for bulk deletion with proper method name
./frontend/src/pages/CustomerList.jsx:        selectedCustomers.map(id => customerService.deleteCustomer(id))
./frontend/src/pages/CustomerList.jsx:      setCustomers(prev => prev.filter(c => !selectedCustomers.includes(c.id)));
./frontend/src/pages/CustomerList.jsx:      setSelectedCustomers([]);
./frontend/src/pages/CustomerList.jsx:      alert(`${selectedCustomers.length} customers deleted successfully`);
./frontend/src/pages/CustomerList.jsx:      console.error('Error deleting customers:', err);
./frontend/src/pages/CustomerList.jsx:      alert(`Error deleting customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx:  }, [selectedCustomers]);
./frontend/src/pages/CustomerList.jsx:  const handleExportCustomers = useCallback(() => {
./frontend/src/pages/CustomerList.jsx:      ...filteredCustomers.map(c => [
./frontend/src/pages/CustomerList.jsx:    a.download = `customers-${new Date().toISOString().split('T')[0]}.csv`;
./frontend/src/pages/CustomerList.jsx:  }, [filteredCustomers]);
./frontend/src/pages/CustomerList.jsx:      onClick: handleExportCustomers,
./frontend/src/pages/CustomerList.jsx:              <h3 className="text-lg font-medium text-red-800">Error Loading Customers</h3>
./frontend/src/pages/CustomerList.jsx:                  onClick={fetchCustomers}
./frontend/src/pages/CustomerList.jsx:      <SmartBreadcrumb path="/customers" actions={breadcrumbActions} />
./frontend/src/pages/CustomerList.jsx:                <p className="text-2xl font-bold text-gray-900">{customers.length}</p>
./frontend/src/pages/CustomerList.jsx:                <p className="text-sm text-gray-600">Total Customers</p>
./frontend/src/pages/CustomerList.jsx:                  {customers.filter(c => c.status === 'active').length}
./frontend/src/pages/CustomerList.jsx:                <p className="text-sm text-gray-600">Active Customers</p>
./frontend/src/pages/CustomerList.jsx:                  {customers.filter(c => c.isVIP).length}
./frontend/src/pages/CustomerList.jsx:                <p className="text-sm text-gray-600">VIP Customers</p>
./frontend/src/pages/CustomerList.jsx:                  {customers.filter(c => getMembershipDuration(c.created_at) === 'New').length}
./frontend/src/pages/CustomerList.jsx:                  placeholder="Search customers..."
./frontend/src/pages/CustomerList.jsx:            Showing {filteredCustomers.length} of {customers.length} customers
./frontend/src/pages/CustomerList.jsx:        {filteredCustomers.length === 0 ? (
./frontend/src/pages/CustomerList.jsx:            <h3 className="text-lg font-medium text-gray-900 mb-2">No customers found</h3>
./frontend/src/pages/CustomerList.jsx:            {filteredCustomers.map(customer => (
./frontend/src/pages/AddVehicle.jsx:  const { customers, refreshData } = useData();
./frontend/src/pages/AddVehicle.jsx:  const [customerSearch, setCustomerSearch] = useState('');
./frontend/src/pages/AddVehicle.jsx:  const [filteredCustomers, setFilteredCustomers] = useState([]);
./frontend/src/pages/AddVehicle.jsx:          const customer = customers.find(c => c.id === vehicleData.customer_id);
./frontend/src/pages/AddVehicle.jsx:            setCustomerSearch(`${customer.first_name} ${customer.last_name} - ${customer.phone}`);
./frontend/src/pages/AddVehicle.jsx:          const customer = customers.find(c => c.id === parseInt(customerId));
./frontend/src/pages/AddVehicle.jsx:            setCustomerSearch(`${customer.first_name} ${customer.last_name} - ${customer.phone}`);
./frontend/src/pages/AddVehicle.jsx:    if (customers.length > 0) {
./frontend/src/pages/AddVehicle.jsx:  }, [vehicleId, customerId, customers]);
./frontend/src/pages/AddVehicle.jsx:  // Filter customers based on search
./frontend/src/pages/AddVehicle.jsx:    if (customerSearch.trim()) {
./frontend/src/pages/AddVehicle.jsx:      const filtered = customers.filter(customer => {
./frontend/src/pages/AddVehicle.jsx:        const search = customerSearch.toLowerCase();
./frontend/src/pages/AddVehicle.jsx:      setFilteredCustomers(filtered.slice(0, 10)); // Limit to 10 results
./frontend/src/pages/AddVehicle.jsx:      setFilteredCustomers([]);
./frontend/src/pages/AddVehicle.jsx:  }, [customerSearch, customers]);
./frontend/src/pages/AddVehicle.jsx:  const handleCustomerSelect = (customer) => {
./frontend/src/pages/AddVehicle.jsx:    setCustomerSearch(`${customer.first_name} ${customer.last_name} - ${customer.phone}`);
./frontend/src/pages/AddVehicle.jsx:        navigate(`/customers/${form.customerId}`);
./frontend/src/pages/AddVehicle.jsx:                  value={customerSearch}
./frontend/src/pages/AddVehicle.jsx:                    setCustomerSearch(e.target.value);
./frontend/src/pages/AddVehicle.jsx:                  placeholder="Search customers by name, phone, or email..."
./frontend/src/pages/AddVehicle.jsx:                {showCustomerDropdown && filteredCustomers.length > 0 && (
./frontend/src/pages/AddVehicle.jsx:                    {filteredCustomers.map((customer) => (
./frontend/src/pages/AddVehicle.jsx:                        onClick={() => handleCustomerSelect(customer)}
./frontend/src/pages/CreateJob.jsx:  const [customerSearch, setCustomerSearch] = useState('');
./frontend/src/pages/CreateJob.jsx:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/CreateJob.jsx:        // Load customers
./frontend/src/pages/CreateJob.jsx:        const customersResponse = await fetch('/api/auth/customers');
./frontend/src/pages/CreateJob.jsx:        if (customersResponse.ok) {
./frontend/src/pages/CreateJob.jsx:          const customersData = await customersResponse.json();
./frontend/src/pages/CreateJob.jsx:          setCustomers(customersData);
./frontend/src/pages/CreateJob.jsx:        setCustomers([
./frontend/src/pages/CreateJob.jsx:  const filteredCustomers = customers.filter(customer =>
./frontend/src/pages/CreateJob.jsx:    customer.name.toLowerCase().includes(customerSearch.toLowerCase()) ||
./frontend/src/pages/CreateJob.jsx:    customer.phone.includes(customerSearch) ||
./frontend/src/pages/CreateJob.jsx:    customer.email.toLowerCase().includes(customerSearch.toLowerCase())
./frontend/src/pages/CreateJob.jsx:  const handleCustomerSelect = (customer) => {
./frontend/src/pages/CreateJob.jsx:    setCustomerSearch(customer.name);
./frontend/src/pages/CreateJob.jsx:                  value={customerSearch}
./frontend/src/pages/CreateJob.jsx:                    setCustomerSearch(e.target.value);
./frontend/src/pages/CreateJob.jsx:                {showCustomerDropdown && filteredCustomers.length > 0 && (
./frontend/src/pages/CreateJob.jsx:                    {filteredCustomers.map((customer) => (
./frontend/src/pages/CreateJob.jsx:                        onClick={() => handleCustomerSelect(customer)}
./frontend/src/pages/Dashboard.jsx:  const { customers, vehicles, jobs, estimates, invoices, appointments } = data || {};
./frontend/src/pages/Dashboard.jsx:  const hasRealData = customers?.length > 0 || vehicles?.length > 0 || jobs?.length > 0;
./frontend/src/pages/Dashboard.jsx:    totalCustomers: hasRealData ? (customers?.length || 0) : 45,
./frontend/src/pages/Dashboard.jsx:            title="Total Customers"
./frontend/src/pages/Dashboard.jsx:            value={stats.totalCustomers}
./frontend/src/pages/Dashboard.jsx:            href="/customers"
./frontend/src/pages/Dashboard.jsx:                onClick={() => handleNavigation('/customers/create')}
./frontend/src/pages/VehicleList.jsx:  const customersMap = dataOperations?.customersMap || new Map();
./frontend/src/pages/VehicleList.jsx:      customerName: customersMap.get(vehicle?.customerId)?.name || "Unknown Owner",
./frontend/src/pages/VehicleList.jsx:  }, [vehicles, customersMap]);
./frontend/src/pages/Landing.jsx:              Staff access only - Manage customers, jobs, inventory, and reports
./frontend/src/pages/Reports.jsx:              <span className="text-sm font-medium text-purple-800">Customers</span>
./frontend/src/pages/Reports.jsx:                {dashboardStats.total_customers || dashboardStats.totalCustomers || 0}
./frontend/src/pages/Reports.jsx:                    <div className="flex justify-between"><span>Unique Customers:</span><strong>{reportData.customerCount || 0}</strong></div>
./frontend/src/pages/VehicleForm.jsx:// CustomerSearch Component - FIXED
./frontend/src/pages/VehicleForm.jsx:const CustomerSearch = ({ onCustomerSelect, selectedCustomer, value, onChange }) => {
./frontend/src/pages/VehicleForm.jsx:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/VehicleForm.jsx:  const [filteredCustomers, setFilteredCustomers] = useState([]);
./frontend/src/pages/VehicleForm.jsx:  // Load customers when component mounts
./frontend/src/pages/VehicleForm.jsx:    loadCustomers();
./frontend/src/pages/VehicleForm.jsx:  const loadCustomers = async () => {
./frontend/src/pages/VehicleForm.jsx:      const response = await fetch('/api/auth/customers', {
./frontend/src/pages/VehicleForm.jsx:      const processedCustomers = Array.isArray(data) ? data.map(customer => ({
./frontend/src/pages/VehicleForm.jsx:      setCustomers(processedCustomers);
./frontend/src/pages/VehicleForm.jsx:      if (processedCustomers.length === 0) {
./frontend/src/pages/VehicleForm.jsx:        setError('No customers found. Please add customers first.');
./frontend/src/pages/VehicleForm.jsx:      setError(`Failed to load customers: ${error.message}`);
./frontend/src/pages/VehicleForm.jsx:  // Filter customers as user types
./frontend/src/pages/VehicleForm.jsx:    if (searchTerm.length > 0 && customers.length > 0) {
./frontend/src/pages/VehicleForm.jsx:      const filtered = customers.filter(customer => {
./frontend/src/pages/VehicleForm.jsx:      setFilteredCustomers(filtered);
./frontend/src/pages/VehicleForm.jsx:      setFilteredCustomers([]);
./frontend/src/pages/VehicleForm.jsx:  }, [searchTerm, customers]);
./frontend/src/pages/VehicleForm.jsx:      onCustomerSelect(null);
./frontend/src/pages/VehicleForm.jsx:    onCustomerSelect(customerData);
./frontend/src/pages/VehicleForm.jsx:    loadCustomers();
./frontend/src/pages/VehicleForm.jsx:          placeholder={loading ? "Loading customers..." : "Search customer by name, phone, or email..."}
./frontend/src/pages/VehicleForm.jsx:      {isOpen && filteredCustomers.length > 0 && (
./frontend/src/pages/VehicleForm.jsx:          {filteredCustomers.map((customer) => (
./frontend/src/pages/VehicleForm.jsx:      {isOpen && filteredCustomers.length === 0 && searchTerm.length > 0 && !loading && (
./frontend/src/pages/VehicleForm.jsx:          <p>No customers found matching "{searchTerm}"</p>
./frontend/src/pages/VehicleForm.jsx:  const [customerSearchValue, setCustomerSearchValue] = useState('');
./frontend/src/pages/VehicleForm.jsx:  const handleCustomerSelect = (customer) => {
./frontend/src/pages/VehicleForm.jsx:  const handleCustomerSearchChange = (value) => {
./frontend/src/pages/VehicleForm.jsx:    setCustomerSearchValue(value);
./frontend/src/pages/VehicleForm.jsx:        setCustomerSearchValue('');
./frontend/src/pages/VehicleForm.jsx:          <CustomerSearch 
./frontend/src/pages/VehicleForm.jsx:            onCustomerSelect={handleCustomerSelect}
./frontend/src/pages/VehicleForm.jsx:            value={customerSearchValue}
./frontend/src/pages/VehicleForm.jsx:            onChange={handleCustomerSearchChange}
./frontend/src/pages/Invoices.jsx:          apiEndpoints.customers.getById(invoice.customerId),
./frontend/src/pages/Diagnosis.jsx:  const { vehiclesMap, customersMap, jobOps, utils } = useDataOperations();
./frontend/src/pages/CreateInvoice.jsx:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/CreateInvoice.jsx:    loadCustomers();
./frontend/src/pages/CreateInvoice.jsx:  const loadCustomers = async () => {
./frontend/src/pages/CreateInvoice.jsx:      const data = await apiEndpoints.customers.getAll();
./frontend/src/pages/CreateInvoice.jsx:      setCustomers(data);
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to load customers:', error);
./frontend/src/pages/CreateInvoice.jsx:      setErrors(prev => ({ ...prev, customers: 'Failed to load customers' }));
./frontend/src/pages/CreateInvoice.jsx:  const selectedCustomer = customers.find(c => c.id === invoiceData.customerId);
./frontend/src/pages/CreateInvoice.jsx:                {customers.map((customer) => (
./frontend/src/pages/Dashboard.jsx.broken-again:    totalCustomers: 0,
./frontend/src/pages/Dashboard.jsx.broken-again:        totalCustomers: 45,
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-sm font-medium text-gray-600">Total Customers</p>
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-2xl font-bold text-gray-900">{stats.totalCustomers}</p>
./frontend/src/pages/Dashboard.jsx.broken-again:                onClick={() => handleNavigation('/customers/create')}
./frontend/src/pages/AddAndEditCustomer.jsx:  const { customers, vehicles, customerOps, isLoading } = useData();
./frontend/src/pages/AddAndEditCustomer.jsx:    if (isEditing && customers.length > 0) {
./frontend/src/pages/AddAndEditCustomer.jsx:      const customer = customers.find(c => c.id === parseInt(customerId));
./frontend/src/pages/AddAndEditCustomer.jsx:  }, [isEditing, customerId, customers, vehicles]);
./frontend/src/pages/AddAndEditCustomer.jsx:          // Navigate to edit page for new customers to add vehicles
./frontend/src/pages/AddAndEditCustomer.jsx:          handleNavigation(`/customers/${result.data.id}/edit`);
./frontend/src/pages/AddAndEditCustomer.jsx:        handleNavigation('/customers');
./frontend/src/pages/AddAndEditCustomer.jsx:              onClick={() => handleNavigation('/customers')}
./frontend/src/pages/AddAndEditCustomer.jsx:              Back to Customers
./frontend/src/pages/AddAndEditCustomer.jsx:            onClick={() => handleNavigation('/customers')}
./frontend/src/pages/AddAndEditCustomer.jsx:            Back to Customers
./frontend/src/pages/AddAndEditCustomer.jsx:                onClick={() => handleNavigation('/customers')}
./frontend/src/pages/AddAndEditCustomer.jsx:        {/* Vehicle Management Section for existing customers */}
./frontend/src/pages/AddAndEditCustomer.jsx:        {/* Delete Section for existing customers */}
./frontend/src/pages/DataMigration.jsx:          message: "Mitchell 1 format detected! We'll import customers, vehicles, and work orders."
./frontend/src/pages/DataMigration.jsx:            <span className="font-medium text-blue-800">Customers</span>
./frontend/src/pages/DataMigration.jsx:          <div className="text-2xl font-bold text-blue-600">{results.results?.customers || 0}</div>
./frontend/src/pages/DataMigration.jsx:      <p className="text-gray-600 mb-6">Import customers, vehicles, and work orders from Mitchell 1 or other systems</p>
./frontend/src/pages/NotFound.jsx:            <Link to="/customers" className="text-blue-600 hover:text-blue-800 hover:underline">
./frontend/src/pages/NotFound.jsx:              Customers
./frontend/src/pages/CustomerDetail.jsx:    customers, 
./frontend/src/pages/CustomerDetail.jsx:            onClick={() => navigate('/customers')}
./frontend/src/pages/CustomerDetail.jsx:            Back to Customers
./frontend/src/pages/CustomerDetail.jsx:                  onClick={() => navigate(`/customers/${id}/edit`)}
./frontend/src/pages/VehicleDetail.jsx:  const { vehicles, customers, jobs, estimates, vehicleOps } = useData();
./frontend/src/pages/VehicleDetail.jsx:  const customer = vehicle ? customers.find(c => c.id === vehicle.customer_id) : null;
./frontend/src/pages/VehicleDetail.jsx:                  onClick={() => navigate(`/customers/${customer.id}`)}
./frontend/src/pages/Customers.jsx:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/Customers.jsx:  const [selectedCustomers, setSelectedCustomers] = useState([]);
./frontend/src/pages/Customers.jsx:    if (savedState.selectedCustomers) setSelectedCustomers(savedState.selectedCustomers);
./frontend/src/pages/Customers.jsx:      selectedCustomers, 
./frontend/src/pages/Customers.jsx:  }, [searchTerm, selectedCustomers, sortBy, sortOrder, filterStatus, viewMode, savePageState, currentPath]);
./frontend/src/pages/Customers.jsx:  // Fetch customers with enhanced data
./frontend/src/pages/Customers.jsx:    fetchCustomers();
./frontend/src/pages/Customers.jsx:  const fetchCustomers = async () => {
./frontend/src/pages/Customers.jsx:      const response = await fetch('/api/auth/customers');
./frontend/src/pages/Customers.jsx:      const processedCustomers = Array.isArray(data) 
./frontend/src/pages/Customers.jsx:      setCustomers(processedCustomers);
./frontend/src/pages/Customers.jsx:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/Customers.jsx:  const filteredCustomers = useMemo(() => {
./frontend/src/pages/Customers.jsx:    let filtered = [...customers];
./frontend/src/pages/Customers.jsx:  }, [customers, searchTerm, filterStatus, dateRange, vehicleCount, totalSpentRange, sortBy, sortOrder]);
./frontend/src/pages/Customers.jsx:    navigateTo(`/customers/${customer.id}`, {
./frontend/src/pages/Customers.jsx:        returnTo: '/customers',
./frontend/src/pages/Customers.jsx:    navigateTo('/customers/add', { state: { returnTo: '/customers' } });
./frontend/src/pages/Customers.jsx:    navigateTo(`/customers/${customer.id}/edit`, {
./frontend/src/pages/Customers.jsx:      state: { customer, returnTo: '/customers', isEditing: true }
./frontend/src/pages/Customers.jsx:      const response = await fetch(`/api/auth/customers/${customer.id}`, {
./frontend/src/pages/Customers.jsx:        setCustomers(prev => prev.filter(c => c.id !== customer.id));
./frontend/src/pages/Customers.jsx:      setSelectedCustomers(prev => [...prev, customerId]);
./frontend/src/pages/Customers.jsx:      setSelectedCustomers(prev => prev.filter(id => id !== customerId));
./frontend/src/pages/Customers.jsx:      setSelectedCustomers(filteredCustomers.map(c => c.id));
./frontend/src/pages/Customers.jsx:      setSelectedCustomers([]);
./frontend/src/pages/Customers.jsx:  }, [filteredCustomers]);
./frontend/src/pages/Customers.jsx:    if (selectedCustomers.length === 0) return;
./frontend/src/pages/Customers.jsx:      `Delete ${selectedCustomers.length} selected customers? This action cannot be undone.`
./frontend/src/pages/Customers.jsx:      const promises = selectedCustomers.map(id =>
./frontend/src/pages/Customers.jsx:        fetch(`/api/auth/customers/${id}`, { method: 'DELETE' })
./frontend/src/pages/Customers.jsx:      setCustomers(prev => prev.filter(c => !selectedCustomers.includes(c.id)));
./frontend/src/pages/Customers.jsx:      setSelectedCustomers([]);
./frontend/src/pages/Customers.jsx:      alert(`${selectedCustomers.length} customers deleted successfully`);
./frontend/src/pages/Customers.jsx:      alert(`Error deleting customers: ${err.message}`);
./frontend/src/pages/Customers.jsx:  }, [selectedCustomers]);
./frontend/src/pages/Customers.jsx:  const handleExportCustomers = useCallback(() => {
./frontend/src/pages/Customers.jsx:      ...filteredCustomers.map(c => [
./frontend/src/pages/Customers.jsx:    a.download = `customers-${new Date().toISOString().split('T')[0]}.csv`;
./frontend/src/pages/Customers.jsx:  }, [filteredCustomers]);
./frontend/src/pages/Customers.jsx:      onClick: handleExportCustomers,
./frontend/src/pages/Customers.jsx:              <h3 className="text-lg font-medium text-red-800">Error Loading Customers</h3>
./frontend/src/pages/Customers.jsx:                onClick={fetchCustomers}
./frontend/src/pages/Customers.jsx:      <SmartBreadcrumb path="/customers" actions={breadcrumbActions} />
./frontend/src/pages/Customers.jsx:                <p className="text-2xl font-bold text-gray-900">{customers.length}</p>
./frontend/src/pages/Customers.jsx:                <p className="text-sm text-gray-600">Total Customers</p>
./frontend/src/pages/Customers.jsx:                  {customers.filter(c => c.status === 'active').length}
./frontend/src/pages/Customers.jsx:                <p className="text-sm text-gray-600">Active Customers</p>
./frontend/src/pages/Customers.jsx:                  {customers.filter(c => c.isVIP).length}
./frontend/src/pages/Customers.jsx:                <p className="text-sm text-gray-600">VIP Customers</p>
./frontend/src/pages/Customers.jsx:                  {customers.filter(c => getMembershipDuration(c.created_at) === 'New').length}
./frontend/src/pages/Customers.jsx:                  placeholder="Search customers by name, email, phone, or address..."
./frontend/src/pages/Customers.jsx:                Showing {filteredCustomers.length} of {customers.length} customers
./frontend/src/pages/Customers.jsx:      {selectedCustomers.length > 0 && (
./frontend/src/pages/Customers.jsx:                {selectedCustomers.length} customer{selectedCustomers.length !== 1 ? 's' : ''} selected
./frontend/src/pages/Customers.jsx:                onClick={() => setSelectedCustomers([])}
./frontend/src/pages/Customers.jsx:              Customers ({filteredCustomers.length})
./frontend/src/pages/Customers.jsx:                checked={selectedCustomers.length === filteredCustomers.length && filteredCustomers.length > 0}
./frontend/src/pages/Customers.jsx:            {filteredCustomers.map(customer => (
./frontend/src/pages/Customers.jsx:                      checked={selectedCustomers.includes(customer.id)}
./frontend/src/pages/Customers.jsx:            {filteredCustomers.map(customer => (
./frontend/src/pages/Customers.jsx:        {filteredCustomers.length === 0 && (
./frontend/src/pages/Customers.jsx:            <h3 className="text-lg font-medium text-gray-900 mb-2">No customers found</h3>
./frontend/src/pages/Vehicles.jsx:  const { vehicles, customersMap, loading: initialLoading, vehicleOps, utils } = useShopData();
./frontend/src/pages/Vehicles.jsx:      customerName: customersMap.get(vehicle.customerId)?.name || "Unknown Owner",
./frontend/src/pages/Vehicles.jsx:  }, [vehicles, customersMap]);
./frontend/src/pages/index.js:export { default as Customers } from './Customers';
./frontend/src/pages/InvoiceDetail.jsx:      customerSignature: true,
./frontend/src/pages/Dashboard.jsx.before-fix:    customers,
./frontend/src/pages/Dashboard.jsx.before-fix:    const hasRealData = customers?.length > 0 || vehicles?.length > 0 || jobs?.length > 0;
./frontend/src/pages/Dashboard.jsx.before-fix:        totalCustomers: customers?.length || 0,
./frontend/src/pages/Dashboard.jsx.before-fix:        totalCustomers: 45,
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [customers, vehicles, jobs, estimates, invoices, appointments]);
./frontend/src/pages/Dashboard.jsx.before-fix:  if (loading && !customers && !error) {
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Total Customers"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.totalCustomers}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/customers"
./frontend/src/pages/Dashboard.jsx.before-fix:                onClick={() => handleNavigation('/customers/create')}
./frontend/src/pages/CustomerList.jsx.backup:// src/pages/CustomerList.jsx - FIXED VERSION using customerService
./frontend/src/pages/CustomerList.jsx.backup:import * as customerService from '../utils/services/customerService'; // Import all named exports
./frontend/src/pages/CustomerList.jsx.backup:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/CustomerList.jsx.backup:  const [selectedCustomers, setSelectedCustomers] = useState([]);
./frontend/src/pages/CustomerList.jsx.backup:    if (savedState.selectedCustomers) setSelectedCustomers(savedState.selectedCustomers);
./frontend/src/pages/CustomerList.jsx.backup:        selectedCustomers,
./frontend/src/pages/CustomerList.jsx.backup:  }, [searchTerm, selectedCustomers, sortBy, sortOrder, filterStatus, viewMode, savePageState, currentPath]);
./frontend/src/pages/CustomerList.jsx.backup:  // FIXED: Fetch customers using service
./frontend/src/pages/CustomerList.jsx.backup:    fetchCustomers();
./frontend/src/pages/CustomerList.jsx.backup:  const fetchCustomers = useCallback(async () => {
./frontend/src/pages/CustomerList.jsx.backup:      // Use customerService.getAll() for authenticated requests
./frontend/src/pages/CustomerList.jsx.backup:      const data = await customerService.getAll();
./frontend/src/pages/CustomerList.jsx.backup:      const processedCustomers = Array.isArray(data)
./frontend/src/pages/CustomerList.jsx.backup:      setCustomers(processedCustomers);
./frontend/src/pages/CustomerList.jsx.backup:      console.error('Error fetching customers:', err);
./frontend/src/pages/CustomerList.jsx.backup:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx.backup:  const filteredCustomers = useMemo(() => {
./frontend/src/pages/CustomerList.jsx.backup:    let filtered = [...customers];
./frontend/src/pages/CustomerList.jsx.backup:  }, [customers, searchTerm, filterStatus, dateRange, vehicleCount, totalSpentRange, sortBy, sortOrder]);
./frontend/src/pages/CustomerList.jsx.backup:    navigateTo(`/customers/${customer.id}`, {
./frontend/src/pages/CustomerList.jsx.backup:        returnTo: '/customers',
./frontend/src/pages/CustomerList.jsx.backup:    navigateTo('/customers/add', { state: { returnTo: '/customers' } });
./frontend/src/pages/CustomerList.jsx.backup:    navigateTo(`/customers/${customer.id}/edit`, {
./frontend/src/pages/CustomerList.jsx.backup:      state: { customer, returnTo: '/customers', isEditing: true }
./frontend/src/pages/CustomerList.jsx.backup:      // Use customerService.deleteCustomer() for authenticated deletion
./frontend/src/pages/CustomerList.jsx.backup:      await customerService.deleteCustomer(customer.id);
./frontend/src/pages/CustomerList.jsx.backup:      setCustomers(prev => prev.filter(c => c.id !== customer.id));
./frontend/src/pages/CustomerList.jsx.backup:      setSelectedCustomers(prev => [...prev, customerId]);
./frontend/src/pages/CustomerList.jsx.backup:      setSelectedCustomers(prev => prev.filter(id => id !== customerId));
./frontend/src/pages/CustomerList.jsx.backup:      setSelectedCustomers(filteredCustomers.map(c => c.id));
./frontend/src/pages/CustomerList.jsx.backup:      setSelectedCustomers([]);
./frontend/src/pages/CustomerList.jsx.backup:  }, [filteredCustomers]);
./frontend/src/pages/CustomerList.jsx.backup:    if (selectedCustomers.length === 0) return;
./frontend/src/pages/CustomerList.jsx.backup:      `Delete ${selectedCustomers.length} selected customers? This action cannot be undone.`
./frontend/src/pages/CustomerList.jsx.backup:      // Use customerService for bulk deletion with proper method name
./frontend/src/pages/CustomerList.jsx.backup:        selectedCustomers.map(id => customerService.deleteCustomer(id))
./frontend/src/pages/CustomerList.jsx.backup:      setCustomers(prev => prev.filter(c => !selectedCustomers.includes(c.id)));
./frontend/src/pages/CustomerList.jsx.backup:      setSelectedCustomers([]);
./frontend/src/pages/CustomerList.jsx.backup:      alert(`${selectedCustomers.length} customers deleted successfully`);
./frontend/src/pages/CustomerList.jsx.backup:      console.error('Error deleting customers:', err);
./frontend/src/pages/CustomerList.jsx.backup:      alert(`Error deleting customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx.backup:  }, [selectedCustomers]);
./frontend/src/pages/CustomerList.jsx.backup:  const handleExportCustomers = useCallback(() => {
./frontend/src/pages/CustomerList.jsx.backup:      ...filteredCustomers.map(c => [
./frontend/src/pages/CustomerList.jsx.backup:    a.download = `customers-${new Date().toISOString().split('T')[0]}.csv`;
./frontend/src/pages/CustomerList.jsx.backup:  }, [filteredCustomers]);
./frontend/src/pages/CustomerList.jsx.backup:      onClick: handleExportCustomers,
./frontend/src/pages/CustomerList.jsx.backup:              <h3 className="text-lg font-medium text-red-800">Error Loading Customers</h3>
./frontend/src/pages/CustomerList.jsx.backup:                  onClick={fetchCustomers}
./frontend/src/pages/CustomerList.jsx.backup:      <SmartBreadcrumb path="/customers" actions={breadcrumbActions} />
./frontend/src/pages/CustomerList.jsx.backup:                <p className="text-2xl font-bold text-gray-900">{customers.length}</p>
./frontend/src/pages/CustomerList.jsx.backup:                <p className="text-sm text-gray-600">Total Customers</p>
./frontend/src/pages/CustomerList.jsx.backup:                  {customers.filter(c => c.status === 'active').length}
./frontend/src/pages/CustomerList.jsx.backup:                <p className="text-sm text-gray-600">Active Customers</p>
./frontend/src/pages/CustomerList.jsx.backup:                  {customers.filter(c => c.isVIP).length}
./frontend/src/pages/CustomerList.jsx.backup:                <p className="text-sm text-gray-600">VIP Customers</p>
./frontend/src/pages/CustomerList.jsx.backup:                  {customers.filter(c => getMembershipDuration(c.created_at) === 'New').length}
./frontend/src/pages/CustomerList.jsx.backup:                  placeholder="Search customers..."
./frontend/src/pages/CustomerList.jsx.backup:            Showing {filteredCustomers.length} of {customers.length} customers
./frontend/src/pages/CustomerList.jsx.backup:        {filteredCustomers.length === 0 ? (
./frontend/src/pages/CustomerList.jsx.backup:            <h3 className="text-lg font-medium text-gray-900 mb-2">No customers found</h3>
./frontend/src/pages/CustomerList.jsx.backup:            {filteredCustomers.map(customer => (
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:// src/pages/CustomerList.jsx - FIXED VERSION using customerService
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:import * as customerService from '../utils/services/customerService'; // Import all named exports
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  const [customers, setCustomers] = useState([]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  const [selectedCustomers, setSelectedCustomers] = useState([]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    if (savedState.selectedCustomers) setSelectedCustomers(savedState.selectedCustomers);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        selectedCustomers,
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  }, [searchTerm, selectedCustomers, sortBy, sortOrder, filterStatus, viewMode, savePageState, currentPath]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  // FIXED: Fetch customers using service
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    fetchCustomers();
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  const fetchCustomers = useCallback(async () => {
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      // Use customerService.getAll() for authenticated requests
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      const data = await customerService.getAll();
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      const processedCustomers = Array.isArray(data)
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setCustomers(processedCustomers);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      console.error('Error fetching customers:', err);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  const filteredCustomers = useMemo(() => {
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    let filtered = [...customers];
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  }, [customers, searchTerm, filterStatus, dateRange, vehicleCount, totalSpentRange, sortBy, sortOrder]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    navigateTo(`/customers/${customer.id}`, {
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        returnTo: '/customers',
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    navigateTo('/customers/add', { state: { returnTo: '/customers' } });
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    navigateTo(`/customers/${customer.id}/edit`, {
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      state: { customer, returnTo: '/customers', isEditing: true }
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      // Use customerService.deleteCustomer() for authenticated deletion
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      await customerService.deleteCustomer(customer.id);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setCustomers(prev => prev.filter(c => c.id !== customer.id));
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setSelectedCustomers(prev => [...prev, customerId]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setSelectedCustomers(prev => prev.filter(id => id !== customerId));
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setSelectedCustomers(filteredCustomers.map(c => c.id));
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setSelectedCustomers([]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  }, [filteredCustomers]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    if (selectedCustomers.length === 0) return;
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      `Delete ${selectedCustomers.length} selected customers? This action cannot be undone.`
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      // Use customerService for bulk deletion with proper method name
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        selectedCustomers.map(id => customerService.deleteCustomer(id))
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setCustomers(prev => prev.filter(c => !selectedCustomers.includes(c.id)));
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setSelectedCustomers([]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      alert(`${selectedCustomers.length} customers deleted successfully`);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      console.error('Error deleting customers:', err);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      alert(`Error deleting customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  }, [selectedCustomers]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  const handleExportCustomers = useCallback(() => {
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      ...filteredCustomers.map(c => [
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:    a.download = `customers-${new Date().toISOString().split('T')[0]}.csv`;
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:  }, [filteredCustomers]);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      onClick: handleExportCustomers,
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:              <h3 className="text-lg font-medium text-red-800">Error Loading Customers</h3>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                  onClick={fetchCustomers}
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      <SmartBreadcrumb path="/customers" actions={breadcrumbActions} />
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                <p className="text-2xl font-bold text-gray-900">{customers.length}</p>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                <p className="text-sm text-gray-600">Total Customers</p>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                  {customers.filter(c => c.status === 'active').length}
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                <p className="text-sm text-gray-600">Active Customers</p>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                  {customers.filter(c => c.isVIP).length}
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                <p className="text-sm text-gray-600">VIP Customers</p>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                  {customers.filter(c => getMembershipDuration(c.created_at) === 'New').length}
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                  placeholder="Search customers..."
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:            Showing {filteredCustomers.length} of {customers.length} customers
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        {filteredCustomers.length === 0 ? (
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:            <h3 className="text-lg font-medium text-gray-900 mb-2">No customers found</h3>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:            {filteredCustomers.map(customer => (
./frontend/src/pages/CustomerDetail.jsx.backup:    customers, 
./frontend/src/pages/CustomerDetail.jsx.backup:  const customer = customers.find(c => c.id === parseInt(id));
./frontend/src/pages/CustomerDetail.jsx.backup:            onClick={() => navigate('/customers')}
./frontend/src/pages/CustomerDetail.jsx.backup:            Back to Customers
./frontend/src/pages/CustomerDetail.jsx.backup:                  onClick={() => navigate(`/customers/${id}/edit`)}
./frontend/src/components/Navbar.jsx:            <Link to="/customers" className="nav-link">Customers</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/customers" className="nav-link block">Customers</Link>
./frontend/src/components/SearchSystem.jsx:import { customerService, vehicleService, jobService } from "../utils";
./frontend/src/components/SearchSystem.jsx:  const { customers, vehicles, jobs } = useData();
./frontend/src/components/SearchSystem.jsx:        customers: [],
./frontend/src/components/SearchSystem.jsx:          customerService.search(searchTerm)
./frontend/src/components/SearchSystem.jsx:          searchResults.customers = customerResults.value.data || [];
./frontend/src/components/SearchSystem.jsx:      // Search customers (if API didn't work)
./frontend/src/components/SearchSystem.jsx:      if (searchResults.customers.length === 0 && customers && Array.isArray(customers)) {
./frontend/src/components/SearchSystem.jsx:        searchResults.customers = customers.filter(customer =>
./frontend/src/components/SearchSystem.jsx:  }, [customers, vehicles, jobs]);
./frontend/src/components/SearchSystem.jsx:    (results.customers?.length || 0) +
./frontend/src/components/SearchSystem.jsx:            placeholder="Search for customers, vehicles, jobs..."
./frontend/src/components/SearchSystem.jsx:            {results.customers?.length > 0 && (
./frontend/src/components/SearchSystem.jsx:                  Customers ({results.customers.length})
./frontend/src/components/SearchSystem.jsx:                  {results.customers.map(item => (
./frontend/src/components/SearchSystem.jsx:                      onClick={() => handleResultClick(`/app/customers/${item.id}`)}
./frontend/src/components/Navigation.jsx:    { path: "/customers", label: "Customers", icon: UsersIcon },
./frontend/src/components/EnhancedJobCreation.jsx:  const { customers, vehicles, loading, refreshData } = useData();
./frontend/src/components/EnhancedJobCreation.jsx:  const [customerSearch, setCustomerSearch] = useState('');
./frontend/src/components/EnhancedJobCreation.jsx:  const filteredCustomers = customers?.filter(c =>
./frontend/src/components/EnhancedJobCreation.jsx:    c.name.toLowerCase().includes(customerSearch.toLowerCase()) ||
./frontend/src/components/EnhancedJobCreation.jsx:    c.phone.includes(customerSearch) ||
./frontend/src/components/EnhancedJobCreation.jsx:    c.email.toLowerCase().includes(customerSearch.toLowerCase())
./frontend/src/components/EnhancedJobCreation.jsx:  const handleCustomerSelect = (customer) => {
./frontend/src/components/EnhancedJobCreation.jsx:    setCustomerSearch(customer.name);
./frontend/src/components/EnhancedJobCreation.jsx:                  value={customerSearch}
./frontend/src/components/EnhancedJobCreation.jsx:                    setCustomerSearch(e.target.value);
./frontend/src/components/EnhancedJobCreation.jsx:                {showCustomerDropdown && filteredCustomers.length > 0 && (
./frontend/src/components/EnhancedJobCreation.jsx:                    {filteredCustomers.map(c => (
./frontend/src/components/EnhancedJobCreation.jsx:                      <div key={c.id} onClick={() => handleCustomerSelect(c)} className="px-4 py-3 hover:bg-gray-700 cursor-pointer border-b border-gray-700 last:border-b-0">
./frontend/src/components/SmartBreadcrumb.jsx:    'customers': 'Customers',
./frontend/src/components/Layout.jsx:    { name: 'Customers', href: '/customers', icon: UserGroupIcon },
./frontend/src/config/navigation.js:    to: '/customers',
./frontend/src/config/navigation.js:    label: 'Customers',
./frontend/src/config/navigation.js:    to: '/customers/add',
./frontend/src/config/navigation.js:  { to: '/customers', label: 'Customers', icon: '👥' },
./frontend/src/config/navigation.js:    'Customer Management (/customers)',
./frontend/src/config/navigation.js:  '/customers': ['Dashboard', 'Customers'],
./frontend/src/config/navigation.js:  '/customers/add': ['Dashboard', 'Customers', 'Add Customer'],
./frontend/src/config/navigation.js:  '/customers/edit': ['Dashboard', 'Customers', 'Edit Customer'],
./frontend/src/utils/apiEndpoints.js:  // Customers
./frontend/src/utils/apiEndpoints.js:  customers: {
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get('/api/auth/customers', { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue('post', '/api/auth/customers', data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/customers/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue('put', `/api/auth/customers/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue('delete', `/api/auth/customers/${id}`),
./frontend/src/utils/apiEndpoints.js:    getVehicles: (id) => api.get(`/api/auth/customers/${id}/vehicles`),
./frontend/src/utils/apiEndpoints.js:    search: (query) => api.get('/api/auth/customers/search', { params: { q: query } }),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/customers',
./frontend/src/utils/apiEndpoints.js:export const customerService = apiEndpoints.customers;
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/auth/customers/diagnosis', diagnosisData);
./frontend/src/utils/api.js:  customers: {
./frontend/src/utils/api.js:    getAll: (params) => api.get('/api/auth/customers', { params }),
./frontend/src/utils/api.js:    create: (data) => api.post('/api/auth/customers', data),
./frontend/src/utils/api.js:    getById: (id) => api.get(`/api/auth/customers/${id}`),
./frontend/src/utils/api.js:    update: (id, data) => api.put(`/api/auth/customers/${id}`, data),
./frontend/src/utils/api.js:    delete: (id) => api.delete(`/api/auth/customers/${id}`),
./frontend/src/utils/api.js:    search: (query) => api.get('/api/auth/customers/search', { params: { q: query } }),
./frontend/src/utils/testApi.js:    customers: null,
./frontend/src/utils/testApi.js:    // Test customers (requires auth)
./frontend/src/utils/testApi.js:      const response = await apiEndpoints.customers.getAll();
./frontend/src/utils/testApi.js:      results.customers = '✅ Customers API working';
./frontend/src/utils/testApi.js:        results.customers = '⚠️ Customers API requires authentication';
./frontend/src/utils/testApi.js:        results.customers = `❌ Customers failed: ${error.message}`;
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/customerService.js:// src/utils/services/customerService.js
./frontend/src/utils/services/customerService.js:const baseURL = '/api/auth/customers';
./frontend/src/utils/services/customerService.js:    return handleError(error, 'Failed to fetch customers');
./frontend/src/utils/services/index.js:import customerService from './customerService';
./frontend/src/utils/services/index.js:  customerService,
./frontend/src/utils/services/dashboardService.js:        const [customers, jobs, invoices] = await Promise.all([
./frontend/src/utils/services/dashboardService.js:          api.get('/api/auth/customers'),
./frontend/src/utils/services/dashboardService.js:          totalCustomers: customers.data?.length || 0,
./frontend/src/utils/services/dashboardService.js:          totalCustomers: 0,
./frontend/src/hooks/useDataOperations.js:  customerService,
./frontend/src/hooks/useDataOperations.js:    customers: false,
./frontend/src/hooks/useDataOperations.js:  const fetchCustomers = useCallback(async () => {
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('customers', true);
./frontend/src/hooks/useDataOperations.js:      const response = await customerService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch customers');
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('customers', false);
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('customers', true);
./frontend/src/hooks/useDataOperations.js:      const response = await customerService.create(customerData);
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('customers', false);
./frontend/src/hooks/useDataOperations.js:        fetchCustomers(),
./frontend/src/hooks/useDataOperations.js:    fetchCustomers,
./frontend/src/hooks/useDataOperations.js:    fetchCustomers,
./frontend/src/hooks/useShopData.js:  const [customers, setCustomers] = useState([]);
./frontend/src/hooks/useShopData.js:  // Create a Map of customers for quick lookup
./frontend/src/hooks/useShopData.js:  const customersMap = new Map(
./frontend/src/hooks/useShopData.js:    customers.map(customer => [customer.id, customer])
./frontend/src/hooks/useShopData.js:        const [customersData, vehiclesData, jobsData, estimatesData, invoicesData, appointmentsData] = 
./frontend/src/hooks/useShopData.js:            dataOps.fetchCustomers().catch(() => []),
./frontend/src/hooks/useShopData.js:        setCustomers(customersData || []);
./frontend/src/hooks/useShopData.js:      const [customersData, vehiclesData, jobsData] = await Promise.all([
./frontend/src/hooks/useShopData.js:        dataOps.fetchCustomers().catch(() => []),
./frontend/src/hooks/useShopData.js:      setCustomers(customersData || []);
./frontend/src/hooks/useShopData.js:    customers,
./frontend/src/hooks/useShopData.js:    customersMap,
./frontend/src/hooks/useDataOperations.js.backup:  customerService, 
./frontend/src/hooks/useDataOperations.js.backup:    customers: false,
./frontend/src/hooks/useDataOperations.js.backup:        fetchCustomers(),
./frontend/src/hooks/useDataOperations.js.backup:    fetchCustomers,
./frontend/src/hooks/useDataOperations.js.backup:    fetchCustomers,
./frontend/src/contexts/DataContext.jsx:import customerService from '../utils/services/customerService';
./frontend/src/contexts/DataContext.jsx:    customers: [],
./frontend/src/contexts/DataContext.jsx:        customersResponse,
./frontend/src/contexts/DataContext.jsx:        customerService.getAll(),
./frontend/src/contexts/DataContext.jsx:        customers: customersResponse.status === 'fulfilled' ? customersResponse.value.data : [],
./frontend/src/contexts/DataContext.jsx:      customers: prev.customers.map(customer => 
./frontend/src/contexts/DataContext.jsx:      customers: [...prev.customers, newCustomer]
./frontend/src/contexts/DataContext.jsx:      customers: prev.customers.filter(customer => customer.id !== customerId)
./frontend/src/contexts/DataContext.jsx:    customerService,
./frontend/src/_backups/Dashboard.tsx:          { title: 'Customer Satisfaction', value: `${stats?.customerSatisfaction || 0}%`, icon: Users, color: 'purple' },
./frontend/src/_backups/App.tsx:  const [customers, setCustomers] = React.useState([])
./frontend/src/_backups/App.tsx:    customers,
./frontend/src/_backups/App.tsx:    setCustomers,
./frontend/src/_backups/App.tsx:              <Route path="customers">
./frontend/src/fix_api.sh:  // Customers
./frontend/src/fix_api.sh:  customers: {
./frontend/src/fix_api.sh:    getAll: (params) => api.get('/api/auth/customers', { params }),
./frontend/src/fix_api.sh:    create: (data) => api.post('/api/auth/customers', data),
./frontend/src/fix_api.sh:    getById: (customer_id) => api.get(`/api/auth/customers/${customer_id}`),
./frontend/src/fix_api.sh:    update: (customer_id, data) => api.put(`/api/auth/customers/${customer_id}`, data),
./frontend/src/fix_api.sh:    delete: (customer_id) => api.delete(`/api/auth/customers/${customer_id}`),
./frontend/src/fix_api.sh:    getVehicles: (customer_id) => api.get(`/api/auth/customers/${customer_id}/vehicles`),
./frontend/src/fix_api.sh:    search: (query) => api.get('/api/auth/customers/search', { params: { q: query } }),
./frontend/src/fix_api.sh:// Customers
./frontend/src/fix_api.sh:export const customers_get = (params) => apiEndpoints.customers.getAll(params);
./frontend/src/fix_api.sh:export const customers_post = (data) => apiEndpoints.customers.create(data);
./frontend/src/fix_api.sh:export const customers_int_customer_id_get = (customer_id) => apiEndpoints.customers.getById(customer_id);
./frontend/src/fix_api.sh:export const customers_int_customer_id_put = (customer_id, data) => apiEndpoints.customers.update(customer_id, data);
./frontend/src/fix_api.sh:export const customers_int_customer_id_delete = (customer_id) => apiEndpoints.customers.delete(customer_id);
./frontend/src/fix_api.sh:export const customers_int_customer_id_vehicles_get = (customer_id) => apiEndpoints.customers.getVehicles(customer_id);
./frontend/src/fix_api.sh:export const customers_search_get = (query) => apiEndpoints.customers.search(query);
./frontend/src/fix_api.sh:export const customerService = apiEndpoints.customers;
./frontend/src/types/index.ts:  customerSatisfaction: number;
./frontend/src/App-20250831_000053.jsx:  Customers,
./frontend/src/App-20250831_000053.jsx:              <Route path="customers" element={<Customers />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="customers/:id" element={<CustomerDetail />} />
./frontend/src/index.js:export { default as Customers } from './pages/Customers';

---- vehicles ----
./frontend/src/App.jsx:import Vehicles from './pages/Vehicles';
./frontend/src/App.jsx:              {/* Vehicles */}
./frontend/src/App.jsx:              <Route path="/vehicles" element={<Vehicles />} />
./frontend/src/App.jsx:              <Route path="/vehicles/list" element={<VehicleList />} />
./frontend/src/App.jsx:              <Route path="/vehicles/new" element={<VehicleForm />} />
./frontend/src/App.jsx:              <Route path="/vehicles/add" element={<AddVehicle />} />
./frontend/src/App.jsx:              <Route path="/vehicles/:id" element={<VehicleDetail />} />
./frontend/src/App.jsx:              <Route path="/vehicles/:id/edit" element={<VehicleForm />} />
./frontend/src/pages/Invoice.jsx:          apiEndpoints.vehicles.getById(job.vehicleId),
./frontend/src/pages/CustomerList.jsx:            vehicle_count: customer.vehicles?.length || 0,
./frontend/src/pages/CustomerList.jsx:        case 'vehicles':
./frontend/src/pages/CustomerList.jsx:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/CustomerList.jsx:                    <p className="text-sm font-medium text-gray-900">{customer.vehicle_count} vehicles</p>
./frontend/src/pages/AddVehicle.jsx:          const response = await apiEndpoints.vehicles.getById(vehicleId);
./frontend/src/pages/AddVehicle.jsx:        await apiEndpoints.vehicles.update(vehicleId, dataToSend);
./frontend/src/pages/AddVehicle.jsx:        await apiEndpoints.vehicles.create(dataToSend);
./frontend/src/pages/AddVehicle.jsx:      // Refresh data to get latest vehicles
./frontend/src/pages/AddVehicle.jsx:        navigate("/vehicles");
./frontend/src/pages/AddVehicle.jsx:                      await apiEndpoints.vehicles.create(dataToSend);
./frontend/src/pages/CreateJob.jsx:  const [vehicleSearch, setVehicleSearch] = useState('');
./frontend/src/pages/CreateJob.jsx:  const [vehicles, setVehicles] = useState([]);
./frontend/src/pages/CreateJob.jsx:        // Load vehicles  
./frontend/src/pages/CreateJob.jsx:        const vehiclesResponse = await fetch('/api/auth/vehicles');
./frontend/src/pages/CreateJob.jsx:        if (vehiclesResponse.ok) {
./frontend/src/pages/CreateJob.jsx:          const vehiclesData = await vehiclesResponse.json();
./frontend/src/pages/CreateJob.jsx:          setVehicles(vehiclesData);
./frontend/src/pages/CreateJob.jsx:        setVehicles([
./frontend/src/pages/CreateJob.jsx:  const filteredVehicles = vehicles.filter(vehicle => {
./frontend/src/pages/CreateJob.jsx:    const matchesSearch = vehicleSearch === '' || 
./frontend/src/pages/CreateJob.jsx:      `${vehicle.year} ${vehicle.make} ${vehicle.model}`.toLowerCase().includes(vehicleSearch.toLowerCase());
./frontend/src/pages/CreateJob.jsx:    setVehicleSearch('');
./frontend/src/pages/CreateJob.jsx:  const handleVehicleSelect = (vehicle) => {
./frontend/src/pages/CreateJob.jsx:    setVehicleSearch(`${vehicle.year} ${vehicle.make} ${vehicle.model}`);
./frontend/src/pages/CreateJob.jsx:                      setVehicleSearch('');
./frontend/src/pages/CreateJob.jsx:                  value={vehicleSearch}
./frontend/src/pages/CreateJob.jsx:                    setVehicleSearch(e.target.value);
./frontend/src/pages/CreateJob.jsx:                {showVehicleDropdown && filteredVehicles.length > 0 && (
./frontend/src/pages/CreateJob.jsx:                    {filteredVehicles.map((vehicle) => (
./frontend/src/pages/CreateJob.jsx:                        onClick={() => handleVehicleSelect(vehicle)}
./frontend/src/pages/Dashboard.jsx:  const { customers, vehicles, jobs, estimates, invoices, appointments } = data || {};
./frontend/src/pages/Dashboard.jsx:  const hasRealData = customers?.length > 0 || vehicles?.length > 0 || jobs?.length > 0;
./frontend/src/pages/Dashboard.jsx:    totalVehicles: hasRealData ? (vehicles?.length || 0) : 67,
./frontend/src/pages/Dashboard.jsx:            title="Total Vehicles"
./frontend/src/pages/Dashboard.jsx:            value={stats.totalVehicles}
./frontend/src/pages/Dashboard.jsx:            href="/vehicles"
./frontend/src/pages/VehicleList.jsx:  const vehicles = dataOperations?.vehicles || [];
./frontend/src/pages/VehicleList.jsx:  console.log('VehicleList - vehicles:', vehicles);
./frontend/src/pages/VehicleList.jsx:  console.log('VehicleList - vehicles type:', typeof vehicles, Array.isArray(vehicles));
./frontend/src/pages/VehicleList.jsx:  const vehiclesWithCustomerData = useMemo(() => {
./frontend/src/pages/VehicleList.jsx:    // Ensure vehicles is an array before mapping
./frontend/src/pages/VehicleList.jsx:    if (!Array.isArray(vehicles)) {
./frontend/src/pages/VehicleList.jsx:      console.warn('Vehicles is not an array in VehicleList:', vehicles);
./frontend/src/pages/VehicleList.jsx:    return vehicles.map(vehicle => ({
./frontend/src/pages/VehicleList.jsx:  }, [vehicles, customersMap]);
./frontend/src/pages/VehicleList.jsx:    vehiclesWithCustomerData,
./frontend/src/pages/VehicleList.jsx:  const filteredVehicles = searchFilterHook?.filteredData || [];
./frontend/src/pages/VehicleList.jsx:        <div>Loading vehicles...</div>
./frontend/src/pages/VehicleList.jsx:  if (!vehicles && !initialLoading) {
./frontend/src/pages/VehicleList.jsx:          Vehicles ({filteredVehicles.length})
./frontend/src/pages/VehicleList.jsx:            placeholder="Search vehicles..."
./frontend/src/pages/VehicleList.jsx:            {Array.isArray(filteredVehicles) && filteredVehicles.length > 0 ? (
./frontend/src/pages/VehicleList.jsx:              filteredVehicles.map((vehicle) => (
./frontend/src/pages/VehicleList.jsx:                  {initialLoading ? 'Loading vehicles...' : 'No vehicles found.'}
./frontend/src/pages/VehicleForm.jsx:      const response = await fetch('/api/auth/vehicles', {
./frontend/src/pages/Invoices.jsx:          apiEndpoints.vehicles.getById(invoice.vehicleId),
./frontend/src/pages/Diagnosis.jsx:  const { vehiclesMap, customersMap, jobOps, utils } = useDataOperations();
./frontend/src/pages/Diagnosis.jsx:  const vehicles = Array.from(vehiclesMap.values());
./frontend/src/pages/Diagnosis.jsx:              {vehicles.map(v => (
./frontend/src/pages/CreateInvoice.jsx:  const [vehicles, setVehicles] = useState([]);
./frontend/src/pages/CreateInvoice.jsx:  const [selectedCustomerVehicles, setSelectedCustomerVehicles] = useState([]);
./frontend/src/pages/CreateInvoice.jsx:    loadVehicles();
./frontend/src/pages/CreateInvoice.jsx:  // Filter vehicles when customer changes
./frontend/src/pages/CreateInvoice.jsx:      const customerVehicles = vehicles.filter(v => v.customerId === invoiceData.customerId);
./frontend/src/pages/CreateInvoice.jsx:      setSelectedCustomerVehicles(customerVehicles);
./frontend/src/pages/CreateInvoice.jsx:      if (!customerVehicles.find(v => v.id === invoiceData.vehicleId)) {
./frontend/src/pages/CreateInvoice.jsx:      setSelectedCustomerVehicles([]);
./frontend/src/pages/CreateInvoice.jsx:  }, [invoiceData.customerId, vehicles]);
./frontend/src/pages/CreateInvoice.jsx:  const loadVehicles = async () => {
./frontend/src/pages/CreateInvoice.jsx:      const data = await apiEndpoints.vehicles.getAll();
./frontend/src/pages/CreateInvoice.jsx:      setVehicles(data);
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to load vehicles:', error);
./frontend/src/pages/CreateInvoice.jsx:      setErrors(prev => ({ ...prev, vehicles: 'Failed to load vehicles' }));
./frontend/src/pages/CreateInvoice.jsx:  const selectedVehicle = selectedCustomerVehicles.find(v => v.id === invoiceData.vehicleId);
./frontend/src/pages/CreateInvoice.jsx:                {selectedCustomerVehicles.map((vehicle) => (
./frontend/src/pages/Dashboard.jsx.broken-again:    totalVehicles: 0,
./frontend/src/pages/Dashboard.jsx.broken-again:        totalVehicles: 67,
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-sm font-medium text-gray-600">Total Vehicles</p>
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-2xl font-bold text-gray-900">{stats.totalVehicles}</p>
./frontend/src/pages/AddAndEditCustomer.jsx:  const { customers, vehicles, customerOps, isLoading } = useData();
./frontend/src/pages/AddAndEditCustomer.jsx:  const [customerVehicles, setCustomerVehicles] = useState([]);
./frontend/src/pages/AddAndEditCustomer.jsx:        // Filter vehicles for this customer
./frontend/src/pages/AddAndEditCustomer.jsx:        const filteredVehicles = vehicles.filter(v => v.customer_id === parseInt(customerId));
./frontend/src/pages/AddAndEditCustomer.jsx:        setCustomerVehicles(filteredVehicles);
./frontend/src/pages/AddAndEditCustomer.jsx:  }, [isEditing, customerId, customers, vehicles]);
./frontend/src/pages/AddAndEditCustomer.jsx:          // Navigate to edit page for new customers to add vehicles
./frontend/src/pages/AddAndEditCustomer.jsx:                Customer's Vehicles ({customerVehicles.length})
./frontend/src/pages/AddAndEditCustomer.jsx:                onClick={() => handleNavigation(`/vehicles/add?customerId=${customerId}`)}
./frontend/src/pages/AddAndEditCustomer.jsx:              {customerVehicles.length > 0 ? (
./frontend/src/pages/AddAndEditCustomer.jsx:                customerVehicles.map(vehicle => (
./frontend/src/pages/AddAndEditCustomer.jsx:                      onClick={() => handleNavigation(`/vehicles/${vehicle.id}/edit`)}
./frontend/src/pages/AddAndEditCustomer.jsx:                  <p className="text-gray-500">No vehicles found for this customer.</p>
./frontend/src/pages/AddAndEditCustomer.jsx:                    onClick={() => handleNavigation(`/vehicles/add?customerId=${customerId}`)}
./frontend/src/pages/AddAndEditCustomer.jsx:              Are you sure you want to permanently delete this customer and all their associated vehicles and jobs? This action cannot be undone.
./frontend/src/pages/DataMigration.jsx:          message: "Mitchell 1 format detected! We'll import customers, vehicles, and work orders."
./frontend/src/pages/DataMigration.jsx:            <span className="font-medium text-green-800">Vehicles</span>
./frontend/src/pages/DataMigration.jsx:          <div className="text-2xl font-bold text-green-600">{results.results?.vehicles || 0}</div>
./frontend/src/pages/DataMigration.jsx:      <p className="text-gray-600 mb-6">Import customers, vehicles, and work orders from Mitchell 1 or other systems</p>
./frontend/src/pages/CustomerDetail.jsx:    vehicles, 
./frontend/src/pages/CustomerDetail.jsx:  const [activeTab, setActiveTab] = useState('vehicles');
./frontend/src/pages/CustomerDetail.jsx:  const customerVehicles = vehicles?.filter(v => v.customer_id === parseInt(id)) || [];
./frontend/src/pages/CustomerDetail.jsx:    const vehicle = vehicles?.find(v => v.id === j.vehicle_id);
./frontend/src/pages/CustomerDetail.jsx:    const vehicle = vehicles?.find(v => v.id === e.vehicle_id);
./frontend/src/pages/CustomerDetail.jsx:                <div className="text-2xl font-bold text-blue-600">{customerVehicles.length}</div>
./frontend/src/pages/CustomerDetail.jsx:                <div className="text-sm text-gray-500">Vehicles</div>
./frontend/src/pages/CustomerDetail.jsx:              { id: 'vehicles', name: 'Vehicles', icon: TruckIcon },
./frontend/src/pages/CustomerDetail.jsx:          {/* Vehicles Tab */}
./frontend/src/pages/CustomerDetail.jsx:          {activeTab === 'vehicles' && (
./frontend/src/pages/CustomerDetail.jsx:                <h2 className="text-xl font-semibold text-gray-900">Vehicles</h2>
./frontend/src/pages/CustomerDetail.jsx:                  onClick={() => navigate(`/vehicles/add?customerId=${id}`)}
./frontend/src/pages/CustomerDetail.jsx:              {customerVehicles.length === 0 ? (
./frontend/src/pages/CustomerDetail.jsx:                  <h3 className="mt-2 text-sm font-medium text-gray-900">No vehicles</h3>
./frontend/src/pages/CustomerDetail.jsx:                      onClick={() => navigate(`/vehicles/add?customerId=${id}`)}
./frontend/src/pages/CustomerDetail.jsx:                  {customerVehicles.map((vehicle) => (
./frontend/src/pages/CustomerDetail.jsx:                            onClick={() => navigate(`/vehicles/add?id=${vehicle.id}`)}
./frontend/src/pages/CustomerDetail.jsx:                    const vehicle = vehicles.find(v => v.id === job.vehicle_id);
./frontend/src/pages/CustomerDetail.jsx:                    const vehicle = vehicles.find(v => v.id === estimate.vehicle_id);
./frontend/src/pages/VehicleDetail.jsx:  const { vehicles, customers, jobs, estimates, vehicleOps } = useData();
./frontend/src/pages/VehicleDetail.jsx:  const vehicle = vehicles.find(v => v.id === parseInt(id));
./frontend/src/pages/VehicleDetail.jsx:            onClick={() => navigate('/vehicles')}
./frontend/src/pages/VehicleDetail.jsx:            Back to Vehicles
./frontend/src/pages/VehicleDetail.jsx:        navigate('/vehicles');
./frontend/src/pages/VehicleDetail.jsx:                  onClick={() => navigate(`/vehicles/${id}/edit`)}
./frontend/src/pages/Customers.jsx:            vehicle_count: customer.vehicles?.length || 0,
./frontend/src/pages/Customers.jsx:        case 'vehicles':
./frontend/src/pages/Customers.jsx:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/Customers.jsx:                  <label className="block text-sm font-medium text-gray-700 mb-1">Vehicles</label>
./frontend/src/pages/Customers.jsx:                    <option value="all">All Vehicles</option>
./frontend/src/pages/Customers.jsx:                    <option value="0">No Vehicles</option>
./frontend/src/pages/Customers.jsx:                    <option value="2+">2+ Vehicles</option>
./frontend/src/pages/Customers.jsx:                  <option value="vehicles">Vehicle Count</option>
./frontend/src/pages/Customers.jsx:                      <span className="text-gray-600">Vehicles:</span>
./frontend/src/pages/Vehicles.jsx:  const { vehicles, customersMap, loading: initialLoading, vehicleOps, utils } = useShopData();
./frontend/src/pages/Vehicles.jsx:  const vehiclesWithCustomerData = useMemo(() => {
./frontend/src/pages/Vehicles.jsx:    return (vehicles || []).map(vehicle => ({
./frontend/src/pages/Vehicles.jsx:  }, [vehicles, customersMap]);
./frontend/src/pages/Vehicles.jsx:  const { filteredData: filteredVehicles, setSearchTerm } = useSearchFilter(
./frontend/src/pages/Vehicles.jsx:    vehiclesWithCustomerData,
./frontend/src/pages/Vehicles.jsx:    return <div className="p-6 text-center text-gray-500">Loading vehicles...</div>;
./frontend/src/pages/Vehicles.jsx:          Vehicles ({filteredVehicles.length})
./frontend/src/pages/Vehicles.jsx:            placeholder="Search vehicles..."
./frontend/src/pages/Vehicles.jsx:            {filteredVehicles.length > 0 ? (
./frontend/src/pages/Vehicles.jsx:              filteredVehicles.map((vehicle) => (
./frontend/src/pages/Vehicles.jsx:              <tr><td colSpan="6" className="p-8 text-center text-gray-500">No vehicles found.</td></tr>
./frontend/src/pages/index.js:export { default as Vehicles } from './Vehicles';
./frontend/src/pages/Dashboard.jsx.before-fix:    vehicles,
./frontend/src/pages/Dashboard.jsx.before-fix:    const hasRealData = customers?.length > 0 || vehicles?.length > 0 || jobs?.length > 0;
./frontend/src/pages/Dashboard.jsx.before-fix:        totalVehicles: vehicles?.length || 0,
./frontend/src/pages/Dashboard.jsx.before-fix:        totalVehicles: 67,
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [customers, vehicles, jobs, estimates, invoices, appointments]);
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Total Vehicles"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.totalVehicles}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/vehicles"
./frontend/src/pages/CustomerList.jsx.backup:            vehicle_count: customer.vehicles?.length || 0,
./frontend/src/pages/CustomerList.jsx.backup:        case 'vehicles':
./frontend/src/pages/CustomerList.jsx.backup:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/CustomerList.jsx.backup:                    <p className="text-sm font-medium text-gray-900">{customer.vehicle_count} vehicles</p>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:            vehicle_count: customer.vehicles?.length || 0,
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        case 'vehicles':
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                    <p className="text-sm font-medium text-gray-900">{customer.vehicle_count} vehicles</p>
./frontend/src/pages/CustomerDetail.jsx.backup:    vehicles, 
./frontend/src/pages/CustomerDetail.jsx.backup:  const [activeTab, setActiveTab] = useState('vehicles');
./frontend/src/pages/CustomerDetail.jsx.backup:  const customerVehicles = vehicles.filter(v => v.customer_id === parseInt(id));
./frontend/src/pages/CustomerDetail.jsx.backup:    const vehicle = vehicles.find(v => v.id === j.vehicle_id);
./frontend/src/pages/CustomerDetail.jsx.backup:    const vehicle = vehicles.find(v => v.id === e.vehicle_id);
./frontend/src/pages/CustomerDetail.jsx.backup:                <div className="text-2xl font-bold text-blue-600">{customerVehicles.length}</div>
./frontend/src/pages/CustomerDetail.jsx.backup:                <div className="text-sm text-gray-500">Vehicles</div>
./frontend/src/pages/CustomerDetail.jsx.backup:              { id: 'vehicles', name: 'Vehicles', icon: TruckIcon },
./frontend/src/pages/CustomerDetail.jsx.backup:          {/* Vehicles Tab */}
./frontend/src/pages/CustomerDetail.jsx.backup:          {activeTab === 'vehicles' && (
./frontend/src/pages/CustomerDetail.jsx.backup:                <h2 className="text-xl font-semibold text-gray-900">Vehicles</h2>
./frontend/src/pages/CustomerDetail.jsx.backup:                  onClick={() => navigate(`/vehicles/add?customerId=${id}`)}
./frontend/src/pages/CustomerDetail.jsx.backup:              {customerVehicles.length === 0 ? (
./frontend/src/pages/CustomerDetail.jsx.backup:                  <h3 className="mt-2 text-sm font-medium text-gray-900">No vehicles</h3>
./frontend/src/pages/CustomerDetail.jsx.backup:                      onClick={() => navigate(`/vehicles/add?customerId=${id}`)}
./frontend/src/pages/CustomerDetail.jsx.backup:                  {customerVehicles.map((vehicle) => (
./frontend/src/pages/CustomerDetail.jsx.backup:                            onClick={() => navigate(`/vehicles/add?id=${vehicle.id}`)}
./frontend/src/pages/CustomerDetail.jsx.backup:                    const vehicle = vehicles.find(v => v.id === job.vehicle_id);
./frontend/src/pages/CustomerDetail.jsx.backup:                    const vehicle = vehicles.find(v => v.id === estimate.vehicle_id);
./frontend/src/components/Navbar.jsx:            <Link to="/vehicles" className="nav-link">Vehicles</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/vehicles" className="nav-link block">Vehicles</Link>
./frontend/src/components/SearchSystem.jsx:import { customerService, vehicleService, jobService } from "../utils";
./frontend/src/components/SearchSystem.jsx:  const { customers, vehicles, jobs } = useData();
./frontend/src/components/SearchSystem.jsx:        vehicles: [],
./frontend/src/components/SearchSystem.jsx:      // Fallback: Search through local data if API fails or for vehicles/jobs
./frontend/src/components/SearchSystem.jsx:      // Search vehicles
./frontend/src/components/SearchSystem.jsx:      if (vehicles && Array.isArray(vehicles)) {
./frontend/src/components/SearchSystem.jsx:        searchResults.vehicles = vehicles.filter(vehicle =>
./frontend/src/components/SearchSystem.jsx:  }, [customers, vehicles, jobs]);
./frontend/src/components/SearchSystem.jsx:    (results.vehicles?.length || 0) +
./frontend/src/components/SearchSystem.jsx:            placeholder="Search for customers, vehicles, jobs..."
./frontend/src/components/SearchSystem.jsx:            {results.vehicles?.length > 0 && (
./frontend/src/components/SearchSystem.jsx:                  Vehicles ({results.vehicles.length})
./frontend/src/components/SearchSystem.jsx:                  {results.vehicles.map(item => (
./frontend/src/components/SearchSystem.jsx:                      onClick={() => handleResultClick(`/app/vehicles/${item.id}`)}
./frontend/src/components/Navigation.jsx:    { path: "/vehicles", label: "Vehicles", icon: TruckIcon },
./frontend/src/components/EnhancedJobCreation.jsx:  const { customers, vehicles, loading, refreshData } = useData();
./frontend/src/components/EnhancedJobCreation.jsx:  const [vehicleSearch, setVehicleSearch] = useState('');
./frontend/src/components/EnhancedJobCreation.jsx:  const filteredVehicles = vehicles?.filter(v => {
./frontend/src/components/EnhancedJobCreation.jsx:    const matchesSearch = vehicleSearch === '' ||
./frontend/src/components/EnhancedJobCreation.jsx:      `${v.year} ${v.make} ${v.model}`.toLowerCase().includes(vehicleSearch.toLowerCase());
./frontend/src/components/EnhancedJobCreation.jsx:    setVehicleSearch('');
./frontend/src/components/EnhancedJobCreation.jsx:  const handleVehicleSelect = (vehicle) => {
./frontend/src/components/EnhancedJobCreation.jsx:    setVehicleSearch(`${vehicle.year} ${vehicle.make} ${vehicle.model}`);
./frontend/src/components/EnhancedJobCreation.jsx:                  value={vehicleSearch}
./frontend/src/components/EnhancedJobCreation.jsx:                  onChange={(e) => { setVehicleSearch(e.target.value); setShowVehicleDropdown(true); }}
./frontend/src/components/EnhancedJobCreation.jsx:                {showVehicleDropdown && filteredVehicles.length > 0 && (
./frontend/src/components/EnhancedJobCreation.jsx:                    {filteredVehicles.map(v => (
./frontend/src/components/EnhancedJobCreation.jsx:                      <div key={v.id} onClick={() => handleVehicleSelect(v)} className="px-4 py-3 hover:bg-gray-700 cursor-pointer border-b border-gray-700 last:border-b-0">
./frontend/src/components/CustomerPortal.jsx:      vehicles: [
./frontend/src/components/CustomerPortal.jsx:        {/* My Vehicles */}
./frontend/src/components/CustomerPortal.jsx:          <h2 className="text-lg font-semibold text-gray-900 mb-4">My Vehicles</h2>
./frontend/src/components/CustomerPortal.jsx:            {customerData.vehicles.map((vehicle) => (
./frontend/src/components/SmartBreadcrumb.jsx:    'vehicles': 'Vehicles',
./frontend/src/components/LandingPage.jsx:              { title: "Vehicle Management", desc: "Track customer vehicles and maintenance history", icon: "🚗" },
./frontend/src/components/Layout.jsx:    { name: 'Vehicles', href: '/vehicles', icon: TruckIcon },
./frontend/src/services/diagnosticsService.ts:  async getVehicles() {
./frontend/src/services/diagnosticsService.ts:    const response = await apiClient.get('/auth/vehicles');
./frontend/src/services/diagnosticsService.ts:    const response = await apiClient.get(`/auth/vehicles/${vehicleId}/diagnostics`);
./frontend/src/services/diagnosticsService.ts:    const response = await apiClient.post(`/auth/vehicles/${vehicleId}/scan`);
./frontend/src/config/navigation.js:    to: '/vehicles',
./frontend/src/config/navigation.js:    label: 'Vehicles',
./frontend/src/config/navigation.js:    to: '/vehicles/add',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    'Vehicle Tracking (/vehicles)',
./frontend/src/config/navigation.js:    mainNavLinks[2], // Vehicles
./frontend/src/config/navigation.js:  '/vehicles': ['Dashboard', 'Vehicles'],
./frontend/src/config/navigation.js:  '/vehicles/add': ['Dashboard', 'Vehicles', 'Add Vehicle'],
./frontend/src/utils/apiEndpoints.js:    getVehicles: (id) => api.get(`/api/auth/customers/${id}/vehicles`),
./frontend/src/utils/apiEndpoints.js:  // Vehicles
./frontend/src/utils/apiEndpoints.js:  vehicles: {
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get('/api/auth/vehicles', { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue('post', '/api/auth/vehicles', data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/vehicles/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue('put', `/api/auth/vehicles/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue('delete', `/api/auth/vehicles/${id}`),
./frontend/src/utils/apiEndpoints.js:    vinLookup: (vin) => api.get(`/api/auth/vehicles/vin-lookup/${vin}`),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/vehicles',
./frontend/src/utils/apiEndpoints.js:export const vehicleService = apiEndpoints.vehicles;
./frontend/src/utils/api.js:  vehicles: {
./frontend/src/utils/api.js:    getAll: (params) => api.get('/api/auth/vehicles', { params }),
./frontend/src/utils/api.js:    create: (data) => api.post('/api/auth/vehicles', data),
./frontend/src/utils/api.js:    getById: (id) => api.get(`/api/auth/vehicles/${id}`),
./frontend/src/utils/api.js:    update: (id, data) => api.put(`/api/auth/vehicles/${id}`, data),
./frontend/src/utils/api.js:    delete: (id) => api.delete(`/api/auth/vehicles/${id}`),
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/vehicleService.js:// src/utils/services/vehicleService.js
./frontend/src/utils/services/vehicleService.js:const baseURL = '/api/vehicles';
./frontend/src/utils/services/vehicleService.js:    return handleError(error, 'Failed to fetch vehicles');
./frontend/src/utils/services/index.js:import vehicleService from './vehicleService';
./frontend/src/utils/services/index.js:  vehicleService,
./frontend/src/hooks/useDataOperations.js:  vehicleService,
./frontend/src/hooks/useDataOperations.js:    vehicles: false,
./frontend/src/hooks/useDataOperations.js:  const fetchVehicles = useCallback(async () => {
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('vehicles', true);
./frontend/src/hooks/useDataOperations.js:      const response = await vehicleService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch vehicles');
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('vehicles', false);
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('vehicles', true);
./frontend/src/hooks/useDataOperations.js:      const response = await vehicleService.create(vehicleData);
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('vehicles', false);
./frontend/src/hooks/useDataOperations.js:        fetchVehicles(),
./frontend/src/hooks/useDataOperations.js:    fetchVehicles,
./frontend/src/hooks/useDataOperations.js:    fetchVehicles,
./frontend/src/hooks/useShopData.js:  const [vehicles, setVehicles] = useState([]);
./frontend/src/hooks/useShopData.js:        const [customersData, vehiclesData, jobsData, estimatesData, invoicesData, appointmentsData] = 
./frontend/src/hooks/useShopData.js:            dataOps.fetchVehicles().catch(() => []),
./frontend/src/hooks/useShopData.js:        setVehicles(vehiclesData || []);
./frontend/src/hooks/useShopData.js:      const [customersData, vehiclesData, jobsData] = await Promise.all([
./frontend/src/hooks/useShopData.js:        dataOps.fetchVehicles().catch(() => []),
./frontend/src/hooks/useShopData.js:      setVehicles(vehiclesData || []);
./frontend/src/hooks/useShopData.js:    vehicles,
./frontend/src/hooks/useDataOperations.js.backup:  vehicleService, 
./frontend/src/hooks/useDataOperations.js.backup:    vehicles: false,
./frontend/src/hooks/useDataOperations.js.backup:        fetchVehicles(),
./frontend/src/hooks/useDataOperations.js.backup:    fetchVehicles,
./frontend/src/hooks/useDataOperations.js.backup:    fetchVehicles,
./frontend/src/contexts/DataContext.jsx:import vehicleService from '../utils/services/vehicleService';
./frontend/src/contexts/DataContext.jsx:    vehicles: [],
./frontend/src/contexts/DataContext.jsx:        vehiclesResponse,
./frontend/src/contexts/DataContext.jsx:        vehicleService.getAll(),
./frontend/src/contexts/DataContext.jsx:        vehicles: vehiclesResponse.status === 'fulfilled' ? vehiclesResponse.value.data : [],
./frontend/src/contexts/DataContext.jsx:      vehicles: prev.vehicles.map(vehicle => 
./frontend/src/contexts/DataContext.jsx:      vehicles: [...prev.vehicles, newVehicle]
./frontend/src/contexts/DataContext.jsx:    vehicleService,
./frontend/src/_backups/Dashboard.tsx:          { title: 'Vehicles Serviced', value: stats?.vehiclesServiced || 0, icon: Car, color: 'orange' }
./frontend/src/_backups/VehicleDiagnostics.tsx:  const { data: vehicles, isLoading } = useQuery({
./frontend/src/_backups/VehicleDiagnostics.tsx:    queryKey: ['vehicles'],
./frontend/src/_backups/VehicleDiagnostics.tsx:      const response = await apiEndpoints.vehicles.getAll();
./frontend/src/_backups/VehicleDiagnostics.tsx:      return response.data.vehicles || response.data;
./frontend/src/_backups/VehicleDiagnostics.tsx:          <div>Loading vehicles...</div>
./frontend/src/_backups/VehicleDiagnostics.tsx:            {vehicles?.map((vehicle: any) => (
./frontend/src/_backups/App.tsx:  const [vehicles, setVehicles] = React.useState([])
./frontend/src/_backups/App.tsx:    vehicles,
./frontend/src/_backups/App.tsx:    setVehicles,
./frontend/src/_backups/App.tsx:              <Route path="vehicles">
./frontend/src/fix_api.sh:    getVehicles: (customer_id) => api.get(`/api/auth/customers/${customer_id}/vehicles`),
./frontend/src/fix_api.sh:  // Vehicles
./frontend/src/fix_api.sh:  vehicles: {
./frontend/src/fix_api.sh:    getAll: (params) => api.get('/api/auth/vehicles', { params }),
./frontend/src/fix_api.sh:    create: (data) => api.post('/api/auth/vehicles', data),
./frontend/src/fix_api.sh:    getById: (vehicle_id) => api.get(`/api/auth/vehicles/${vehicle_id}`),
./frontend/src/fix_api.sh:    vinLookup: (vin) => api.get(`/api/auth/vehicles/vin-lookup/${vin}`),
./frontend/src/fix_api.sh:export const customers_int_customer_id_vehicles_get = (customer_id) => apiEndpoints.customers.getVehicles(customer_id);
./frontend/src/fix_api.sh:// Vehicles
./frontend/src/fix_api.sh:export const vehicles_get = (params) => apiEndpoints.vehicles.getAll(params);
./frontend/src/fix_api.sh:export const vehicles_post = (data) => apiEndpoints.vehicles.create(data);
./frontend/src/fix_api.sh:export const vehicles_int_vehicle_id_get = (vehicle_id) => apiEndpoints.vehicles.getById(vehicle_id);
./frontend/src/fix_api.sh:export const vehicles_vin_lookup_vin_get = (vin) => apiEndpoints.vehicles.vinLookup(vin);
./frontend/src/fix_api.sh:export const vehicleService = apiEndpoints.vehicles;
./frontend/src/types/index.ts:  vehiclesServiced: number;
./frontend/src/types/index.ts:  vehiclesChange: number;
./frontend/src/App-20250831_000053.jsx:  Vehicles,
./frontend/src/App-20250831_000053.jsx:              <Route path="vehicles" element={<Vehicles />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="vehicles/:id" element={<VehicleDetail />} />
./frontend/src/index.js:export { default as Vehicles } from './pages/Vehicles';

---- jobs ----
./frontend/src/App.jsx:import Jobs from './pages/Jobs';
./frontend/src/App.jsx:import ViewJobs from './pages/ViewJobs';
./frontend/src/App.jsx:              {/* Jobs */}
./frontend/src/App.jsx:              <Route path="/jobs" element={<Jobs />} />
./frontend/src/App.jsx:              <Route path="/jobs/list" element={<ViewJobs />} />
./frontend/src/App.jsx:              <Route path="/jobs/new" element={<CreateJob />} />
./frontend/src/App.jsx:              <Route path="/jobs/:id" element={<JobDetail />} />
./frontend/src/pages/Invoice.jsx:        const job = await apiEndpoints.jobs.getById(jobId);
./frontend/src/pages/Invoice.jsx:        await apiEndpoints.jobs.emailInvoice?.(jobId) // TODO: Add emailInvoice method;
./frontend/src/pages/CreateJob.jsx:          { id: 1, name: 'John Smith', phone: '555-0123', email: 'john@email.com', vip: true, totalJobs: 15, avgSpend: 850 },
./frontend/src/pages/CreateJob.jsx:          { id: 2, name: 'Sarah Johnson', phone: '555-0456', email: 'sarah@email.com', vip: false, totalJobs: 3, avgSpend: 420 },
./frontend/src/pages/CreateJob.jsx:      const response = await fetch('/api/auth/jobs', {
./frontend/src/pages/CreateJob.jsx:        window.location.href = `/jobs/${savedJob.id}`;
./frontend/src/pages/CreateJob.jsx:                              {customer.totalJobs} jobs • Avg: ${customer.avgSpend}
./frontend/src/pages/CreateJob.jsx:                        {selectedCustomer.totalJobs} jobs • Avg: ${selectedCustomer.avgSpend}
./frontend/src/pages/ViewJobs.jsx:// src/pages/ViewJobs.jsx
./frontend/src/pages/ViewJobs.jsx:const ViewJobs = () => {
./frontend/src/pages/ViewJobs.jsx:  const { enrichedJobs, loading: initialLoading, jobOps, utils } = useDataOperations();
./frontend/src/pages/ViewJobs.jsx:    filteredData: filteredJobs,
./frontend/src/pages/ViewJobs.jsx:  } = useSearchFilter(enrichedJobs || [], {
./frontend/src/pages/ViewJobs.jsx:  const currentJobs = useMemo(() => {
./frontend/src/pages/ViewJobs.jsx:    return filteredJobs.slice(firstIndex, firstIndex + itemsPerPage);
./frontend/src/pages/ViewJobs.jsx:  }, [filteredJobs, currentPage, itemsPerPage]);
./frontend/src/pages/ViewJobs.jsx:          Work Orders ({filteredJobs.length})
./frontend/src/pages/ViewJobs.jsx:            ) : currentJobs.length > 0? (
./frontend/src/pages/ViewJobs.jsx:              // ✨ 4. We render the `currentJobs` which is the paginated version of the hook's `filteredData`.
./frontend/src/pages/ViewJobs.jsx:              currentJobs.map((job) => (
./frontend/src/pages/ViewJobs.jsx:              <tr><td colSpan="7" className="p-8 text-center text-gray-500">No jobs found.</td></tr>
./frontend/src/pages/ViewJobs.jsx:      {/*... (Pagination and ConfirmModal remain the same, powered by filteredJobs.length)... */}
./frontend/src/pages/ViewJobs.jsx:export default ViewJobs;
./frontend/src/pages/Dashboard.jsx:  const { customers, vehicles, jobs, estimates, invoices, appointments } = data || {};
./frontend/src/pages/Dashboard.jsx:  const sampleRecentJobs = [
./frontend/src/pages/Dashboard.jsx:  const hasRealData = customers?.length > 0 || vehicles?.length > 0 || jobs?.length > 0;
./frontend/src/pages/Dashboard.jsx:    activeJobs: hasRealData 
./frontend/src/pages/Dashboard.jsx:      ? (jobs?.filter(job => job.status !== 'completed' && job.status !== 'cancelled')?.length || 0)
./frontend/src/pages/Dashboard.jsx:            title="Active Jobs"
./frontend/src/pages/Dashboard.jsx:            value={stats.activeJobs}
./frontend/src/pages/Dashboard.jsx:            href="/jobs"
./frontend/src/pages/Dashboard.jsx:        {/* Quick Actions & Recent Jobs */}
./frontend/src/pages/Dashboard.jsx:                onClick={() => handleNavigation('/jobs/create')}
./frontend/src/pages/Dashboard.jsx:          {/* Recent Jobs */}
./frontend/src/pages/Dashboard.jsx:                Recent Jobs
./frontend/src/pages/Dashboard.jsx:                onClick={() => handleNavigation('/jobs')}
./frontend/src/pages/Dashboard.jsx:              {sampleRecentJobs.length > 0 ? (
./frontend/src/pages/Dashboard.jsx:                  {sampleRecentJobs.map((job) => (
./frontend/src/pages/Dashboard.jsx:                  <p className="text-gray-500">No recent jobs</p>
./frontend/src/pages/Dashboard.jsx:                    onClick={() => handleNavigation('/jobs/create')}
./frontend/src/pages/Landing.jsx:              Staff access only - Manage customers, jobs, inventory, and reports
./frontend/src/pages/JobDetail.jsx:  const { jobs } = useData();
./frontend/src/pages/JobDetail.jsx:  const job = jobs.find(j => j.id === parseInt(id));
./frontend/src/pages/Reports.jsx:              <span className="text-sm font-medium text-green-800">Active Jobs</span>
./frontend/src/pages/Reports.jsx:                {dashboardStats.active_jobs || dashboardStats.activeJobs || 0}
./frontend/src/pages/Reports.jsx:                    <div className="flex justify-between"><span>Total Jobs:</span><strong>{reportData.jobCount || 0}</strong></div>
./frontend/src/pages/Invoices.jsx:        // FIXED: Call the actual invoice endpoint instead of jobs
./frontend/src/pages/EstimatesList.jsx:      navigate(`/jobs/new?from_estimate=${estimate.id}`);
./frontend/src/pages/Dashboard.jsx.broken-again:  const [recentJobs, setRecentJobs] = useState([]);
./frontend/src/pages/Dashboard.jsx.broken-again:    activeJobs: 0,
./frontend/src/pages/Dashboard.jsx.broken-again:  const sampleJobs = [
./frontend/src/pages/Dashboard.jsx.broken-again:        activeJobs: 12,
./frontend/src/pages/Dashboard.jsx.broken-again:      setRecentJobs(sampleJobs);
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-sm font-medium text-gray-600">Active Jobs</p>
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-2xl font-bold text-gray-900">{stats.activeJobs}</p>
./frontend/src/pages/Dashboard.jsx.broken-again:                onClick={() => handleNavigation('/jobs/create')}
./frontend/src/pages/Dashboard.jsx.broken-again:          {/* Recent Jobs */}
./frontend/src/pages/Dashboard.jsx.broken-again:              <h2 className="text-xl font-semibold text-gray-900">Recent Jobs</h2>
./frontend/src/pages/Dashboard.jsx.broken-again:                onClick={() => handleNavigation('/jobs')}
./frontend/src/pages/Dashboard.jsx.broken-again:              {recentJobs.length > 0 ? (
./frontend/src/pages/Dashboard.jsx.broken-again:                  {recentJobs.map((job) => (
./frontend/src/pages/Dashboard.jsx.broken-again:                <p className="text-gray-500 text-center py-4">No recent jobs</p>
./frontend/src/pages/AddAndEditCustomer.jsx:              Are you sure you want to permanently delete this customer and all their associated vehicles and jobs? This action cannot be undone.
./frontend/src/pages/DataMigration.jsx:  const hasJobs = (results.results?.jobs || 0) > 0;
./frontend/src/pages/DataMigration.jsx:        {hasJobs && (
./frontend/src/pages/DataMigration.jsx:            <div className="text-2xl font-bold text-purple-600">{results.results?.jobs || 0}</div>
./frontend/src/pages/CustomerDetail.jsx:    jobs, 
./frontend/src/pages/CustomerDetail.jsx:  const customerJobs = jobs?.filter(j => {
./frontend/src/pages/CustomerDetail.jsx:                <div className="text-2xl font-bold text-green-600">{customerJobs.length}</div>
./frontend/src/pages/CustomerDetail.jsx:                <div className="text-sm text-gray-500">Jobs</div>
./frontend/src/pages/CustomerDetail.jsx:                  {formatCurrency(customerJobs.reduce((sum, job) => sum + (job.total || 0), 0))}
./frontend/src/pages/CustomerDetail.jsx:              { id: 'jobs', name: 'Service History', icon: WrenchScrewdriverIcon },
./frontend/src/pages/CustomerDetail.jsx:                          onClick={() => navigate(`/jobs/create?vehicleId=${vehicle.id}`)}
./frontend/src/pages/CustomerDetail.jsx:          {/* Jobs Tab */}
./frontend/src/pages/CustomerDetail.jsx:          {activeTab === 'jobs' && (
./frontend/src/pages/CustomerDetail.jsx:                  onClick={() => navigate('/jobs/create')}
./frontend/src/pages/CustomerDetail.jsx:              {customerJobs.length === 0 ? (
./frontend/src/pages/CustomerDetail.jsx:                  <p className="mt-1 text-sm text-gray-500">No jobs have been created for this customer yet.</p>
./frontend/src/pages/CustomerDetail.jsx:                  {customerJobs.map((job) => {
./frontend/src/pages/VehicleDetail.jsx:  const { vehicles, customers, jobs, estimates, vehicleOps } = useData();
./frontend/src/pages/VehicleDetail.jsx:  const vehicleJobs = jobs.filter(j => j.vehicle_id === parseInt(id));
./frontend/src/pages/VehicleDetail.jsx:                onClick={() => navigate(`/jobs/create?vehicleId=${vehicle.id}`)}
./frontend/src/pages/VehicleDetail.jsx:          <h2 className="text-xl font-semibold text-gray-900 mb-4">Service History ({vehicleJobs.length})</h2>
./frontend/src/pages/VehicleDetail.jsx:          {vehicleJobs.length === 0 ? (
./frontend/src/pages/VehicleDetail.jsx:              {vehicleJobs.map((job) => (
./frontend/src/pages/Jobs.jsx:// src/pages/ViewJobs.jsx
./frontend/src/pages/Jobs.jsx:const ViewJobs = () => {
./frontend/src/pages/Jobs.jsx:  const { enrichedJobs, loading: initialLoading, jobOps, utils } = useDataOperations();
./frontend/src/pages/Jobs.jsx:    filteredData: filteredJobs,
./frontend/src/pages/Jobs.jsx:  } = useSearchFilter(enrichedJobs || [], {
./frontend/src/pages/Jobs.jsx:  const currentJobs = useMemo(() => {
./frontend/src/pages/Jobs.jsx:    return filteredJobs.slice(firstIndex, firstIndex + itemsPerPage);
./frontend/src/pages/Jobs.jsx:  }, [filteredJobs, currentPage, itemsPerPage]);
./frontend/src/pages/Jobs.jsx:          Work Orders ({filteredJobs.length})
./frontend/src/pages/Jobs.jsx:            ) : currentJobs.length > 0? (
./frontend/src/pages/Jobs.jsx:              // ✨ 4. We render the `currentJobs` which is the paginated version of the hook's `filteredData`.
./frontend/src/pages/Jobs.jsx:              currentJobs.map((job) => (
./frontend/src/pages/Jobs.jsx:              <tr><td colSpan="7" className="p-8 text-center text-gray-500">No jobs found.</td></tr>
./frontend/src/pages/Jobs.jsx:      {/*... (Pagination and ConfirmModal remain the same, powered by filteredJobs.length)... */}
./frontend/src/pages/Jobs.jsx:export default ViewJobs;
./frontend/src/pages/Estimates.jsx:      navigate(`/jobs/new?from_estimate=${estimate.id}`);
./frontend/src/pages/index.js:export { default as Jobs } from './Jobs';
./frontend/src/pages/index.js:export { default as ViewJobs } from './ViewJobs';
./frontend/src/pages/Dashboard.jsx.before-fix:    jobs,
./frontend/src/pages/Dashboard.jsx.before-fix:  const sampleRecentJobs = [
./frontend/src/pages/Dashboard.jsx.before-fix:    const hasRealData = customers?.length > 0 || vehicles?.length > 0 || jobs?.length > 0;
./frontend/src/pages/Dashboard.jsx.before-fix:        activeJobs: jobs?.filter(job => job.status !== 'completed' && job.status !== 'cancelled')?.length || 0,
./frontend/src/pages/Dashboard.jsx.before-fix:        activeJobs: 12,
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [customers, vehicles, jobs, estimates, invoices, appointments]);
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Active Jobs"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.activeJobs}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/jobs"
./frontend/src/pages/Dashboard.jsx.before-fix:        {/* Quick Actions & Recent Jobs */}
./frontend/src/pages/Dashboard.jsx.before-fix:                onClick={() => handleNavigation('/jobs/create')}
./frontend/src/pages/Dashboard.jsx.before-fix:          {/* Recent Jobs */}
./frontend/src/pages/Dashboard.jsx.before-fix:                Recent Jobs
./frontend/src/pages/Dashboard.jsx.before-fix:                onClick={() => handleNavigation('/jobs')}
./frontend/src/pages/Dashboard.jsx.before-fix:              {sampleRecentJobs.length > 0 ? (
./frontend/src/pages/Dashboard.jsx.before-fix:                  {sampleRecentJobs.map((job) => (
./frontend/src/pages/Dashboard.jsx.before-fix:                  <p className="text-gray-500">No recent jobs</p>
./frontend/src/pages/Dashboard.jsx.before-fix:                    onClick={() => handleNavigation('/jobs/create')}
./frontend/src/pages/CustomerDetail.jsx.backup:    jobs, 
./frontend/src/pages/CustomerDetail.jsx.backup:  const customerJobs = jobs.filter(j => {
./frontend/src/pages/CustomerDetail.jsx.backup:                <div className="text-2xl font-bold text-green-600">{customerJobs.length}</div>
./frontend/src/pages/CustomerDetail.jsx.backup:                <div className="text-sm text-gray-500">Jobs</div>
./frontend/src/pages/CustomerDetail.jsx.backup:                  {formatCurrency(customerJobs.reduce((sum, job) => sum + (job.total || 0), 0))}
./frontend/src/pages/CustomerDetail.jsx.backup:              { id: 'jobs', name: 'Service History', icon: WrenchScrewdriverIcon },
./frontend/src/pages/CustomerDetail.jsx.backup:                          onClick={() => navigate(`/jobs/create?vehicleId=${vehicle.id}`)}
./frontend/src/pages/CustomerDetail.jsx.backup:          {/* Jobs Tab */}
./frontend/src/pages/CustomerDetail.jsx.backup:          {activeTab === 'jobs' && (
./frontend/src/pages/CustomerDetail.jsx.backup:                  onClick={() => navigate('/jobs/create')}
./frontend/src/pages/CustomerDetail.jsx.backup:              {customerJobs.length === 0 ? (
./frontend/src/pages/CustomerDetail.jsx.backup:                  <p className="mt-1 text-sm text-gray-500">No jobs have been created for this customer yet.</p>
./frontend/src/pages/CustomerDetail.jsx.backup:                  {customerJobs.map((job) => {
./frontend/src/components/Navbar.jsx:            <Link to="/jobs" className="nav-link">Jobs</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/jobs" className="nav-link block">Jobs</Link>
./frontend/src/components/SearchSystem.jsx:import { customerService, vehicleService, jobService } from "../utils";
./frontend/src/components/SearchSystem.jsx:  const { customers, vehicles, jobs } = useData();
./frontend/src/components/SearchSystem.jsx:        jobs: []
./frontend/src/components/SearchSystem.jsx:      // Fallback: Search through local data if API fails or for vehicles/jobs
./frontend/src/components/SearchSystem.jsx:      // Search jobs
./frontend/src/components/SearchSystem.jsx:      if (jobs && Array.isArray(jobs)) {
./frontend/src/components/SearchSystem.jsx:        searchResults.jobs = jobs.filter(job =>
./frontend/src/components/SearchSystem.jsx:  }, [customers, vehicles, jobs]);
./frontend/src/components/SearchSystem.jsx:    (results.jobs?.length || 0) : 0;
./frontend/src/components/SearchSystem.jsx:            placeholder="Search for customers, vehicles, jobs..."
./frontend/src/components/SearchSystem.jsx:            {results.jobs?.length > 0 && (
./frontend/src/components/SearchSystem.jsx:                  Jobs ({results.jobs.length})
./frontend/src/components/SearchSystem.jsx:                  {results.jobs.map(item => (
./frontend/src/components/SearchSystem.jsx:                      onClick={() => handleResultClick(`/app/jobs/${item.id}`)}
./frontend/src/components/Navigation.jsx:    { path: "/jobs", label: "Jobs", icon: WrenchScrewdriverIcon },
./frontend/src/components/JobCard.jsx:  const [jobs, setJobs] = useState([]);
./frontend/src/components/JobCard.jsx:    loadJobs();
./frontend/src/components/JobCard.jsx:  const loadJobs = async () => {
./frontend/src/components/JobCard.jsx:      const response = await api.get('/jobs?status=pending,in_progress&limit=5');
./frontend/src/components/JobCard.jsx:      setJobs(response.data.items || []);
./frontend/src/components/JobCard.jsx:      setJobs([
./frontend/src/components/JobCard.jsx:  if (jobs.length === 0) {
./frontend/src/components/JobCard.jsx:        <p className="text-gray-500">No active jobs</p>
./frontend/src/components/JobCard.jsx:          to="/jobs/new"
./frontend/src/components/JobCard.jsx:      {jobs.map((job) => (
./frontend/src/components/JobCard.jsx:                to={`/jobs/${job.id}`}
./frontend/src/components/JobCard.jsx:          to="/jobs"
./frontend/src/components/JobCard.jsx:          View all jobs →
./frontend/src/components/TechnicianCard.jsx:          jobs_completed: 3
./frontend/src/components/TechnicianCard.jsx:          jobs_completed: 2
./frontend/src/components/TechnicianCard.jsx:          jobs_completed: 2
./frontend/src/components/TechnicianCard.jsx:                  <span>{tech.jobs_completed || 0} jobs</span>
./frontend/src/components/CustomerPortal.jsx:  const [activeJobs, setActiveJobs] = useState([]);
./frontend/src/components/CustomerPortal.jsx:    setActiveJobs([
./frontend/src/components/CustomerPortal.jsx:        {/* Active Jobs */}
./frontend/src/components/CustomerPortal.jsx:          {activeJobs.length > 0 ? (
./frontend/src/components/CustomerPortal.jsx:              {activeJobs.map((job) => (
./frontend/src/components/layout/MobileNavigation.jsx:      <button onClick={() => setActive('jobs')} className={active==='jobs'?'active':''}><FaCar /></button>
./frontend/src/components/SmartBreadcrumb.jsx:    'jobs': 'Jobs',
./frontend/src/components/Layout.jsx:    { name: 'Jobs', href: '/jobs', icon: BriefcaseIcon },
./frontend/src/config/navigation.js:    to: '/jobs',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    label: 'Jobs',
./frontend/src/config/navigation.js:    description: 'Active and completed jobs'
./frontend/src/config/navigation.js:    to: '/jobs/create',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:  { to: '/jobs', label: 'Jobs', icon: '🔧' },  // FIXED
./frontend/src/config/navigation.js:    'Job Management (/jobs)',
./frontend/src/config/navigation.js:    mainNavLinks[3], // Jobs
./frontend/src/config/navigation.js:  '/jobs': ['Dashboard', 'Jobs'],
./frontend/src/config/navigation.js:  '/jobs/create': ['Dashboard', 'Jobs', 'Create Job'],
./frontend/src/config/navigation.js:  '/jobs/edit': ['Dashboard', 'Jobs', 'Edit Job'],
./frontend/src/utils/apiEndpoints.js:  // Jobs/Work Orders
./frontend/src/utils/apiEndpoints.js:  jobs: {
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get('/api/auth/jobs', { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue('post', '/api/auth/jobs', data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/jobs/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue('put', `/api/auth/jobs/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    updateStatus: (id, data) => mutateOrQueue('patch', `/api/auth/jobs/${id}/status`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue('delete', `/api/auth/jobs/${id}`),
./frontend/src/utils/apiEndpoints.js:    addParts: (id, data) => mutateOrQueue('post', `/api/auth/jobs/${id}/parts`, data),
./frontend/src/utils/apiEndpoints.js:    addLabor: (id, data) => mutateOrQueue('post', `/api/auth/jobs/${id}/labor`, data),
./frontend/src/utils/apiEndpoints.js:    emailInvoice: (id) => mutateOrQueue('post', `/api/auth/jobs/${id}/email`, {}),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/jobs',
./frontend/src/utils/apiEndpoints.js:  // Work Orders (alias for jobs)
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get('/api/auth/jobs', { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue('post', '/api/auth/jobs', data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/jobs/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue('put', `/api/auth/jobs/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue('delete', `/api/auth/jobs/${id}`),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/jobs',
./frontend/src/utils/apiEndpoints.js:export const jobService = apiEndpoints.jobs;
./frontend/src/utils/api.js:  jobs: {
./frontend/src/utils/api.js:    getAll: (params) => api.get('/api/auth/jobs', { params }),
./frontend/src/utils/api.js:    create: (data) => api.post('/api/auth/jobs', data),
./frontend/src/utils/api.js:    getById: (id) => api.get(`/api/auth/jobs/${id}`),
./frontend/src/utils/api.js:    update: (id, data) => api.put(`/api/auth/jobs/${id}`, data),
./frontend/src/utils/api.js:    delete: (id) => api.delete(`/api/auth/jobs/${id}`),
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/jobService.js:// src/utils/services/jobService.js
./frontend/src/utils/services/jobService.js:const baseURL = '/api/jobs';
./frontend/src/utils/services/jobService.js:    return handleError(error, 'Failed to fetch jobs');
./frontend/src/utils/services/reportService.js:// Fetch a specific report by type (e.g., payroll, jobs, invoices)
./frontend/src/utils/services/index.js:import jobService from './jobService';
./frontend/src/utils/services/index.js:  jobService,
./frontend/src/utils/services/dashboardService.js:        const [customers, jobs, invoices] = await Promise.all([
./frontend/src/utils/services/dashboardService.js:          api.get('/api/auth/jobs'),
./frontend/src/utils/services/dashboardService.js:          activeJobs: jobs.data?.filter(j => j.status === 'active')?.length || 0,
./frontend/src/utils/services/dashboardService.js:          activeJobs: 0,
./frontend/src/hooks/useDataOperations.js:  jobService,
./frontend/src/hooks/useDataOperations.js:    jobs: false,
./frontend/src/hooks/useDataOperations.js:  const fetchJobs = useCallback(async () => {
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('jobs', true);
./frontend/src/hooks/useDataOperations.js:      const response = await jobService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch jobs');
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('jobs', false);
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('jobs', true);
./frontend/src/hooks/useDataOperations.js:      const response = await jobService.create(jobData);
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('jobs', false);
./frontend/src/hooks/useDataOperations.js:        fetchJobs(),
./frontend/src/hooks/useDataOperations.js:    fetchJobs,
./frontend/src/hooks/useDataOperations.js:    fetchJobs,
./frontend/src/hooks/useDataOperations.js:    updateJobStatus: async () => {},
./frontend/src/hooks/useShopData.js:  const [jobs, setJobs] = useState([]);
./frontend/src/hooks/useShopData.js:        const [customersData, vehiclesData, jobsData, estimatesData, invoicesData, appointmentsData] = 
./frontend/src/hooks/useShopData.js:            dataOps.fetchJobs().catch(() => []),
./frontend/src/hooks/useShopData.js:        setJobs(jobsData || []);
./frontend/src/hooks/useShopData.js:      const [customersData, vehiclesData, jobsData] = await Promise.all([
./frontend/src/hooks/useShopData.js:        dataOps.fetchJobs().catch(() => [])
./frontend/src/hooks/useShopData.js:      setJobs(jobsData || []);
./frontend/src/hooks/useShopData.js:    jobs,
./frontend/src/hooks/useDataOperations.js.backup:  jobService, 
./frontend/src/hooks/useDataOperations.js.backup:    jobs: false,
./frontend/src/hooks/useDataOperations.js.backup:        fetchJobs(),
./frontend/src/hooks/useDataOperations.js.backup:    fetchJobs,
./frontend/src/hooks/useDataOperations.js.backup:    fetchJobs,
./frontend/src/hooks/useDataOperations.js.backup:    updateJobStatus,
./frontend/src/contexts/DataContext.jsx:import jobService from '../utils/services/jobService';
./frontend/src/contexts/DataContext.jsx:    jobs: [],
./frontend/src/contexts/DataContext.jsx:        jobsResponse,
./frontend/src/contexts/DataContext.jsx:        jobService.getAll(),
./frontend/src/contexts/DataContext.jsx:        jobs: jobsResponse.status === 'fulfilled' ? jobsResponse.value.data : [],
./frontend/src/contexts/DataContext.jsx:      jobs: prev.jobs.map(job => 
./frontend/src/contexts/DataContext.jsx:      jobs: [...prev.jobs, newJob]
./frontend/src/contexts/DataContext.jsx:    jobService,
./frontend/src/_backups/MobileTechApp.tsx:            <p className="text-sm">Jobs Today</p>
./frontend/src/_backups/MobileTechApp.tsx:        {/* Today's Jobs */}
./frontend/src/_backups/MobileTechApp.tsx:          <h2 className="text-lg font-semibold mb-4">Today's Jobs</h2>
./frontend/src/_backups/MobileTechApp.tsx:              <span className="text-gray-600">Jobs Completed:</span>
./frontend/src/_backups/Dashboard.tsx:          { title: 'Active Jobs', value: stats?.activeJobs || 0, icon: Wrench, color: 'blue' },
./frontend/src/_backups/App.tsx:const ViewJobs = lazy(() => import('./pages/ViewJobs'))
./frontend/src/_backups/App.tsx:  const [jobs, setJobs] = React.useState([])
./frontend/src/_backups/App.tsx:    jobs,
./frontend/src/_backups/App.tsx:    setJobs
./frontend/src/_backups/App.tsx:              <Route path="jobs">
./frontend/src/_backups/App.tsx:                <Route index element={<ViewJobs />} />
./frontend/src/fix_api.sh:  // Jobs
./frontend/src/fix_api.sh:  jobs: {
./frontend/src/fix_api.sh:    getAll: (params) => api.get('/api/auth/jobs', { params }),
./frontend/src/fix_api.sh:    create: (data) => api.post('/api/auth/jobs', data),
./frontend/src/fix_api.sh:    getById: (job_id) => api.get(`/api/auth/jobs/${job_id}`),
./frontend/src/fix_api.sh:    updateStatus: (job_id, data) => api.patch(`/api/auth/jobs/${job_id}/status`, data),
./frontend/src/fix_api.sh:    addParts: (job_id, data) => api.post(`/api/auth/jobs/${job_id}/parts`, data),
./frontend/src/fix_api.sh:    addLabor: (job_id, data) => api.post(`/api/auth/jobs/${job_id}/labor`, data),
./frontend/src/fix_api.sh:// Jobs
./frontend/src/fix_api.sh:export const jobs_get = (params) => apiEndpoints.jobs.getAll(params);
./frontend/src/fix_api.sh:export const jobs_post = (data) => apiEndpoints.jobs.create(data);
./frontend/src/fix_api.sh:export const jobs_int_job_id_get = (job_id) => apiEndpoints.jobs.getById(job_id);
./frontend/src/fix_api.sh:export const jobs_int_job_id_status_patch = (job_id, data) => apiEndpoints.jobs.updateStatus(job_id, data);
./frontend/src/fix_api.sh:export const jobs_int_job_id_parts_post = (job_id, data) => apiEndpoints.jobs.addParts(job_id, data);
./frontend/src/fix_api.sh:export const jobs_int_job_id_labor_post = (job_id, data) => apiEndpoints.jobs.addLabor(job_id, data);
./frontend/src/fix_api.sh:export const jobService = apiEndpoints.jobs;
./frontend/src/types/index.ts:  activeJobs: number;
./frontend/src/types/index.ts:  activeJobsChange: number;
./frontend/src/App-20250831_000053.jsx:  Jobs,
./frontend/src/App-20250831_000053.jsx:              <Route path="jobs" element={<Jobs />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="jobs/:id" element={<JobDetail />} />
./frontend/src/index.js:export { default as ViewJobs } from './pages/ViewJobs';
./frontend/src/index.js:export { default as Jobs } from './pages/Jobs';

---- appointments ----
./frontend/src/App.jsx:              <Route path="/appointments" element={<AppointmentCalendar />} />
./frontend/src/pages/Dashboard.jsx:  const { customers, vehicles, jobs, estimates, invoices, appointments } = data || {};
./frontend/src/pages/Dashboard.jsx:    todayAppointments: hasRealData
./frontend/src/pages/Dashboard.jsx:      ? (appointments?.filter(apt => {
./frontend/src/pages/Dashboard.jsx:            title="Today's Appointments"
./frontend/src/pages/Dashboard.jsx:            value={stats.todayAppointments}
./frontend/src/pages/Dashboard.jsx:            href="/appointments"
./frontend/src/pages/Landing.jsx:  const handleAppointmentSubmit = async (e) => {
./frontend/src/pages/Landing.jsx:      const response = await fetch("/api/appointments", {
./frontend/src/pages/Landing.jsx:            <form onSubmit={handleAppointmentSubmit} className="space-y-4">
./frontend/src/pages/AppointmentCalendar.jsx:  const [appointments, setAppointments] = useState([]);
./frontend/src/pages/AppointmentCalendar.jsx:  const [filteredAppointments, setFilteredAppointments] = useState([]);
./frontend/src/pages/AppointmentCalendar.jsx:    loadAppointments();
./frontend/src/pages/AppointmentCalendar.jsx:  const loadAppointments = async () => {
./frontend/src/pages/AppointmentCalendar.jsx:      const sampleAppointments = [
./frontend/src/pages/AppointmentCalendar.jsx:      setAppointments(sampleAppointments);
./frontend/src/pages/AppointmentCalendar.jsx:      setFilteredAppointments(sampleAppointments);
./frontend/src/pages/AppointmentCalendar.jsx:  // Filter appointments based on search and filters
./frontend/src/pages/AppointmentCalendar.jsx:    let filtered = appointments;
./frontend/src/pages/AppointmentCalendar.jsx:    setFilteredAppointments(filtered);
./frontend/src/pages/AppointmentCalendar.jsx:  }, [appointments, searchTerm, statusFilter, serviceFilter]);
./frontend/src/pages/AppointmentCalendar.jsx:          <p className="text-gray-600">Loading appointments...</p>
./frontend/src/pages/AppointmentCalendar.jsx:          <p className="text-gray-600 mt-2">Manage customer appointments and scheduling</p>
./frontend/src/pages/AppointmentCalendar.jsx:              placeholder="Search appointments..."
./frontend/src/pages/AppointmentCalendar.jsx:            title: 'Today\'s Appointments', 
./frontend/src/pages/AppointmentCalendar.jsx:      {/* Appointments List */}
./frontend/src/pages/AppointmentCalendar.jsx:            Upcoming Appointments ({filteredAppointments.length})
./frontend/src/pages/AppointmentCalendar.jsx:        {filteredAppointments.length === 0 ? (
./frontend/src/pages/AppointmentCalendar.jsx:            <h3 className="text-lg font-medium text-gray-900 mb-2">No appointments found</h3>
./frontend/src/pages/AppointmentCalendar.jsx:            {filteredAppointments.map((appointment) => (
./frontend/src/pages/AppointmentCalendar.jsx:            setAppointments(prev => [...prev, { ...newAppointment, id: Date.now() }]);
./frontend/src/pages/NotFound.jsx:            <Link to="/appointments" className="text-blue-600 hover:text-blue-800 hover:underline">
./frontend/src/pages/NotFound.jsx:              Appointments
./frontend/src/pages/AppointmentCalendar/index.jsx:  const [appointments, setAppointments] = useState([]);
./frontend/src/pages/AppointmentCalendar/index.jsx:  const addAppointment = (data) => setAppointments([...appointments, data]);
./frontend/src/pages/AppointmentCalendar/index.jsx:  const updateAppointment = (updated) => setAppointments(appointments.map(a => a.id === updated.id ? updated : a));
./frontend/src/pages/AppointmentCalendar/index.jsx:  const deleteAppointment = (id) => setAppointments(appointments.filter(a => a.id !== id));
./frontend/src/pages/AppointmentCalendar/index.jsx:        <h1 className="text-3xl font-bold">Appointments</h1>
./frontend/src/pages/AppointmentCalendar/index.jsx:        {appointments.map((a) => (
./frontend/src/pages/AppointmentCalendar/index.jsx:        {appointments.length === 0 && <p className="text-gray-500 col-span-full">No appointments scheduled</p>}
./frontend/src/pages/Dashboard.jsx.before-fix:    appointments,
./frontend/src/pages/Dashboard.jsx.before-fix:        todayAppointments: appointments?.filter(apt => {
./frontend/src/pages/Dashboard.jsx.before-fix:        todayAppointments: 3,
./frontend/src/pages/Dashboard.jsx.before-fix:  }, [customers, vehicles, jobs, estimates, invoices, appointments]);
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Today's Appointments"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.todayAppointments}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/appointments"
./frontend/src/components/Navbar.jsx:            <Link to="/appointments" className="nav-link">Appointments</Link>
./frontend/src/components/Navbar.jsx:          <Link to="/appointments" className="nav-link block">Appointments</Link>
./frontend/src/components/Navigation.jsx:    { path: "/appointments", label: "Appointments", icon: CalendarIcon },
./frontend/src/components/AppointmentCard.jsx:  const [appointments, setAppointments] = useState([]);
./frontend/src/components/AppointmentCard.jsx:    loadAppointments();
./frontend/src/components/AppointmentCard.jsx:  const loadAppointments = async () => {
./frontend/src/components/AppointmentCard.jsx:      const response = await api.get(`/appointments?date=${today}&limit=5`);
./frontend/src/components/AppointmentCard.jsx:      setAppointments(response.data.items || []);
./frontend/src/components/AppointmentCard.jsx:      setAppointments([
./frontend/src/components/AppointmentCard.jsx:  if (appointments.length === 0) {
./frontend/src/components/AppointmentCard.jsx:        <p className="text-gray-500">No appointments today</p>
./frontend/src/components/AppointmentCard.jsx:          to="/appointments/new"
./frontend/src/components/AppointmentCard.jsx:      {appointments.map((appointment) => (
./frontend/src/components/AppointmentCard.jsx:                to={`/appointments/${appointment.id}`}
./frontend/src/components/AppointmentCard.jsx:          to="/appointments"
./frontend/src/components/AppointmentCard.jsx:          View all appointments →
./frontend/src/components/AppointmentBar.jsx:  const [todayAppointments, setTodayAppointments] = useState([]);
./frontend/src/components/AppointmentBar.jsx:  // FIX: Load real appointments from API
./frontend/src/components/AppointmentBar.jsx:    const loadTodayAppointments = async () => {
./frontend/src/components/AppointmentBar.jsx:        const response = await apiEndpoints.appointments.getAll({
./frontend/src/components/AppointmentBar.jsx:        const appointments = response.data || [];
./frontend/src/components/AppointmentBar.jsx:        setTodayAppointments(appointments);
./frontend/src/components/AppointmentBar.jsx:        const upcoming = appointments.find(apt => {
./frontend/src/components/AppointmentBar.jsx:        setCurrentAppointment(upcoming || appointments[0] || null);
./frontend/src/components/AppointmentBar.jsx:        console.error('Failed to load appointments:', error);
./frontend/src/components/AppointmentBar.jsx:        setTodayAppointments([]);
./frontend/src/components/AppointmentBar.jsx:    loadTodayAppointments();
./frontend/src/components/AppointmentBar.jsx:    const interval = setInterval(loadTodayAppointments, 5 * 60 * 1000);
./frontend/src/components/AppointmentBar.jsx:          <span className="text-sm text-gray-400">Loading appointments...</span>
./frontend/src/components/AppointmentBar.jsx:            Today's Appointments ({todayAppointments.length})
./frontend/src/components/AppointmentBar.jsx:          <span className="text-gray-400 text-sm">No appointments today</span>
./frontend/src/components/CustomerPortal.jsx:          <p className="text-gray-600">Track your vehicle services and schedule appointments</p>
./frontend/src/components/SmartBreadcrumb.jsx:    'appointments': 'Appointments',
./frontend/src/components/Layout.jsx:    { name: 'Appointments', href: '/appointments', icon: CalendarIcon },
./frontend/src/config/navigation.js:    to: '/appointments',  // matches App.jsx
./frontend/src/config/navigation.js:    label: 'Appointments',
./frontend/src/config/navigation.js:    'Appointment Scheduling (/appointments)'
./frontend/src/config/navigation.js:  '/appointments': ['Dashboard', 'Appointments'],
./frontend/src/utils/apiEndpoints.js:  // Appointments
./frontend/src/utils/apiEndpoints.js:  appointments: {
./frontend/src/utils/apiEndpoints.js:    getAll: (params) => api.get("/api/auth/appointments", { params }),
./frontend/src/utils/apiEndpoints.js:    create: (data) => mutateOrQueue("post", "/api/auth/appointments", data),
./frontend/src/utils/apiEndpoints.js:    getById: (id) => api.get(`/api/auth/appointments/${id}`),
./frontend/src/utils/apiEndpoints.js:    update: (id, data) => mutateOrQueue("put", `/api/auth/appointments/${id}`, data),
./frontend/src/utils/apiEndpoints.js:    delete: (id) => mutateOrQueue("delete", `/api/auth/appointments/${id}`),
./frontend/src/utils/apiEndpoints.js:    list: '/api/auth/appointments',
./frontend/src/utils/apiEndpoints.js:export const appointmentService = apiEndpoints.appointments;
./frontend/src/utils/api.js:  appointments: {
./frontend/src/utils/api.js:    getAll: (params) => api.get('/api/auth/appointments', { params }),
./frontend/src/utils/api.js:    create: (data) => api.post('/api/auth/appointments', data),
./frontend/src/utils/api.js:    getById: (id) => api.get(`/api/auth/appointments/${id}`),
./frontend/src/utils/api.js:    update: (id, data) => api.put(`/api/auth/appointments/${id}`, data),
./frontend/src/utils/api.js:    delete: (id) => api.delete(`/api/auth/appointments/${id}`),
./frontend/src/utils/index.js:export { customerService, vehicleService, jobService, estimateService, invoiceService, appointmentService, timeclockService, reportsService, dashboardService } from './services';
./frontend/src/utils/services/appointmentService.js:// src/utils/services/appointmentService.js
./frontend/src/utils/services/appointmentService.js:const baseURL = '/api/appointments';
./frontend/src/utils/services/appointmentService.js:    return handleError(error, 'Failed to fetch appointments');
./frontend/src/utils/services/index.js:import appointmentService from './appointmentService';
./frontend/src/utils/services/index.js:  appointmentService,
./frontend/src/hooks/useDataOperations.js:  appointmentService,
./frontend/src/hooks/useDataOperations.js:    appointments: false,
./frontend/src/hooks/useDataOperations.js:  const fetchAppointments = useCallback(async () => {
./frontend/src/hooks/useDataOperations.js:    setSpecificLoading('appointments', true);
./frontend/src/hooks/useDataOperations.js:      const response = await appointmentService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch appointments');
./frontend/src/hooks/useDataOperations.js:      setSpecificLoading('appointments', false);
./frontend/src/hooks/useDataOperations.js:        fetchAppointments(),
./frontend/src/hooks/useDataOperations.js:    fetchAppointments,
./frontend/src/hooks/useDataOperations.js:    fetchAppointments,
./frontend/src/hooks/useShopData.js:  const [appointments, setAppointments] = useState([]);
./frontend/src/hooks/useShopData.js:        const [customersData, vehiclesData, jobsData, estimatesData, invoicesData, appointmentsData] = 
./frontend/src/hooks/useShopData.js:            dataOps.fetchAppointments().catch(() => [])
./frontend/src/hooks/useShopData.js:        setAppointments(appointmentsData || []);
./frontend/src/hooks/useShopData.js:    appointments,
./frontend/src/hooks/useDataOperations.js.backup:  appointmentService,
./frontend/src/hooks/useDataOperations.js.backup:    appointments: false,
./frontend/src/hooks/useDataOperations.js.backup:        fetchAppointments(),
./frontend/src/hooks/useDataOperations.js.backup:    fetchAppointments,
./frontend/src/hooks/useDataOperations.js.backup:    fetchAppointments,
./frontend/src/contexts/DataContext.jsx:import appointmentService from '../utils/services/appointmentService';
./frontend/src/contexts/DataContext.jsx:    appointments: []
./frontend/src/contexts/DataContext.jsx:        appointmentsResponse
./frontend/src/contexts/DataContext.jsx:        appointmentService.getAll()
./frontend/src/contexts/DataContext.jsx:        appointments: appointmentsResponse.status === 'fulfilled' ? appointmentsResponse.value.data : []
./frontend/src/contexts/DataContext.jsx:    appointmentService,
./frontend/src/_backups/Dashboard.tsx:            {stats?.todayAppointments?.map((appointment: any, index: number) => (
./frontend/src/_backups/App.tsx:              <Route path="appointments" element={<AppointmentCalendar />} />
./frontend/src/types/index.ts:  todayAppointments: Appointment[];
./frontend/src/App-20250831_000053.jsx:              <Route path="appointments" element={<AppointmentCalendar />} />

---- ai ----
./frontend/src/styles/print.css:  .print-container {
./frontend/src/index.css:@tailwind base;
./frontend/src/index.css:@tailwind components;
./frontend/src/index.css:@tailwind utilities;
./frontend/src/App.jsx:import CustomerDetail from './pages/CustomerDetail';
./frontend/src/App.jsx:import VehicleDetail from './pages/VehicleDetail';
./frontend/src/App.jsx:import JobDetail from './pages/JobDetail';
./frontend/src/App.jsx:import EstimateDetail from './pages/EstimateDetail';
./frontend/src/App.jsx:import EstimateAI from './pages/EstimateAI';
./frontend/src/App.jsx:import InvoiceDetail from './pages/InvoiceDetail';
./frontend/src/App.jsx:import AIDiagnostics from './pages/AIDiagnostics';
./frontend/src/App.jsx:              <Route path="/customers/:id" element={<CustomerDetail />} />
./frontend/src/App.jsx:              <Route path="/vehicles/:id" element={<VehicleDetail />} />
./frontend/src/App.jsx:              <Route path="/jobs/:id" element={<JobDetail />} />
./frontend/src/App.jsx:              <Route path="/estimates/ai" element={<EstimateAI />} />
./frontend/src/App.jsx:              <Route path="/estimates/:id" element={<EstimateDetail />} />
./frontend/src/App.jsx:              <Route path="/invoices/:id" element={<InvoiceDetail />} />
./frontend/src/App.jsx:              <Route path="/ai-diagnostics" element={<AIDiagnostics />} />
./frontend/src/pages/Invoice.jsx:      'Waiting for Parts': 'bg-orange-100 text-orange-800',
./frontend/src/pages/Invoice.jsx:        const job = await apiEndpoints.jobs.getById(jobId);
./frontend/src/pages/Invoice.jsx:        const [vehicle, customer] = await Promise.all([
./frontend/src/pages/Invoice.jsx:            email: customer.email || 'N/A',
./frontend/src/pages/Invoice.jsx:        showMessage("Failed to load invoice: " + err.message, 'error');
./frontend/src/pages/Invoice.jsx:      .set({ margin: 0.5, filename: `invoice-${jobId}.pdf`, html2canvas: { scale: 2 }, jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' } })
./frontend/src/pages/Invoice.jsx:  const handleEmailInvoice = () => {
./frontend/src/pages/Invoice.jsx:    showCustomConfirm("Email this invoice to the customer?", async () => {
./frontend/src/pages/Invoice.jsx:        await apiEndpoints.jobs.emailInvoice?.(jobId) // TODO: Add emailInvoice method;
./frontend/src/pages/Invoice.jsx:        showMessage("Invoice emailed successfully", "success");
./frontend/src/pages/Invoice.jsx:        showMessage("Error emailing invoice: " + err.message, "error");
./frontend/src/pages/Invoice.jsx:    return <div className="p-6 text-red-600 text-center">Invoice not found or failed to load.</div>;
./frontend/src/pages/Invoice.jsx:          <p><strong>Email:</strong> {invoiceData.customer.email}</p>
./frontend/src/pages/Invoice.jsx:      {/* Work Order Details */}
./frontend/src/pages/Invoice.jsx:        <button onClick={handleEmailInvoice} className="bg-blue-600 text-white px-4 py-2 rounded shadow hover:bg-blue-700">📧 Email</button>
./frontend/src/pages/CustomerList.jsx:      const data = await customerService.getAll();
./frontend/src/pages/CustomerList.jsx:            email: customer.email || '',
./frontend/src/pages/CustomerList.jsx:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx:        customer.email?.toLowerCase().includes(searchLower) ||
./frontend/src/pages/CustomerList.jsx:      await customerService.deleteCustomer(customer.id);
./frontend/src/pages/CustomerList.jsx:      await Promise.all(
./frontend/src/pages/CustomerList.jsx:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/CustomerList.jsx:        c.email,
./frontend/src/pages/CustomerList.jsx:                  Try Again
./frontend/src/pages/CustomerList.jsx:                      <p className="text-sm text-gray-600">{customer.email}</p>
./frontend/src/pages/AddVehicle.jsx:          const response = await apiEndpoints.vehicles.getById(vehicleId);
./frontend/src/pages/AddVehicle.jsx:        alert("Failed to load vehicle data: " + error.message);
./frontend/src/pages/AddVehicle.jsx:        const email = customer.email?.toLowerCase() || '';
./frontend/src/pages/AddVehicle.jsx:               email.includes(search);
./frontend/src/pages/AddVehicle.jsx:        await apiEndpoints.vehicles.update(vehicleId, dataToSend);
./frontend/src/pages/AddVehicle.jsx:        await apiEndpoints.vehicles.create(dataToSend);
./frontend/src/pages/AddVehicle.jsx:      await refreshData();
./frontend/src/pages/AddVehicle.jsx:              {vehicleId ? 'Update vehicle information' : 'Enter vehicle details below'}
./frontend/src/pages/AddVehicle.jsx:                  placeholder="Search customers by name, phone, or email..."
./frontend/src/pages/AddVehicle.jsx:                          {customer.phone} • {customer.email}
./frontend/src/pages/AddVehicle.jsx:                      await apiEndpoints.vehicles.create(dataToSend);
./frontend/src/pages/AddVehicle.jsx:                      await refreshData();
./frontend/src/pages/CreateJob.jsx:  const [aiDiagnosing, setAiDiagnosing] = useState(false);
./frontend/src/pages/CreateJob.jsx:  const [aiResults, setAiResults] = useState(null);
./frontend/src/pages/CreateJob.jsx:  const [aiProvider, setAiProvider] = useState('openai'); // openai, openrouter, or huggingface
./frontend/src/pages/CreateJob.jsx:        const customersResponse = await fetch('/api/auth/customers');
./frontend/src/pages/CreateJob.jsx:          const customersData = await customersResponse.json();
./frontend/src/pages/CreateJob.jsx:        const vehiclesResponse = await fetch('/api/auth/vehicles');
./frontend/src/pages/CreateJob.jsx:          const vehiclesData = await vehiclesResponse.json();
./frontend/src/pages/CreateJob.jsx:        const techniciansResponse = await fetch('/api/technicians');
./frontend/src/pages/CreateJob.jsx:          const techniciansData = await techniciansResponse.json();
./frontend/src/pages/CreateJob.jsx:        // Fallback to demo data if API fails
./frontend/src/pages/CreateJob.jsx:          { id: 1, name: 'John Smith', phone: '555-0123', email: 'john@email.com', vip: true, totalJobs: 15, avgSpend: 850 },
./frontend/src/pages/CreateJob.jsx:          { id: 2, name: 'Sarah Johnson', phone: '555-0456', email: 'sarah@email.com', vip: false, totalJobs: 3, avgSpend: 420 },
./frontend/src/pages/CreateJob.jsx:          { id: 1, name: 'Eddie Martinez', specialty: 'Engine Diagnostics', rating: 4.9, available: true },
./frontend/src/pages/CreateJob.jsx:          { id: 2, name: 'Carlos Rodriguez', specialty: 'Transmission', rating: 4.8, available: true },
./frontend/src/pages/CreateJob.jsx:    customer.email.toLowerCase().includes(customerSearch.toLowerCase())
./frontend/src/pages/CreateJob.jsx:  // REAL AI DIAGNOSIS - Multi-Provider with Fallbacks
./frontend/src/pages/CreateJob.jsx:  const handleAiDiagnosis = async () => {
./frontend/src/pages/CreateJob.jsx:    setAiDiagnosing(true);
./frontend/src/pages/CreateJob.jsx:      let aiResponse = null;
./frontend/src/pages/CreateJob.jsx:      // Try OpenAI first (premium)
./frontend/src/pages/CreateJob.jsx:      if (aiProvider === 'openai') {
./frontend/src/pages/CreateJob.jsx:          const response = await fetch('/api/ai/openai-diagnosis', {
./frontend/src/pages/CreateJob.jsx:              prompt: `As an expert automotive technician, diagnose this vehicle issue and provide a detailed repair estimate:\n\n${fullContext}\n\nProvide diagnosis, recommendations, parts needed, labor estimate, and time estimate.`,
./frontend/src/pages/CreateJob.jsx:            aiResponse = await response.json();
./frontend/src/pages/CreateJob.jsx:            throw new Error('OpenAI failed');
./frontend/src/pages/CreateJob.jsx:      if (!aiResponse) {
./frontend/src/pages/CreateJob.jsx:          const response = await fetch('/api/ai/openrouter-diagnosis', {
./frontend/src/pages/CreateJob.jsx:              model: "anthropic/claude-3.5-sonnet", // or "openai/gpt-4"
./frontend/src/pages/CreateJob.jsx:            aiResponse = await response.json();
./frontend/src/pages/CreateJob.jsx:            throw new Error('OpenRouter failed');
./frontend/src/pages/CreateJob.jsx:      if (!aiResponse) {
./frontend/src/pages/CreateJob.jsx:          const response = await fetch('/api/ai/huggingface-diagnosis', {
./frontend/src/pages/CreateJob.jsx:              inputs: `Automotive diagnosis for ${vehicleContext}. Problem: ${problemDescription}. Provide diagnosis and repair estimate.`,
./frontend/src/pages/CreateJob.jsx:            aiResponse = await response.json();
./frontend/src/pages/CreateJob.jsx:            throw new Error('All AI providers failed');
./frontend/src/pages/CreateJob.jsx:      if (!aiResponse) {
./frontend/src/pages/CreateJob.jsx:        aiResponse = generateRuleBasedDiagnosis();
./frontend/src/pages/CreateJob.jsx:      setAiResults(aiResponse);
./frontend/src/pages/CreateJob.jsx:      // Auto-populate from AI
./frontend/src/pages/CreateJob.jsx:      if (aiResponse.suggestedParts) {
./frontend/src/pages/CreateJob.jsx:        setParts(aiResponse.suggestedParts);
./frontend/src/pages/CreateJob.jsx:      if (aiResponse.laborEstimate) {
./frontend/src/pages/CreateJob.jsx:        setLaborCost(aiResponse.laborEstimate.toString());
./frontend/src/pages/CreateJob.jsx:      if (aiResponse.timeEstimate) {
./frontend/src/pages/CreateJob.jsx:        const hours = aiResponse.timeEstimate.replace(/[^0-9.]/g, '');
./frontend/src/pages/CreateJob.jsx:      if (aiResponse.priority) {
./frontend/src/pages/CreateJob.jsx:        setJobPriority(aiResponse.priority);
./frontend/src/pages/CreateJob.jsx:      alert('AI diagnosis failed. Please check your API configuration.');
./frontend/src/pages/CreateJob.jsx:      setAiDiagnosing(false);
./frontend/src/pages/CreateJob.jsx:      const response = await fetch('/api/carfax/report', {
./frontend/src/pages/CreateJob.jsx:        const data = await response.json();
./frontend/src/pages/CreateJob.jsx:        // Mock data if CarFax API unavailable
./frontend/src/pages/CreateJob.jsx:        error: 'CarFax service unavailable'
./frontend/src/pages/CreateJob.jsx:      const response = await fetch('/api/obd2/lookup', {
./frontend/src/pages/CreateJob.jsx:        const data = await response.json();
./frontend/src/pages/CreateJob.jsx:        // Mock OBD2 data if service unavailable
./frontend/src/pages/CreateJob.jsx:      alert('OBD2 lookup service unavailable');
./frontend/src/pages/CreateJob.jsx:      const response = await fetch('/api/wiring-diagrams', {
./frontend/src/pages/CreateJob.jsx:        const data = await response.json();
./frontend/src/pages/CreateJob.jsx:        // Mock diagrams if service unavailable
./frontend/src/pages/CreateJob.jsx:          { system: 'Lighting System', description: 'Headlight and tail light circuits', url: '/diagrams/lighting.pdf' }
./frontend/src/pages/CreateJob.jsx:        aiDiagnosis: aiResults,
./frontend/src/pages/CreateJob.jsx:      const response = await fetch('/api/auth/jobs', {
./frontend/src/pages/CreateJob.jsx:        const savedJob = await response.json();
./frontend/src/pages/CreateJob.jsx:        throw new Error('Failed to save job');
./frontend/src/pages/CreateJob.jsx:      alert('Failed to save job. Please try again.');
./frontend/src/pages/CreateJob.jsx:            <p className="text-gray-400 mt-2">LIVE AI-Powered • Real CarFax • Live OBD2 • Pro Wiring</p>
./frontend/src/pages/CreateJob.jsx:              <span>Multi-AI Ready</span>
./frontend/src/pages/CreateJob.jsx:                  placeholder="Search by name, phone, or email..."
./frontend/src/pages/CreateJob.jsx:                            <div className="text-sm text-gray-400">{customer.phone} • {customer.email}</div>
./frontend/src/pages/CreateJob.jsx:            {/* Problem Description & AI */}
./frontend/src/pages/CreateJob.jsx:                placeholder="Describe the vehicle's problem in detail..."
./frontend/src/pages/CreateJob.jsx:              {/* AI Provider Selection */}
./frontend/src/pages/CreateJob.jsx:                <label className="text-xs text-gray-400 mb-2 block">AI Provider:</label>
./frontend/src/pages/CreateJob.jsx:                  value={aiProvider}
./frontend/src/pages/CreateJob.jsx:                  onChange={(e) => setAiProvider(e.target.value)}
./frontend/src/pages/CreateJob.jsx:                  <option value="openai">OpenAI GPT-4 (Premium)</option>
./frontend/src/pages/CreateJob.jsx:              {/* LIVE AI Diagnosis Button */}
./frontend/src/pages/CreateJob.jsx:                onClick={handleAiDiagnosis}
./frontend/src/pages/CreateJob.jsx:                disabled={aiDiagnosing || !problemDescription.trim() || !selectedVehicle}
./frontend/src/pages/CreateJob.jsx:                {aiDiagnosing ? (
./frontend/src/pages/CreateJob.jsx:                    LIVE AI Analyzing... ({aiProvider.toUpperCase()})
./frontend/src/pages/CreateJob.jsx:                    Get LIVE AI Professional Diagnosis
./frontend/src/pages/CreateJob.jsx:            {/* AI Results */}
./frontend/src/pages/CreateJob.jsx:            {aiResults && (
./frontend/src/pages/CreateJob.jsx:                  LIVE AI Professional Diagnosis ({aiProvider.toUpperCase()})
./frontend/src/pages/CreateJob.jsx:                <p className="text-gray-300 mb-4">{aiResults.diagnosis}</p>
./frontend/src/pages/CreateJob.jsx:                  {aiResults.recommendations?.map((rec, index) => (
./frontend/src/pages/CreateJob.jsx:                    <span className="text-purple-300">Confidence: {aiResults.confidence}</span>
./frontend/src/pages/CreateJob.jsx:                    {aiResults.urgency && (
./frontend/src/pages/CreateJob.jsx:                        aiResults.urgency === 'SAFETY CRITICAL' ? 'bg-red-500/20 text-red-400' : 'bg-yellow-500/20 text-yellow-400'
./frontend/src/pages/CreateJob.jsx:                        {aiResults.urgency}
./frontend/src/pages/CreateJob.jsx:                  <span className="font-semibold text-green-400">Est. Total: {aiResults.estimatedTotal}</span>
./frontend/src/pages/CreateJob.jsx:                {technicians.filter(tech => tech.available).map(tech => (
./frontend/src/pages/CreateJob.jsx:            {/* Job Details */}
./frontend/src/pages/CreateJob.jsx:              <h3 className="text-lg font-semibold mb-4">Job Details</h3>
./frontend/src/pages/ViewJobs.jsx:// (Pagination component can remain the same)
./frontend/src/pages/ViewJobs.jsx:      await jobOps.delete(jobToDelete.id);
./frontend/src/pages/ViewJobs.jsx:          {/*... (Table Head remains the same)... */}
./frontend/src/pages/ViewJobs.jsx:      {/*... (Pagination and ConfirmModal remain the same, powered by filteredJobs.length)... */}
./frontend/src/pages/Login.jsx:    email: '',
./frontend/src/pages/Login.jsx:    if (!formData.email.trim()) {
./frontend/src/pages/Login.jsx:      newErrors.email = 'Email is required';
./frontend/src/pages/Login.jsx:    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
./frontend/src/pages/Login.jsx:      newErrors.email = 'Please enter a valid email address';
./frontend/src/pages/Login.jsx:      const result = await login(formData.email, formData.password);
./frontend/src/pages/Login.jsx:        setErrors({ general: result.error || 'Login failed. Please check your credentials.' });
./frontend/src/pages/Login.jsx:      setErrors({ general: 'Login error. Please try again.' });
./frontend/src/pages/Login.jsx:      const result = await login('admin@eddies.com', 'admin123');
./frontend/src/pages/Login.jsx:        setErrors({ general: result.error || 'Quick login failed.' });
./frontend/src/pages/Login.jsx:      setErrors({ general: 'Quick login failed.' });
./frontend/src/pages/Login.jsx:        {/* Form Container */}
./frontend/src/pages/Login.jsx:            {/* Email Field */}
./frontend/src/pages/Login.jsx:                <User className="w-4 h-4" /> Email Address
./frontend/src/pages/Login.jsx:                type="email"
./frontend/src/pages/Login.jsx:                value={formData.email}
./frontend/src/pages/Login.jsx:                onChange={(e) => handleInputChange('email', e.target.value.toLowerCase())}
./frontend/src/pages/Login.jsx:                placeholder="Enter your email"
./frontend/src/pages/Login.jsx:                autoComplete="email"
./frontend/src/pages/Login.jsx:              {errors.email && (
./frontend/src/pages/Login.jsx:                  {errors.email}
./frontend/src/pages/Dashboard.jsx:  Clipboard, Database, Sparkles, Brain, Settings, Zap, X
./frontend/src/pages/Dashboard.jsx:  const [showAIPanel, setShowAIPanel] = useState(false);
./frontend/src/pages/Dashboard.jsx:    unpaidInvoices: hasRealData
./frontend/src/pages/Dashboard.jsx:      ? (invoices?.filter(inv => inv.status !== 'paid' && inv.status !== 'cancelled')?.length || 0)
./frontend/src/pages/Dashboard.jsx:      await refreshData();
./frontend/src/pages/Dashboard.jsx:      console.error('Refresh failed:', err);
./frontend/src/pages/Dashboard.jsx:      {/* Main Content */}
./frontend/src/pages/Dashboard.jsx:            title="Unpaid Invoices"
./frontend/src/pages/Dashboard.jsx:            value={stats.unpaidInvoices}
./frontend/src/pages/Dashboard.jsx:            title="AI Diagnostics"
./frontend/src/pages/Dashboard.jsx:            value="Available"
./frontend/src/pages/Dashboard.jsx:            icon={Brain}
./frontend/src/pages/Dashboard.jsx:            href="/ai-diagnostics"
./frontend/src/pages/Dashboard.jsx:      {/* AI Panel Modal */}
./frontend/src/pages/Dashboard.jsx:      {showAIPanel && (
./frontend/src/pages/Dashboard.jsx:                  AI Assistant
./frontend/src/pages/Dashboard.jsx:                  onClick={() => setShowAIPanel(false)}
./frontend/src/pages/Dashboard.jsx:                Get AI-powered assistance for diagnostics, estimates, and more.
./frontend/src/pages/Dashboard.jsx:                    handleNavigation('/ai-diagnostics');
./frontend/src/pages/Dashboard.jsx:                    setShowAIPanel(false);
./frontend/src/pages/Dashboard.jsx:                  <Brain className="h-5 w-5 text-blue-600 inline mr-2" />
./frontend/src/pages/Dashboard.jsx:                  AI Diagnostics
./frontend/src/pages/Dashboard.jsx:                  onClick={() => setShowAIPanel(false)}
./frontend/src/pages/Dashboard.jsx:      {/* Floating AI Button */}
./frontend/src/pages/Dashboard.jsx:        onClick={() => setShowAIPanel(true)}
./frontend/src/pages/Dashboard.jsx:        title="AI Assistant"
./frontend/src/pages/VehicleList.jsx:      console.warn('Clipboard not available or no text provided');
./frontend/src/pages/VehicleList.jsx:        await vehicleOps.delete(vehicleToDelete.id);
./frontend/src/pages/VehicleList.jsx:            Data operations hook not available
./frontend/src/pages/VehicleList.jsx:  // Error state if data operations failed
./frontend/src/pages/VehicleList.jsx:          Please check the console for more details
./frontend/src/pages/Landing.jsx:    const requiredFields = ['name', 'phone', 'email', 'vehicle', 'service', 'date', 'time'];
./frontend/src/pages/Landing.jsx:      const response = await fetch("/api/appointments", {
./frontend/src/pages/Landing.jsx:      const result = await response.json();
./frontend/src/pages/Landing.jsx:          (result.email_sent ? ' A confirmation email has been sent to you.' : '')
./frontend/src/pages/Landing.jsx:        alert(`Failed to schedule appointment: ${result.error || 'Unknown error'}`);
./frontend/src/pages/Landing.jsx:      alert('Failed to schedule appointment. Please try again or call us at (661) 327-4242');
./frontend/src/pages/Landing.jsx:  // LOADING CONDITION BEFORE MAIN RETURN
./frontend/src/pages/Landing.jsx:  // SINGLE MAIN RETURN
./frontend/src/pages/Landing.jsx:                <a href="mailto:56chevyeddiefasteddie@gmail.com" className="hover:text-white transition-colors">56chevyeddiefasteddie@gmail.com</a>
./frontend/src/pages/Landing.jsx:              Racing precision applied to every job - from routine maintenance to complex repairs.
./frontend/src/pages/Landing.jsx:                { icon: "🛢️", title: "Oil Changes & Maintenance", description: "Premium oils and filters for optimal engine performance." },
./frontend/src/pages/Landing.jsx:                { icon: "🛑", title: "Brake Service", description: "Professional brake repair - your safety is our priority." },
./frontend/src/pages/Landing.jsx:                { icon: "❄️", title: "AC & Heating", description: "Climate control system repair for year-round comfort." },
./frontend/src/pages/Landing.jsx:                { icon: "⚡", title: "Electrical Systems", description: "Complete electrical diagnostics and repair services." },
./frontend/src/pages/Landing.jsx:                { icon: "🔧", title: "Engine Diagnostics", description: "Advanced computer diagnostics for accurate repairs." },
./frontend/src/pages/Landing.jsx:                <label className="block text-blue-300 mb-2 font-semibold">Email:</label>
./frontend/src/pages/Landing.jsx:                  type="email"
./frontend/src/pages/Landing.jsx:                  name="email"
./frontend/src/pages/Landing.jsx:                  placeholder="your@email.com"
./frontend/src/pages/Landing.jsx:                  <option value="ac-repair">AC/Heating Repair</option>
./frontend/src/pages/Landing.jsx:                  <option value="general-repair">General Repair</option>
./frontend/src/pages/Landing.jsx:                  <option value="maintenance">Scheduled Maintenance</option>
./frontend/src/pages/Landing.jsx:              <p className="text-red-300 text-sm">For urgent repairs, please call: (661) 327-4242</p>
./frontend/src/pages/Register.jsx:import { Car, Key, Eye, EyeOff, UserPlus, Loader2, AlertCircle, User, Mail, Phone, ArrowLeft } from 'lucide-react';
./frontend/src/pages/Register.jsx:    email: '', 
./frontend/src/pages/Register.jsx:    if (!formData.email.trim()) {
./frontend/src/pages/Register.jsx:      newErrors.email = 'Email is required';
./frontend/src/pages/Register.jsx:    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
./frontend/src/pages/Register.jsx:      newErrors.email = 'Please enter a valid email address';
./frontend/src/pages/Register.jsx:      newErrors.password = 'Password must contain uppercase, lowercase, and numbers';
./frontend/src/pages/Register.jsx:      await register(formData);
./frontend/src/pages/Register.jsx:      setErrors({ general: err.message || 'Registration failed. Please try again.' });
./frontend/src/pages/Register.jsx:        {/* Form Container */}
./frontend/src/pages/Register.jsx:            {/* Email */}
./frontend/src/pages/Register.jsx:                <Mail className="inline w-4 h-4 mr-1" /> Email Address *
./frontend/src/pages/Register.jsx:                type="email"
./frontend/src/pages/Register.jsx:                value={formData.email}
./frontend/src/pages/Register.jsx:                onChange={(e) => handleInputChange('email', e.target.value.toLowerCase())}
./frontend/src/pages/Register.jsx:                placeholder="Enter your email address"
./frontend/src/pages/Register.jsx:              {errors.email && <p className="text-red-300 text-xs mt-1">{errors.email}</p>}
./frontend/src/pages/JobDetail.jsx:export default function JobDetail() {
./frontend/src/pages/JobDetail.jsx:      <h1 className="text-2xl font-bold mb-4">Job Detail #{job.id}</h1>
./frontend/src/pages/JobDetail.jsx:      {/* Add more job details as needed */}
./frontend/src/pages/EstimateDetail.jsx:export default function EstimateDetail() {
./frontend/src/pages/EstimateDetail.jsx:      {/* Add more estimate details as needed */}
./frontend/src/pages/Reports.jsx:    maintainAspectRatio: false,
./frontend/src/pages/Reports.jsx:  const [reportType, setReportType] = useState('daily');
./frontend/src/pages/Reports.jsx:        const stats = await dashboardService.stats();
./frontend/src/pages/Reports.jsx:        console.error('Failed to load dashboard stats:', error);
./frontend/src/pages/Reports.jsx:    setReportType(newRange.start === newRange.end ? 'daily' : 'period');
./frontend/src/pages/Reports.jsx:        const data = await reportsService.sales({
./frontend/src/pages/Reports.jsx:      console.error('Failed to generate report:', error);
./frontend/src/pages/Reports.jsx:      showError('Failed to generate report. Using demo data.');
./frontend/src/pages/Reports.jsx:                {dashboardStats.unpaid_invoices || dashboardStats.unpaidInvoices || 0}
./frontend/src/pages/Reports.jsx:              {/* Detailed Breakdown */}
./frontend/src/pages/Reports.jsx:                <h3 className="text-xl font-semibold text-gray-800 border-b pb-2">Detailed Breakdown</h3>
./frontend/src/pages/VehicleForm.jsx:      const response = await fetch('/api/auth/customers', {
./frontend/src/pages/VehicleForm.jsx:      const data = await response.json();
./frontend/src/pages/VehicleForm.jsx:        email: customer.email || customer.emailAddress || ''
./frontend/src/pages/VehicleForm.jsx:      setError(`Failed to load customers: ${error.message}`);
./frontend/src/pages/VehicleForm.jsx:        const email = (customer.email || '').toLowerCase();
./frontend/src/pages/VehicleForm.jsx:               email.includes(searchLower) ||
./frontend/src/pages/VehicleForm.jsx:      email: customer.email || '',
./frontend/src/pages/VehicleForm.jsx:          placeholder={loading ? "Loading customers..." : "Search customer by name, phone, or email..."}
./frontend/src/pages/VehicleForm.jsx:                    {customer.email && (
./frontend/src/pages/VehicleForm.jsx:                        <span>{customer.email}</span>
./frontend/src/pages/VehicleForm.jsx:      const response = await fetch('/api/auth/vehicles', {
./frontend/src/pages/VehicleForm.jsx:      const responseText = await response.text();
./frontend/src/pages/VehicleForm.jsx:      setSubmitError(`Failed to add vehicle: ${error.message}`);
./frontend/src/pages/VehicleForm.jsx:        <p className="text-center text-gray-600">Enter vehicle details and select the owner</p>
./frontend/src/pages/VehicleForm.jsx:              {selectedCustomer.email && <p><strong>Email:</strong> {selectedCustomer.email}</p>}
./frontend/src/pages/VehicleForm.jsx:        {/* Vehicle Details */}
./frontend/src/pages/Invoices.jsx:        const invoice = await apiEndpoints.invoices.getById(invoiceId);
./frontend/src/pages/Invoices.jsx:        const [vehicle, customer] = await Promise.all([
./frontend/src/pages/Invoices.jsx:            email: customer.email,
./frontend/src/pages/Invoices.jsx:          // Include line items if available
./frontend/src/pages/Invoices.jsx:          paidDate: invoice.paid_date,
./frontend/src/pages/Invoices.jsx:  const handleEmailInvoice = () => {
./frontend/src/pages/Invoices.jsx:    showCustomConfirm("Email this invoice to the customer?", async () => {
./frontend/src/pages/Invoices.jsx:        // FIXED: Call proper invoice email endpoint (needs to be implemented in backend)
./frontend/src/pages/Invoices.jsx:        await apiEndpoints.invoices.email?.(invoiceId);
./frontend/src/pages/Invoices.jsx:        showMessage("Invoice emailed successfully", "success");
./frontend/src/pages/Invoices.jsx:        showMessage("Error emailing invoice: " + err.message, "error");
./frontend/src/pages/Invoices.jsx:  const handleMarkPaid = () => {
./frontend/src/pages/Invoices.jsx:    showCustomConfirm("Mark this invoice as paid?", async () => {
./frontend/src/pages/Invoices.jsx:        await apiEndpoints.invoices.markPaid(invoiceId);
./frontend/src/pages/Invoices.jsx:        showMessage("Invoice marked as paid", "success");
./frontend/src/pages/Invoices.jsx:        showMessage("Error marking invoice as paid: " + err.message, "error");
./frontend/src/pages/Invoices.jsx:  // Rest of component remains similar but uses invoiceData properly
./frontend/src/pages/Invoices.jsx:              invoiceData.paymentStatus === 'paid' 
./frontend/src/pages/Invoices.jsx:              <p>{invoiceData.customer.email}</p>
./frontend/src/pages/Invoices.jsx:            {invoiceData.paymentStatus !== 'paid' && (
./frontend/src/pages/Invoices.jsx:                onClick={handleMarkPaid}
./frontend/src/pages/Invoices.jsx:                Mark as Paid
./frontend/src/pages/Invoices.jsx:              onClick={handleEmailInvoice}
./frontend/src/pages/Invoices.jsx:              Email Invoice
./frontend/src/pages/AppointmentCalendar.jsx:  Mail,
./frontend/src/pages/AppointmentCalendar.jsx:          customer_email: 'john.smith@email.com',
./frontend/src/pages/AppointmentCalendar.jsx:          notes: 'Regular maintenance check',
./frontend/src/pages/AppointmentCalendar.jsx:          customer_email: 'sarah.johnson@email.com',
./frontend/src/pages/AppointmentCalendar.jsx:          customer_email: 'mike.davis@email.com',
./frontend/src/pages/AppointmentCalendar.jsx:                      title="View Details"
./frontend/src/pages/AppointmentCalendar.jsx:      {/* Appointment Details Modal */}
./frontend/src/pages/AppointmentCalendar.jsx:        <AppointmentDetailsModal
./frontend/src/pages/AppointmentCalendar.jsx:    customer_email: '',
./frontend/src/pages/AppointmentCalendar.jsx:            <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
./frontend/src/pages/AppointmentCalendar.jsx:              type="email"
./frontend/src/pages/AppointmentCalendar.jsx:              value={formData.customer_email}
./frontend/src/pages/AppointmentCalendar.jsx:              onChange={(e) => setFormData({...formData, customer_email: e.target.value})}
./frontend/src/pages/AppointmentCalendar.jsx:// Appointment Details Modal
./frontend/src/pages/AppointmentCalendar.jsx:const AppointmentDetailsModal = ({ appointment, onClose }) => {
./frontend/src/pages/AppointmentCalendar.jsx:          <h2 className="text-2xl font-bold text-gray-900">Appointment Details</h2>
./frontend/src/pages/AppointmentCalendar.jsx:                <p className="text-sm text-gray-500">Email</p>
./frontend/src/pages/AppointmentCalendar.jsx:                <p className="font-medium">{appointment.customer_email || 'Not provided'}</p>
./frontend/src/pages/CreateEditEstimate.jsx:        const res = await fetch(`/api/auth/estimates/${id}`);
./frontend/src/pages/CreateEditEstimate.jsx:          const data = await res.json();
./frontend/src/pages/CreateEditEstimate.jsx:      const res = await fetch(url, {
./frontend/src/pages/CreateEditEstimate.jsx:      if (!res.ok) throw new Error("Failed to save estimate");
./frontend/src/pages/Diagnosis.jsx:import AIDiagnosticHelper from '../components/ai/AIDiagnosticHelper';
./frontend/src/pages/Diagnosis.jsx:    const result = await AIDiagnosticHelper.diagnoseVehicle({ description: issueDescription, vehicleId: selectedVehicleId });
./frontend/src/pages/Diagnosis.jsx:    doc.text('AI Vehicle Diagnosis Report', 20, 20);
./frontend/src/pages/Diagnosis.jsx:        description: `${latestDiagnosis.description}\n\nAI Diagnosis:\n${latestDiagnosis.diagnosis}`,
./frontend/src/pages/Diagnosis.jsx:            <Wrench className="h-10 w-10" /> AI Vehicle Diagnosis
./frontend/src/pages/Diagnosis.jsx:          <p className="text-gray-300 text-lg">Describe the vehicle issue for AI-powered diagnostic insights.</p>
./frontend/src/pages/Diagnosis.jsx:              {isLoading ? 'Analyzing...' : 'Get AI Diagnosis'}
./frontend/src/pages/CreateInvoice.jsx:    status: 'draft', // draft, sent, paid, overdue
./frontend/src/pages/CreateInvoice.jsx:      const data = await apiEndpoints.customers.getAll();
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to load customers:', error);
./frontend/src/pages/CreateInvoice.jsx:      setErrors(prev => ({ ...prev, customers: 'Failed to load customers' }));
./frontend/src/pages/CreateInvoice.jsx:      const data = await apiEndpoints.vehicles.getAll();
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to load vehicles:', error);
./frontend/src/pages/CreateInvoice.jsx:      setErrors(prev => ({ ...prev, vehicles: 'Failed to load vehicles' }));
./frontend/src/pages/CreateInvoice.jsx:      const invoice = await apiEndpoints.invoices.getById(editId);
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to load invoice:', error);
./frontend/src/pages/CreateInvoice.jsx:      setErrors(prev => ({ ...prev, invoice: 'Failed to load invoice' }));
./frontend/src/pages/CreateInvoice.jsx:      const response = await apiEndpoints.invoices.generateNumber();
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to generate invoice number:', error);
./frontend/src/pages/CreateInvoice.jsx:        await apiEndpoints.invoices.update(editId, invoiceToSave);
./frontend/src/pages/CreateInvoice.jsx:        await apiEndpoints.invoices.create(invoiceToSave);
./frontend/src/pages/CreateInvoice.jsx:      console.error('Failed to save invoice:', error);
./frontend/src/pages/CreateInvoice.jsx:      alert('Failed to save invoice. Please try again.');
./frontend/src/pages/EstimatesList.jsx:      const response = await apiEndpoints.estimates.getAll();
./frontend/src/pages/EstimatesList.jsx:      setError('Failed to load estimates');
./frontend/src/pages/EstimatesList.jsx:      showMessage('Failed to load estimates', 'error');
./frontend/src/pages/EstimatesList.jsx:      await estimateService.delete(id);
./frontend/src/pages/EstimatesList.jsx:      showMessage('Failed to delete estimate', 'error');
./frontend/src/pages/EstimatesList.jsx:      showMessage('Failed to convert estimate to job', 'error');
./frontend/src/pages/EstimatesList.jsx:      // Fallback if document.body isn't available
./frontend/src/pages/EstimatesList.jsx:    showMessage("Failed to export CSV", "error");
./frontend/src/pages/EstimatesList.jsx:    <div className="container mx-auto px-4 py-8">
./frontend/src/pages/Settings.jsx:    email: '',
./frontend/src/pages/Settings.jsx:      disclaimers: 'Estimate valid for 30 days. Additional diagnosis may reveal additional needed repairs.',
./frontend/src/pages/Settings.jsx:    // AI Settings
./frontend/src/pages/Settings.jsx:    aiSettings: {
./frontend/src/pages/Settings.jsx:        const res = await fetch('/api/settings', {
./frontend/src/pages/Settings.jsx:          const data = await res.json();
./frontend/src/pages/Settings.jsx:          throw new Error(`Failed to load settings. Status: ${res.status}`);
./frontend/src/pages/Settings.jsx:      const res = await fetch('/api/settings', {
./frontend/src/pages/Settings.jsx:        throw new Error(`Failed to save settings. Status: ${res.status}`);
./frontend/src/pages/Settings.jsx:      const updated = await res.json();
./frontend/src/pages/Settings.jsx:        { name: 'Air Filter', quantity: 1, cost: 18.50 }
./frontend/src/pages/Settings.jsx:    { id: 'ai', label: 'AI Settings', icon: Wrench },
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600 mt-2">Configure all business settings that control estimates, invoices, and AI behavior</p>
./frontend/src/pages/Settings.jsx:                    placeholder="123 Main Street, Bakersfield, CA 93301"
./frontend/src/pages/Settings.jsx:                    Email Address
./frontend/src/pages/Settings.jsx:                    type="email"
./frontend/src/pages/Settings.jsx:                    value={settings.email}
./frontend/src/pages/Settings.jsx:                    onChange={(e) => handleChange(null, 'email', e.target.value)}
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">These rates automatically update all estimates, invoices, and AI calculations</p>
./frontend/src/pages/Settings.jsx:                      Disclaimers
./frontend/src/pages/Settings.jsx:                      value={settings.invoiceTemplate.disclaimers}
./frontend/src/pages/Settings.jsx:                      onChange={(e) => handleChange('invoiceTemplate', 'disclaimers', e.target.value)}
./frontend/src/pages/Settings.jsx:          {/* AI Settings Tab */}
./frontend/src/pages/Settings.jsx:          {activeTab === 'ai' && (
./frontend/src/pages/Settings.jsx:              <h2 className="text-xl font-semibold text-gray-900">AI Behavior Settings</h2>
./frontend/src/pages/Settings.jsx:              <p className="text-gray-600">Control how AI generates estimates and uses your business data</p>
./frontend/src/pages/Settings.jsx:                    <h3 className="font-semibold mb-3">AI Estimate Features</h3>
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includePartsPricing}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includePartsPricing', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeLaborEstimates}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeLaborEstimates', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeWarrantyInfo}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeWarrantyInfo', e.target.checked)}
./frontend/src/pages/Settings.jsx:                          checked={settings.aiSettings.includeSafetyNotes}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'includeSafetyNotes', e.target.checked)}
./frontend/src/pages/Settings.jsx:                    <h3 className="font-semibold mb-3">AI Limits & Thresholds</h3>
./frontend/src/pages/Settings.jsx:                          value={settings.aiSettings.defaultConfidenceThreshold}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'defaultConfidenceThreshold', e.target.value)}
./frontend/src/pages/Settings.jsx:                        <p className="text-xs text-gray-600">Minimum confidence for AI recommendations</p>
./frontend/src/pages/Settings.jsx:                          value={settings.aiSettings.maxPartsPerEstimate}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'maxPartsPerEstimate', e.target.value)}
./frontend/src/pages/Settings.jsx:                          value={settings.aiSettings.maxLaborHoursPerJob}
./frontend/src/pages/Settings.jsx:                          onChange={(e) => handleChange('aiSettings', 'maxLaborHoursPerJob', e.target.value)}
./frontend/src/pages/Settings.jsx:                <h4 className="font-semibold text-blue-900 mb-2">AI Integration Active</h4>
./frontend/src/pages/Settings.jsx:                  The AI system automatically uses your labor rate (${settings.laborRate}/hr),
./frontend/src/pages/Settings.jsx:                  When you update these settings, all future AI estimates will use the new values immediately.
./frontend/src/pages/Settings.jsx:      { name: 'Air Filter', partNumber: 'AF-789', quantity: 1, cost: 18.50 }
./frontend/src/pages/Settings.jsx:              <div>{settings.address || "123 Main Street, Bakersfield, CA 93301"}</div>
./frontend/src/pages/Settings.jsx:              <div>Phone: {settings.phone || "(661) 555-0123"} | Email: {settings.email || "info@eddiesautomotive.com"}</div>
./frontend/src/pages/Settings.jsx:        {settings.invoiceTemplate.disclaimers && (
./frontend/src/pages/Settings.jsx:          <div><strong>Important:</strong> {settings.invoiceTemplate.disclaimers}</div>
./frontend/src/pages/Login.jsx.safe:    email: '',
./frontend/src/pages/Login.jsx.safe:    if (!formData.email.trim()) {
./frontend/src/pages/Login.jsx.safe:      newErrors.email = 'Email is required';
./frontend/src/pages/Login.jsx.safe:    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
./frontend/src/pages/Login.jsx.safe:      newErrors.email = 'Please enter a valid email address';
./frontend/src/pages/Login.jsx.safe:      const result = await login(formData.email, formData.password);
./frontend/src/pages/Login.jsx.safe:        setErrors({ general: result.message || 'Login failed. Please check your credentials.' });
./frontend/src/pages/Login.jsx.safe:      setErrors({ general: err.message || 'Login error. Please try again.' });
./frontend/src/pages/Login.jsx.safe:        {/* Form Container */}
./frontend/src/pages/Login.jsx.safe:            {/* Email Field */}
./frontend/src/pages/Login.jsx.safe:                <User className="w-4 h-4" /> Email Address
./frontend/src/pages/Login.jsx.safe:                type="email"
./frontend/src/pages/Login.jsx.safe:                value={formData.email}
./frontend/src/pages/Login.jsx.safe:                onChange={(e) => handleInputChange('email', e.target.value.toLowerCase())}
./frontend/src/pages/Login.jsx.safe:                placeholder="Enter your email"
./frontend/src/pages/Login.jsx.safe:                autoComplete="email"
./frontend/src/pages/Login.jsx.safe:              {errors.email && (
./frontend/src/pages/Login.jsx.safe:                  {errors.email}
./frontend/src/pages/Dashboard.jsx.broken-again:  Clock, Plus, RefreshCw, Download, Bell, Settings, MapPin, Phone, Mail,
./frontend/src/pages/Dashboard.jsx.broken-again:  TrendingUp, Edit3, Sparkles, Brain, Zap, Search,
./frontend/src/pages/Dashboard.jsx.broken-again:  const [showAIPanel, setShowAIPanel] = useState(false);
./frontend/src/pages/Dashboard.jsx.broken-again:      await new Promise(resolve => setTimeout(resolve, 1000));
./frontend/src/pages/Dashboard.jsx.broken-again:      setError('Failed to load dashboard data');
./frontend/src/pages/Dashboard.jsx.broken-again:            Please wait while we load your data...
./frontend/src/pages/Dashboard.jsx.broken-again:      {/* Main Content */}
./frontend/src/pages/Dashboard.jsx.broken-again:        {/* AI Panel */}
./frontend/src/pages/Dashboard.jsx.broken-again:        {showAIPanel && (
./frontend/src/pages/Dashboard.jsx.broken-again:                  <h3 className="text-lg font-semibold text-gray-900">AI Assistant</h3>
./frontend/src/pages/Dashboard.jsx.broken-again:                    onClick={() => setShowAIPanel(false)}
./frontend/src/pages/Dashboard.jsx.broken-again:                  Get AI-powered assistance for diagnostics and estimates.
./frontend/src/pages/Dashboard.jsx.broken-again:                    onClick={() => handleNavigation('/ai-diagnostics')}
./frontend/src/pages/Dashboard.jsx.broken-again:                    <Brain className="h-5 w-5 text-blue-600 inline mr-2" />
./frontend/src/pages/Dashboard.jsx.broken-again:                    AI Diagnostics
./frontend/src/pages/Dashboard.jsx.broken-again:                    onClick={() => setShowAIPanel(false)}
./frontend/src/pages/Dashboard.jsx.broken-again:        {/* AI Quick Access Button */}
./frontend/src/pages/Dashboard.jsx.broken-again:          onClick={() => setShowAIPanel(true)}
./frontend/src/pages/PartsLaborManagement.jsx:// ---------- Main Component ----------
./frontend/src/pages/PartsLaborManagement.jsx:      const [partsRes, laborRes] = await Promise.all([
./frontend/src/pages/PartsLaborManagement.jsx:      showMessage('Failed to load data. Please try again.', 'error');
./frontend/src/pages/PartsLaborManagement.jsx:      if (editingItem) await api.update(editingItem.id, form);
./frontend/src/pages/PartsLaborManagement.jsx:      else await api.create(form);
./frontend/src/pages/PartsLaborManagement.jsx:      await loadData();
./frontend/src/pages/PartsLaborManagement.jsx:      showMessage(`Failed to save ${activeTab === 'parts' ? 'part' : 'labor rate'}.`, 'error');
./frontend/src/pages/PartsLaborManagement.jsx:        await api.delete(id);
./frontend/src/pages/PartsLaborManagement.jsx:        await loadData();
./frontend/src/pages/PartsLaborManagement.jsx:        showMessage(`Failed to delete ${activeTab === 'parts' ? 'part' : 'labor rate'}.`, 'error');
./frontend/src/pages/AddAndEditCustomer.jsx:  AlertTriangle, CheckCircle, Phone, Mail, MapPin 
./frontend/src/pages/AddAndEditCustomer.jsx:    email: '',
./frontend/src/pages/AddAndEditCustomer.jsx:  const [emailError, setEmailError] = useState('');
./frontend/src/pages/AddAndEditCustomer.jsx:          email: customer.email || '',
./frontend/src/pages/AddAndEditCustomer.jsx:    if (name === 'email') {
./frontend/src/pages/AddAndEditCustomer.jsx:      setEmailError('');
./frontend/src/pages/AddAndEditCustomer.jsx:  const validateEmail = (email) => {
./frontend/src/pages/AddAndEditCustomer.jsx:    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
./frontend/src/pages/AddAndEditCustomer.jsx:    return emailRegex.test(email);
./frontend/src/pages/AddAndEditCustomer.jsx:      setError(`Navigation failed: ${err.message}`);
./frontend/src/pages/AddAndEditCustomer.jsx:    if (form.email && !validateEmail(form.email)) {
./frontend/src/pages/AddAndEditCustomer.jsx:      setEmailError('Please enter a valid email address');
./frontend/src/pages/AddAndEditCustomer.jsx:        ? await customerOps.update(parseInt(customerId), form)
./frontend/src/pages/AddAndEditCustomer.jsx:        : await customerOps.create(form);
./frontend/src/pages/AddAndEditCustomer.jsx:        showMessage(result.error || 'Failed to save customer', 'error');
./frontend/src/pages/AddAndEditCustomer.jsx:      showMessage('Failed to save customer', 'error');
./frontend/src/pages/AddAndEditCustomer.jsx:      const result = await customerOps.delete(parseInt(customerId));
./frontend/src/pages/AddAndEditCustomer.jsx:        showMessage(result.error || 'Failed to delete customer', 'error');
./frontend/src/pages/AddAndEditCustomer.jsx:      showMessage('Failed to delete customer', 'error');
./frontend/src/pages/AddAndEditCustomer.jsx:        {/* Main Form */}
./frontend/src/pages/AddAndEditCustomer.jsx:                <Mail className="w-4 h-4 mr-1" />
./frontend/src/pages/AddAndEditCustomer.jsx:                Email Address
./frontend/src/pages/AddAndEditCustomer.jsx:                type="email"
./frontend/src/pages/AddAndEditCustomer.jsx:                name="email"
./frontend/src/pages/AddAndEditCustomer.jsx:                value={form.email}
./frontend/src/pages/AddAndEditCustomer.jsx:                  emailError ? 'border-red-500' : 'border-gray-300'
./frontend/src/pages/AddAndEditCustomer.jsx:                placeholder="customer@email.com"
./frontend/src/pages/AddAndEditCustomer.jsx:              {emailError && (
./frontend/src/pages/AddAndEditCustomer.jsx:                  {emailError}
./frontend/src/pages/DataMigration.jsx:  email: "Customer Email",
./frontend/src/pages/DataMigration.jsx:  correction: "Repair Action",
./frontend/src/pages/DataMigration.jsx:  customer: ["name", "phone", "email", "address", "city", "state", "zip"],
./frontend/src/pages/DataMigration.jsx:  const availableColumns = analysis.columns.filter(col => 
./frontend/src/pages/DataMigration.jsx:  if (availableColumns.length === 0 && category === 'job') {
./frontend/src/pages/DataMigration.jsx:    const result = await migrationOps.analyze(formData);
./frontend/src/pages/DataMigration.jsx:    const result = await migrationOps.importData({
./frontend/src/pages/CustomerDetail.jsx:// src/pages/CustomerDetail.jsx
./frontend/src/pages/CustomerDetail.jsx:export default function CustomerDetail() {
./frontend/src/pages/CustomerDetail.jsx:        await vehicleOps.delete(vehicleId);
./frontend/src/pages/CustomerDetail.jsx:        alert('Failed to delete vehicle: ' + error.message);
./frontend/src/pages/CustomerDetail.jsx:                  <p className="text-sm text-gray-500">Email</p>
./frontend/src/pages/CustomerDetail.jsx:                    <a href={`mailto:${customer.email}`} className="hover:text-blue-600">
./frontend/src/pages/CustomerDetail.jsx:                      {customer.email}
./frontend/src/pages/VehicleDetail.jsx:// src/pages/VehicleDetail.jsx
./frontend/src/pages/VehicleDetail.jsx:export default function VehicleDetail() {
./frontend/src/pages/VehicleDetail.jsx:        await vehicleOps.delete(vehicle.id);
./frontend/src/pages/VehicleDetail.jsx:        alert('Failed to delete vehicle: ' + error.message);
./frontend/src/pages/VehicleDetail.jsx:        {/* Vehicle Details */}
./frontend/src/pages/VehicleDetail.jsx:                  View Owner Details
./frontend/src/pages/Customers.jsx:      const response = await fetch('/api/auth/customers');
./frontend/src/pages/Customers.jsx:      const data = await response.json();
./frontend/src/pages/Customers.jsx:            email: customer.email || '',
./frontend/src/pages/Customers.jsx:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/Customers.jsx:        customer.email?.toLowerCase().includes(searchLower) ||
./frontend/src/pages/Customers.jsx:      const response = await fetch(`/api/auth/customers/${customer.id}`, {
./frontend/src/pages/Customers.jsx:        throw new Error('Failed to delete customer');
./frontend/src/pages/Customers.jsx:      await Promise.all(promises);
./frontend/src/pages/Customers.jsx:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/Customers.jsx:        c.email,
./frontend/src/pages/Customers.jsx:                Try Again
./frontend/src/pages/Customers.jsx:                  placeholder="Search customers by name, email, phone, or address..."
./frontend/src/pages/Customers.jsx:                          {customer.email && (
./frontend/src/pages/Customers.jsx:                              <span>{customer.email}</span>
./frontend/src/pages/Customers.jsx:                        title="View Details"
./frontend/src/pages/Customers.jsx:                  {customer.email && (
./frontend/src/pages/Customers.jsx:                      <span>{customer.email}</span>
./frontend/src/pages/Vehicles.jsx:  // Your data enrichment logic is excellent and remains unchanged
./frontend/src/pages/Vehicles.jsx:      await vehicleOps.delete(vehicleToDelete.id);
./frontend/src/pages/Jobs.jsx:// (Pagination component can remain the same)
./frontend/src/pages/Jobs.jsx:      await jobOps.delete(jobToDelete.id);
./frontend/src/pages/Jobs.jsx:          {/*... (Table Head remains the same)... */}
./frontend/src/pages/Jobs.jsx:      {/*... (Pagination and ConfirmModal remain the same, powered by filteredJobs.length)... */}
./frontend/src/pages/Estimates.jsx:      const response = await apiEndpoints.estimates.getAll();
./frontend/src/pages/Estimates.jsx:      setError('Failed to load estimates');
./frontend/src/pages/Estimates.jsx:      showMessage('Failed to load estimates', 'error');
./frontend/src/pages/Estimates.jsx:      await estimateService.delete(id);
./frontend/src/pages/Estimates.jsx:      showMessage('Failed to delete estimate', 'error');
./frontend/src/pages/Estimates.jsx:      showMessage('Failed to convert estimate to job', 'error');
./frontend/src/pages/Estimates.jsx:    <div className="container mx-auto px-4 py-8">
./frontend/src/pages/TimeClock.jsx:      const response = await fetch('/api/timeclock/status', {
./frontend/src/pages/TimeClock.jsx:      const data = await response.json();
./frontend/src/pages/TimeClock.jsx:      const response = await fetch('/api/timeclock/history', {
./frontend/src/pages/TimeClock.jsx:      const data = await response.json();
./frontend/src/pages/TimeClock.jsx:      const response = await fetch('/api/timeclock/clock-in', {
./frontend/src/pages/TimeClock.jsx:        toast.error('Failed to clock in');
./frontend/src/pages/TimeClock.jsx:      const response = await fetch('/api/timeclock/clock-out', {
./frontend/src/pages/TimeClock.jsx:        toast.error('Failed to clock out');
./frontend/src/pages/AIDiagnostics.jsx:import aiDiagnosticsService from "../utils/aiDiagnosticsService";
./frontend/src/pages/AIDiagnostics.jsx:const AIDiagnostics = () => {
./frontend/src/pages/AIDiagnostics.jsx:      // Use the aiDiagnosticsService correctly
./frontend/src/pages/AIDiagnostics.jsx:      const response = await aiDiagnosticsService.generateQuickDiagnosis({
./frontend/src/pages/AIDiagnostics.jsx:        setError(response.message || 'Diagnosis failed. Please try again.');
./frontend/src/pages/AIDiagnostics.jsx:      setError(err.response?.data?.message || 'Diagnosis failed. Please try again.');
./frontend/src/pages/AIDiagnostics.jsx:    if (!aiDiagnosticsService.validateOBDCode(obdCode)) {
./frontend/src/pages/AIDiagnostics.jsx:      const response = await aiDiagnosticsService.lookupOBDCodes(obdCode.toUpperCase());
./frontend/src/pages/AIDiagnostics.jsx:        setError('OBD code lookup failed. Please try again.');
./frontend/src/pages/AIDiagnostics.jsx:      const commonCodes = aiDiagnosticsService.getCommonOBDCodes();
./frontend/src/pages/AIDiagnostics.jsx:      const allCodes = { ...commonCodes.powertrain, ...commonCodes.body, ...commonCodes.chassis, ...commonCodes.network };
./frontend/src/pages/AIDiagnostics.jsx:          severity: aiDiagnosticsService.getOBDCodeSeverity(obdCode.toUpperCase()),
./frontend/src/pages/AIDiagnostics.jsx:        setError('OBD code not found in database. Please verify the code and try again.');
./frontend/src/pages/AIDiagnostics.jsx:            Get AI Diagnosis
./frontend/src/pages/AIDiagnostics.jsx:          AI Diagnosis Results
./frontend/src/pages/AIDiagnostics.jsx:              <h4 className="font-semibold text-gray-800">Estimated Repair Cost:</h4>
./frontend/src/pages/AIDiagnostics.jsx:    <div className="container mx-auto px-4 py-8">
./frontend/src/pages/AIDiagnostics.jsx:        <h1 className="text-3xl font-bold text-gray-800 mb-2">AI Diagnostics</h1>
./frontend/src/pages/AIDiagnostics.jsx:        <p className="text-gray-600">Get intelligent diagnostic insights powered by AI</p>
./frontend/src/pages/AIDiagnostics.jsx:export default AIDiagnostics;
./frontend/src/pages/Register.jsx.safe:import { Car, Key, Eye, EyeOff, UserPlus, Loader2, AlertCircle, User, Mail, Phone, ArrowLeft } from 'lucide-react';
./frontend/src/pages/Register.jsx.safe:    email: '', 
./frontend/src/pages/Register.jsx.safe:    if (!formData.email.trim()) {
./frontend/src/pages/Register.jsx.safe:      newErrors.email = 'Email is required';
./frontend/src/pages/Register.jsx.safe:    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
./frontend/src/pages/Register.jsx.safe:      newErrors.email = 'Please enter a valid email address';
./frontend/src/pages/Register.jsx.safe:      newErrors.password = 'Password must contain uppercase, lowercase, and numbers';
./frontend/src/pages/Register.jsx.safe:      await register(formData);
./frontend/src/pages/Register.jsx.safe:      setErrors({ general: err.message || 'Registration failed. Please try again.' });
./frontend/src/pages/Register.jsx.safe:        {/* Form Container */}
./frontend/src/pages/Register.jsx.safe:            {/* Email */}
./frontend/src/pages/Register.jsx.safe:                <Mail className="inline w-4 h-4 mr-1" /> Email Address *
./frontend/src/pages/Register.jsx.safe:                type="email"
./frontend/src/pages/Register.jsx.safe:                value={formData.email}
./frontend/src/pages/Register.jsx.safe:                onChange={(e) => handleInputChange('email', e.target.value.toLowerCase())}
./frontend/src/pages/Register.jsx.safe:                placeholder="Enter your email address"
./frontend/src/pages/Register.jsx.safe:              {errors.email && <p className="text-red-300 text-xs mt-1">{errors.email}</p>}
./frontend/src/pages/AppointmentCalendar/AddAppointmentModal.jsx:    customer_name: '', customer_phone: '', customer_email: '',
./frontend/src/pages/AppointmentCalendar/AddAppointmentModal.jsx:            <label className="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
./frontend/src/pages/AppointmentCalendar/AddAppointmentModal.jsx:            <input type="email" value={formData.customer_email}
./frontend/src/pages/AppointmentCalendar/AddAppointmentModal.jsx:              onChange={(e) => setFormData({ ...formData, customer_email: e.target.value })}
./frontend/src/pages/AppointmentCalendar/AppointmentDetailsModal.jsx:const AppointmentDetailsModal = ({ appointment, onClose, onUpdate, onDelete }) => {
./frontend/src/pages/AppointmentCalendar/AppointmentDetailsModal.jsx:          <h2 className="text-2xl font-bold text-gray-900">Appointment Details</h2>
./frontend/src/pages/AppointmentCalendar/AppointmentDetailsModal.jsx:                  <p className="text-sm text-gray-500">Email</p>
./frontend/src/pages/AppointmentCalendar/AppointmentDetailsModal.jsx:                  <p className="font-medium">{appointment.customer_email || 'Not provided'}</p>
./frontend/src/pages/AppointmentCalendar/AppointmentDetailsModal.jsx:export default AppointmentDetailsModal;
./frontend/src/pages/AppointmentCalendar/index.jsx:import AppointmentDetailsModal from './AppointmentDetailsModal';
./frontend/src/pages/AppointmentCalendar/index.jsx:      {selected && <AppointmentDetailsModal appointment={selected} onClose={() => setSelected(null)} onUpdate={updateAppointment} onDelete={deleteAppointment} />}
./frontend/src/pages/index.js:export { default as CustomerDetail } from './CustomerDetail';
./frontend/src/pages/index.js:export { default as VehicleDetail } from './VehicleDetail';
./frontend/src/pages/index.js:export { default as JobDetail } from './JobDetail';
./frontend/src/pages/index.js:export { default as EstimateDetail } from './EstimateDetail';
./frontend/src/pages/index.js:export { default as InvoiceDetail } from './InvoiceDetail';
./frontend/src/pages/index.js:export { default as AIDiagnostics } from './AIDiagnostics';
./frontend/src/pages/InvoiceDetail.jsx:import { Download, Mail, Printer, Edit, Car, Wrench, User, Building2, Phone, MapPin, CreditCard, AlertCircle, Check, Calendar, DollarSign, FileText, Shield } from 'lucide-react';
./frontend/src/pages/InvoiceDetail.jsx:      name: 'Premier Auto Repair',
./frontend/src/pages/InvoiceDetail.jsx:      email: 'service@premierauto.com',
./frontend/src/pages/InvoiceDetail.jsx:      email: 'sarah.johnson@email.com',
./frontend/src/pages/InvoiceDetail.jsx:      paidDate: '2024-08-21'
./frontend/src/pages/InvoiceDetail.jsx:                <Mail className="w-4 h-4" />
./frontend/src/pages/InvoiceDetail.jsx:                Email
./frontend/src/pages/InvoiceDetail.jsx:                <Mail className="w-4 h-4" />
./frontend/src/pages/InvoiceDetail.jsx:                <span>{invoiceData.customer.email}</span>
./frontend/src/pages/InvoiceDetail.jsx:                <span>Paid via {invoiceData.payment.method} ending in {invoiceData.payment.cardLast4}</span>
./frontend/src/pages/InvoiceDetail.jsx:              <p className="text-sm text-gray-600">Paid on: {invoiceData.payment.paidDate}</p>
./frontend/src/pages/Dashboard.jsx.before-fix:  Clock, Plus, RefreshCw, Download, Bell, Settings, MapPin, Phone, Mail,
./frontend/src/pages/Dashboard.jsx.before-fix:  TrendingUp, Edit3, Sparkles, Brain, Zap, Search,
./frontend/src/pages/Dashboard.jsx.before-fix:  const [showAIPanel, setShowAIPanel] = useState(false);
./frontend/src/pages/Dashboard.jsx.before-fix:  // Sample fallback data for when backend is unavailable
./frontend/src/pages/Dashboard.jsx.before-fix:          await fetchDashboardStats();
./frontend/src/pages/Dashboard.jsx.before-fix:          console.error('Failed to load dashboard stats:', error);
./frontend/src/pages/Dashboard.jsx.before-fix:    // Use real data if available, otherwise fallback to sample data
./frontend/src/pages/Dashboard.jsx.before-fix:        unpaidInvoices: invoices?.filter(inv => inv.status !== 'paid' && inv.status !== 'cancelled')?.length || 0,
./frontend/src/pages/Dashboard.jsx.before-fix:        unpaidInvoices: 5,
./frontend/src/pages/Dashboard.jsx.before-fix:      await fetchDashboardStats();
./frontend/src/pages/Dashboard.jsx.before-fix:      {/* Main Content */}
./frontend/src/pages/Dashboard.jsx.before-fix:            title="Unpaid Invoices"
./frontend/src/pages/Dashboard.jsx.before-fix:            value={stats.unpaidInvoices}
./frontend/src/pages/Dashboard.jsx.before-fix:            title="AI Diagnostics"
./frontend/src/pages/Dashboard.jsx.before-fix:            value="Available"
./frontend/src/pages/Dashboard.jsx.before-fix:            icon={Brain}
./frontend/src/pages/Dashboard.jsx.before-fix:            href="/ai-diagnostics"
./frontend/src/pages/Dashboard.jsx.before-fix:      {/* AI Panel Modal */}
./frontend/src/pages/Dashboard.jsx.before-fix:      {showAIPanel && (
./frontend/src/pages/Dashboard.jsx.before-fix:                  AI Assistant
./frontend/src/pages/Dashboard.jsx.before-fix:                  onClick={() => setShowAIPanel(false)}
./frontend/src/pages/Dashboard.jsx.before-fix:                Get AI-powered assistance for diagnostics, estimates, and more.
./frontend/src/pages/Dashboard.jsx.before-fix:                    handleNavigation('/ai-diagnostics');
./frontend/src/pages/Dashboard.jsx.before-fix:                    setShowAIPanel(false);
./frontend/src/pages/Dashboard.jsx.before-fix:                  <Brain className="h-5 w-5 text-blue-600 inline mr-2" />
./frontend/src/pages/Dashboard.jsx.before-fix:                  AI Diagnostics
./frontend/src/pages/Dashboard.jsx.before-fix:                  onClick={() => setShowAIPanel(false)}
./frontend/src/pages/Dashboard.jsx.before-fix:      {/* Floating AI Button */}
./frontend/src/pages/Dashboard.jsx.before-fix:        onClick={() => setShowAIPanel(true)}
./frontend/src/pages/Dashboard.jsx.before-fix:        title="AI Assistant"
./frontend/src/pages/CustomerList.jsx.backup:      const data = await customerService.getAll();
./frontend/src/pages/CustomerList.jsx.backup:            email: customer.email || '',
./frontend/src/pages/CustomerList.jsx.backup:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx.backup:        customer.email?.toLowerCase().includes(searchLower) ||
./frontend/src/pages/CustomerList.jsx.backup:      await customerService.deleteCustomer(customer.id);
./frontend/src/pages/CustomerList.jsx.backup:      await Promise.all(
./frontend/src/pages/CustomerList.jsx.backup:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/CustomerList.jsx.backup:        c.email,
./frontend/src/pages/CustomerList.jsx.backup:                  Try Again
./frontend/src/pages/CustomerList.jsx.backup:                      <p className="text-sm text-gray-600">{customer.email}</p>
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      const data = await customerService.getAll();
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:            email: customer.email || '',
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      setError(`Failed to load customers: ${err.message}`);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        customer.email?.toLowerCase().includes(searchLower) ||
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      await customerService.deleteCustomer(customer.id);
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      await Promise.all(
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:      ['Name', 'Email', 'Phone', 'Address', 'Status', 'Vehicles', 'Total Spent', 'Member Since'],
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:        c.email,
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                  Try Again
./frontend/src/pages/CustomerList.jsx.backup.20251002_171740:                      <p className="text-sm text-gray-600">{customer.email}</p>
./frontend/src/pages/CreateEditEstimate.jsx.backup:        const res = await fetch(`/api/auth/estimates/${id}`);
./frontend/src/pages/CreateEditEstimate.jsx.backup:          const data = await res.json();
./frontend/src/pages/CreateEditEstimate.jsx.backup:      const res = await fetch(url, {
./frontend/src/pages/CreateEditEstimate.jsx.backup:      if (!res.ok) throw new Error("Failed to save estimate");
./frontend/src/pages/CustomerDetail.jsx.backup:// src/pages/CustomerDetail.jsx
./frontend/src/pages/CustomerDetail.jsx.backup:export default function CustomerDetail() {
./frontend/src/pages/CustomerDetail.jsx.backup:        await vehicleOps.delete(vehicleId);
./frontend/src/pages/CustomerDetail.jsx.backup:        alert('Failed to delete vehicle: ' + error.message);
./frontend/src/pages/CustomerDetail.jsx.backup:                  <p className="text-sm text-gray-500">Email</p>
./frontend/src/pages/CustomerDetail.jsx.backup:                    <a href={`mailto:${customer.email}`} className="hover:text-blue-600">
./frontend/src/pages/CustomerDetail.jsx.backup:                      {customer.email}
./frontend/src/components/ErrorBoundaryWithAuth.jsx:    // Safe property access with optional chaining and nullish coalescing
./frontend/src/components/ErrorBoundaryWithAuth.jsx:      componentStack: errorInfo?.componentStack || 'No component stack available',
./frontend/src/components/ErrorBoundaryWithAuth.jsx:      errorBoundaryStack: errorInfo?.errorBoundaryStack || 'No error boundary stack available'
./frontend/src/components/ErrorBoundaryWithAuth.jsx:          <details style={{ marginTop: '10px' }}>
./frontend/src/components/ErrorBoundaryWithAuth.jsx:              Click to see error details
./frontend/src/components/ErrorBoundaryWithAuth.jsx:          </details>
./frontend/src/components/ErrorBoundaryWithAuth.jsx:            Try Again
./frontend/src/components/GlobalToastDisplay.jsx: * A global toast container for showing notifications.
./frontend/src/components/UserDropdown.jsx:            {/* Mobile: show username & email */}
./frontend/src/components/UserDropdown.jsx:              {user.email && (
./frontend/src/components/UserDropdown.jsx:                <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{user.email}</p>
./frontend/src/components/HealthCheck.jsx:        const response = await fetch('http://127.0.0.1:5000/health');
./frontend/src/components/SearchSystem.jsx:        const [customerResults] = await Promise.allSettled([
./frontend/src/components/SearchSystem.jsx:        console.log('API search failed, using local data:', apiError);
./frontend/src/components/SearchSystem.jsx:      // Fallback: Search through local data if API fails or for vehicles/jobs
./frontend/src/components/SearchSystem.jsx:          customer.email?.toLowerCase().includes(searchLower) ||
./frontend/src/components/SearchSystem.jsx:      showError('Search failed. Please try again.');
./frontend/src/components/SearchSystem.jsx:                        {item.phone && `📞 ${item.phone}`} {item.email && `• 📧 ${item.email}`}
./frontend/src/components/ShareableActions.jsx: * A component to provide print, share, email, and export functionality for any entity.
./frontend/src/components/ShareableActions.jsx:      await navigator.clipboard.writeText(generateShareLink());
./frontend/src/components/ShareableActions.jsx:      console.error('Failed to copy link', err);
./frontend/src/components/ShareableActions.jsx:  // Share via email
./frontend/src/components/ShareableActions.jsx:  const handleEmailShare = () => {
./frontend/src/components/ShareableActions.jsx:      `Please find the ${entityType} details below:\n\n${generateShareLink()}\n\nBest regards,\nEddie's Askan Automotive`
./frontend/src/components/ShareableActions.jsx:    window.location.href = `mailto:?subject=${subject}&body=${body}`;
./frontend/src/components/ShareableActions.jsx:              {/* Email Link */}
./frontend/src/components/ShareableActions.jsx:                onClick={handleEmailShare}
./frontend/src/components/ShareableActions.jsx:                Email Link
./frontend/src/components/TimeclockHistory.jsx:      const response = await timeclockService.getEntries(dateRange);
./frontend/src/components/TimeclockHistory.jsx:      console.error('Failed to load timeclock entries', err);
./frontend/src/components/AppointmentCard.jsx:      const response = await api.get(`/appointments?date=${today}&limit=5`);
./frontend/src/components/AppointmentCard.jsx:          service_type: 'maintenance'
./frontend/src/components/AppointmentCard.jsx:          service_type: 'repair'
./frontend/src/components/JobCard.jsx:      const response = await api.get('/jobs?status=pending,in_progress&limit=5');
./frontend/src/components/TechnicianCard.jsx:      const response = await api.get('/users?role=technician&limit=5');
./frontend/src/components/TechnicianCard.jsx:          email: 'mike@eddiesauto.com',
./frontend/src/components/TechnicianCard.jsx:          email: 'sarah@eddiesauto.com',
./frontend/src/components/TechnicianCard.jsx:          status: 'available',
./frontend/src/components/TechnicianCard.jsx:          email: 'tom@eddiesauto.com',
./frontend/src/components/TechnicianCard.jsx:      case 'available':
./frontend/src/components/TechnicianCard.jsx:      case 'available':
./frontend/src/components/TimeClockWidget.jsx:        const res = await apiEndpoints.timeclock.status();
./frontend/src/components/TimeClockWidget.jsx:        console.error('Failed to fetch time status:', err);
./frontend/src/components/TimeClockWidget.jsx:      await apiEndpoints.timeclock.clockIn();
./frontend/src/components/TimeClockWidget.jsx:      console.error('Clock in failed:', err);
./frontend/src/components/TimeClockWidget.jsx:      setError('Clock in failed');
./frontend/src/components/TimeClockWidget.jsx:      const statusRes = await apiEndpoints.timeclock.status();
./frontend/src/components/TimeClockWidget.jsx:      await apiEndpoints.timeclock.clockOut();
./frontend/src/components/TimeClockWidget.jsx:      console.error('Clock out failed:', err);
./frontend/src/components/TimeClockWidget.jsx:      setError('Clock out failed');
./frontend/src/components/LogoSplash.jsx:      {/* Main logo container */}
./frontend/src/components/EnhancedJobCreation.jsx:  const [aiDiagnosing, setAiDiagnosing] = useState(false);
./frontend/src/components/EnhancedJobCreation.jsx:  const [aiResults, setAiResults] = useState(null);
./frontend/src/components/EnhancedJobCreation.jsx:    c.email.toLowerCase().includes(customerSearch.toLowerCase())
./frontend/src/components/EnhancedJobCreation.jsx:  const handleAiDiagnosis = async () => {
./frontend/src/components/EnhancedJobCreation.jsx:    setAiDiagnosing(true);
./frontend/src/components/EnhancedJobCreation.jsx:      setAiResults(mockDiagnosis);
./frontend/src/components/EnhancedJobCreation.jsx:      setAiDiagnosing(false);
./frontend/src/components/EnhancedJobCreation.jsx:            Smart AI-Powered Workflow
./frontend/src/components/EnhancedJobCreation.jsx:                  placeholder="Search by name, phone, or email..."
./frontend/src/components/EnhancedJobCreation.jsx:                        <div className="text-sm text-gray-400">{c.phone} • {c.email}</div>
./frontend/src/components/EnhancedJobCreation.jsx:                placeholder="Describe the vehicle's problem in detail..."rows={4}
./frontend/src/components/EnhancedJobCreation.jsx:              {/* AI Diagnosis Button */}
./frontend/src/components/EnhancedJobCreation.jsx:                onClick={handleAiDiagnosis}
./frontend/src/components/EnhancedJobCreation.jsx:                disabled={aiDiagnosing || !problemDescription.trim() || !selectedVehicle}
./frontend/src/components/EnhancedJobCreation.jsx:                {aiDiagnosing ? (
./frontend/src/components/EnhancedJobCreation.jsx:                    Get AI Diagnosis
./frontend/src/components/EnhancedJobCreation.jsx:            {/* AI Results */}
./frontend/src/components/EnhancedJobCreation.jsx:            {aiResults && (
./frontend/src/components/EnhancedJobCreation.jsx:                <h3 className="text-lg font-semibold mb-3 text-purple-300">AI Diagnosis Results</h3>
./frontend/src/components/EnhancedJobCreation.jsx:                <p className="text-gray-300 mb-4">{aiResults.diagnosis}</p>
./frontend/src/components/EnhancedJobCreation.jsx:                  {aiResults.recommendations.map((rec, index) => (
./frontend/src/components/EnhancedJobCreation.jsx:                  <span className="text-purple-300">Confidence: {aiResults.confidence}</span>
./frontend/src/components/EnhancedJobCreation.jsx:                  <span className="font-semibold text-green-400">Est. Total: {aiResults.estimatedTotal}</span>
./frontend/src/components/EnhancedJobCreation.jsx:                    No parts added yet. Use AI Diagnosis to auto-populate!
./frontend/src/components/PrintableLayout.jsx:    <div className={`print-container ${className}`}>
./frontend/src/components/PrintableLayout.jsx:            <div>123 Main St, Bakersfield, CA 93301</div>
./frontend/src/components/PayrollReportDetail.jsx:// ./src/components/PayrollReportDetail.jsx
./frontend/src/components/PayrollReportDetail.jsx:const PayrollReportDetail = () => (
./frontend/src/components/PayrollReportDetail.jsx:    <h1>Payroll Report Detail</h1>
./frontend/src/components/PayrollReportDetail.jsx:export default PayrollReportDetail;
./frontend/src/components/AppointmentBar.jsx:        const response = await apiEndpoints.appointments.getAll({
./frontend/src/components/AppointmentBar.jsx:        console.error('Failed to load appointments:', error);
./frontend/src/components/TimeClockNavbar.jsx:      const response = await retryOperation(
./frontend/src/components/TimeClockNavbar.jsx:      console.error('Failed to check time status:', errorInfo);
./frontend/src/components/TimeClockNavbar.jsx:      await retryOperation(
./frontend/src/components/TimeClockNavbar.jsx:      console.error('Clock in failed:', errorInfo);
./frontend/src/components/TimeClockNavbar.jsx:      const statusResponse = await retryOperation(
./frontend/src/components/TimeClockNavbar.jsx:      await retryOperation(
./frontend/src/components/TimeClockNavbar.jsx:      console.error('Clock out failed:', errorInfo);
./frontend/src/components/RealTimeNotifications.jsx:          message: 'New job update available',
./frontend/src/components/CustomerPortal.jsx:      email: 'john.smith@example.com',
./frontend/src/components/CustomerPortal.jsx:                  View Details →
./frontend/src/components/ai/AIProvider.js:// src/components/ai/AIProvider.js
./frontend/src/components/ai/AIProvider.js:const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
./frontend/src/components/ai/AIProvider.js:// Simple AI client with fallback
./frontend/src/components/ai/AIProvider.js:export const generateAIResponse = async (prompt, options = {}) => {
./frontend/src/components/ai/AIProvider.js:    // Primary: OpenAI
./frontend/src/components/ai/AIProvider.js:    const openAIResp = await axios.post(
./frontend/src/components/ai/AIProvider.js:      'https://api.openai.com/v1/chat/completions',
./frontend/src/components/ai/AIProvider.js:        headers: { Authorization: `Bearer ${OPENAI_API_KEY}` },
./frontend/src/components/ai/AIProvider.js:    return openAIResp.data?.choices?.[0]?.message?.content || '';
./frontend/src/components/ai/AIProvider.js:      const openRouterResp = await axios.post(
./frontend/src/components/ai/AIProvider.js:        'https://openrouter.ai/api/v1/chat/completions',
./frontend/src/components/ai/AIProvider.js:        const hfResp = await axios.post(
./frontend/src/components/ai/AIProvider.js:        throw new Error('AI service unavailable');
./frontend/src/components/ai/AIDiagnosticHelper.jsx:import { generateAIResponse } from './AIProvider.js';
./frontend/src/components/ai/AIDiagnosticHelper.jsx:const AIDiagnosticHelper = ({ vehicleInfo, onDiagnosticComplete }) => {
./frontend/src/components/ai/AIDiagnosticHelper.jsx:      const aiResult = await generateAIResponse(prompt);
./frontend/src/components/ai/AIDiagnosticHelper.jsx:      const parsed = JSON.parse(aiResult); // AI should return structured JSON
./frontend/src/components/ai/AIDiagnosticHelper.jsx:      alert('AI analysis failed. Try again later.');
./frontend/src/components/ai/AIDiagnosticHelper.jsx:            {isAnalyzing ? 'Analyzing...' : 'Analyze with AI'}
./frontend/src/components/ai/AIDiagnosticHelper.jsx:export default AIDiagnosticHelper;
./frontend/src/components/ai/AIEstimateModal.jsx:// src/components/ai/AIEstimateModal.jsx
./frontend/src/components/ai/AIEstimateModal.jsx:import AIDiagnosticHelper from './AIDiagnosticHelper';
./frontend/src/components/ai/AIEstimateModal.jsx:const AIEstimateModal = ({ isOpen, onClose, onEstimateGenerated, vehicleInfo }) => {
./frontend/src/components/ai/AIEstimateModal.jsx:        <h2 className="text-xl font-bold mb-4">AI Service Estimate</h2>
./frontend/src/components/ai/AIEstimateModal.jsx:        <AIDiagnosticHelper
./frontend/src/components/ai/AIEstimateModal.jsx:export default AIEstimateModal;
./frontend/src/components/ai/AIDashboard.jsx:const AIDashboard = () => {
./frontend/src/components/ai/AIDashboard.jsx:  const [aiData, setAiData] = useState({
./frontend/src/components/ai/AIDashboard.jsx:    predictiveMaintenance: [],
./frontend/src/components/ai/AIDashboard.jsx:    // Simulate loading AI data
./frontend/src/components/ai/AIDashboard.jsx:    const fetchAiData = async () => {
./frontend/src/components/ai/AIDashboard.jsx:          setAiData({
./frontend/src/components/ai/AIDashboard.jsx:            predictiveMaintenance: [
./frontend/src/components/ai/AIDashboard.jsx:              { id: 2, type: 'Efficiency', message: 'Schedule maintenance during low-demand periods' }
./frontend/src/components/ai/AIDashboard.jsx:    fetchAiData();
./frontend/src/components/ai/AIDashboard.jsx:      <h2 className="text-2xl font-bold text-gray-800 mb-6">AI Dashboard</h2>
./frontend/src/components/ai/AIDashboard.jsx:      {/* Predictive Maintenance Section */}
./frontend/src/components/ai/AIDashboard.jsx:        <h3 className="text-xl font-semibold text-gray-700 mb-4">Predictive Maintenance</h3>
./frontend/src/components/ai/AIDashboard.jsx:          {aiData.predictiveMaintenance.map((item) => (
./frontend/src/components/ai/AIDashboard.jsx:        <h3 className="text-xl font-semibold text-gray-700 mb-4">AI Diagnostics</h3>
./frontend/src/components/ai/AIDashboard.jsx:          {aiData.diagnostics.map((diagnostic) => (
./frontend/src/components/ai/AIDashboard.jsx:        <h3 className="text-xl font-semibold text-gray-700 mb-4">AI Recommendations</h3>
./frontend/src/components/ai/AIDashboard.jsx:          {aiData.recommendations.map((rec) => (
./frontend/src/components/ai/AIDashboard.jsx:export default AIDashboard;
./frontend/src/components/ai/AIChat.jsx:// src/components/ai/AIChat.jsx - Chat component for /api/ai/chat endpoint
./frontend/src/components/ai/AIChat.jsx:import { PaperAirplaneIcon, UserIcon, CpuChipIcon } from '@heroicons/react/24/solid';
./frontend/src/components/ai/AIChat.jsx:import { aiService } from '../../services/aiService';
./frontend/src/components/ai/AIChat.jsx:const AIChat = ({ vehicleContext = null }) => {
./frontend/src/components/ai/AIChat.jsx:      content: "Hello! I'm Eddie, your AI automotive assistant. I can help with diagnostics, repair advice, cost estimates, and general automotive questions. What can I help you with today?",
./frontend/src/components/ai/AIChat.jsx:      const response = await aiService.sendChatMessage({
./frontend/src/components/ai/AIChat.jsx:        throw new Error(response.error || 'Failed to get AI response');
./frontend/src/components/ai/AIChat.jsx:        content: "I'm sorry, I'm having trouble responding right now. Please try again later.",
./frontend/src/components/ai/AIChat.jsx:            <h3 className="font-semibold text-gray-800">Eddie AI Assistant</h3>
./frontend/src/components/ai/AIChat.jsx:              placeholder="Ask about diagnostics, repairs, estimates..."
./frontend/src/components/ai/AIChat.jsx:            <PaperAirplaneIcon className="h-5 w-5" />
./frontend/src/components/ai/AIChat.jsx:export default AIChat;
./frontend/src/components/ai/OBD2Lookup.jsx:import { obd2Service } from '../../services/aiService';
./frontend/src/components/ai/OBD2Lookup.jsx:      const data = await obd2Service.lookupCode(code);
./frontend/src/components/ai/OBD2Lookup.jsx:      setResult({ error: 'Code lookup failed' });
./frontend/src/components/ai/index.js:// src/components/ai/index.js - Updated with correct service path
./frontend/src/components/ai/index.js:export { default as AIChat } from './AIChat.jsx';
./frontend/src/components/ai/index.js:export { default as AIDashboard } from './AIDashboard.jsx';
./frontend/src/components/ai/index.js:export { default as AIDiagnosticHelper } from './AIDiagnosticHelper.jsx';
./frontend/src/components/ai/index.js:export { default as AIEstimateModal } from './AIEstimateModal.jsx';
./frontend/src/components/ai/index.js:// AI Services and Utilities
./frontend/src/components/ai/index.js:export { generateAIResponse } from './AIProvider.js';
./frontend/src/components/ai/index.js:// Re-export AI-related services for convenience
./frontend/src/components/ai/index.js:export { aiService } from '../../utils/services/aiService';
./frontend/src/components/ai/index.js:export { obd2Service } from '../../utils/services/aiService';
./frontend/src/components/ai/index.js:// src/components/ai/AIChat.jsx - Update import at top
./frontend/src/components/ai/index.js:import { aiService } from '../../utils/services/aiService';
./frontend/src/components/ai/index.js:// src/components/ai/AIDiagnosticHelper.jsx - Update import at top  
./frontend/src/components/ai/index.js:import { aiService } from '../../utils/services/aiService';
./frontend/src/components/ai/index.js:// src/components/ai/OBD2Lookup.jsx - Update import at top
./frontend/src/components/ai/index.js:import { obd2Service } from '../../utils/services/aiService';
./frontend/src/components/ai/index.js:// src/pages/AIDiagnostics.jsx - Update import at top
./frontend/src/components/ai/index.js:import { aiService, obd2Service } from '../utils/services/aiService';
./frontend/src/components/ai/index.js:// src/components/AIEstimateCard.jsx - Update import at top (if you use the aiService there)
./frontend/src/components/ai/index.js:import { aiService } from '../utils/services/aiService';
./frontend/src/components/ComplianceNoticeCA.jsx: * California Auto Repair Estimate Disclosures
./frontend/src/components/ComplianceNoticeCA.jsx:      <p className="font-semibold text-yellow-800">California Auto Repair Disclosure</p>
./frontend/src/components/ComplianceNoticeCA.jsx:        <li>You are entitled to a written estimate before work begins. All repairs must be authorized by you.</li>
./frontend/src/components/ComplianceNoticeCA.jsx:        <li>Additional repairs discovered during service require your separate authorization before proceeding.</li>
./frontend/src/components/ComplianceNoticeCA.jsx:        <li>You may request the return of replaced parts at the time you authorize the repairs.</li>
./frontend/src/components/ComplianceNoticeCA.jsx:        <li>Smog-related estimates will include required notices and you may choose another station for any repairs.</li>
./frontend/src/components/ComplianceNoticeCA.jsx:        Questions? Contact the California Bureau of Automotive Repair (BAR).
./frontend/src/components/CustomerAuthorization.jsx:  const containerRef = useRef(null);
./frontend/src/components/CustomerAuthorization.jsx:    const el = containerRef.current;
./frontend/src/components/CustomerAuthorization.jsx:    const el = containerRef.current;
./frontend/src/components/CustomerAuthorization.jsx:            <option value="additional">Additional Repairs Authorization</option>
./frontend/src/components/CustomerAuthorization.jsx:            <option value="electronic">Electronic (email / text)</option>
./frontend/src/components/CustomerAuthorization.jsx:          <div ref={containerRef} className="border rounded-md p-2 bg-gray-50">
./frontend/src/components/CustomerAuthorization.jsx:                      className="mt-1 h-12 max-w-full object-contain bg-white p-1 rounded border"
./frontend/src/components/DocumentTemplplateRenderer.jsx: * Use inside EstimateDetail / Invoice detail components.
./frontend/src/components/DocumentTemplplateRenderer.jsx:            <img src={settings.logoUrl} alt="logo" className="h-10 object-contain" />
./frontend/src/components/DocumentTemplplateRenderer.jsx:              {settings.email ? ` • Email: ${settings.email}` : null}
./frontend/src/components/DocumentTemplplateRenderer.jsx:        {it.disclaimers && <div><strong>Important:</strong> {it.disclaimers}</div>}
./frontend/src/components/SmartBreadcrumb.jsx:    'ai': 'AI Dashboard',
./frontend/src/components/SmartBreadcrumb.jsx:    'ai-diagnostics': 'AI Diagnostics',
./frontend/src/components/LandingPage.jsx:      {/* Main Content */}
./frontend/src/components/LandingPage.jsx:      <main className="flex-1 flex items-center justify-center px-4">
./frontend/src/components/LandingPage.jsx:      </main>
./frontend/src/components/LandingPage.jsx:              { title: "Vehicle Management", desc: "Track customer vehicles and maintenance history", icon: "🚗" },
./frontend/src/components/index.js:export { default as AIEstimateModal } from './AIEstimateModal';
./frontend/src/components/index.js:export { default as PayrollReportDetail } from './PayrollReportDetail';
./frontend/src/components/index.js:export { default as AIDiagnosticHelper } from './AIDiagnosticHelper';
./frontend/src/components/index.js:export { default as OBD2Lookup } from './ai/OBD2Lookup';
./frontend/src/components/index.js:export { default as AIChat } from './ai/AIChat';
./frontend/src/components/AIEstimateCard.jsx:// src/components/AIEstimateCard.jsx
./frontend/src/components/AIEstimateCard.jsx:import AIEstimateModal from "./AIEstimateModal";
./frontend/src/components/AIEstimateCard.jsx:const AIEstimateCard = () => {
./frontend/src/components/AIEstimateCard.jsx:          AI Service Estimate
./frontend/src/components/AIEstimateCard.jsx:        <p className="text-gray-500 text-sm">No AI estimate generated yet.</p>
./frontend/src/components/AIEstimateCard.jsx:      <AIEstimateModal
./frontend/src/components/AIEstimateCard.jsx:export default AIEstimateCard;
./frontend/src/components/Layout.jsx:    { name: 'AI Diagnostics', href: '/ai/diagnostics', icon: CpuChipIcon },
./frontend/src/services/aiService.js:// src/services/aiService.js - Complete service for your AI backend routes
./frontend/src/services/aiService.js:export const aiService = {
./frontend/src/services/aiService.js:  // AI DIAGNOSTICS - Match your /api/ai/diagnostics route
./frontend/src/services/aiService.js:      const response = await apiClient.post('/ai/diagnostics', {
./frontend/src/services/aiService.js:      console.error('AI diagnostics error:', error);
./frontend/src/services/aiService.js:  // AI ESTIMATE - Match your /api/ai/estimate route  
./frontend/src/services/aiService.js:      const response = await apiClient.post('/ai/estimate', {
./frontend/src/services/aiService.js:      console.error('AI estimate error:', error);
./frontend/src/services/aiService.js:  // AI CHAT - Match your /api/ai/chat route
./frontend/src/services/aiService.js:      const response = await apiClient.post('/ai/chat', {
./frontend/src/services/aiService.js:      console.error('AI chat error:', error);
./frontend/src/services/aiService.js:  // AI STATUS - Check AI service availability
./frontend/src/services/aiService.js:  async getAIStatus() {
./frontend/src/services/aiService.js:      const response = await apiClient.get('/ai/status');
./frontend/src/services/aiService.js:      console.error('AI status error:', error);
./frontend/src/services/aiService.js:      return { success: false, error: 'AI service unavailable' };
./frontend/src/services/aiService.js:      const response = await apiClient.get(`/obd2/lookup/${code.toUpperCase()}`);
./frontend/src/services/aiService.js:      const results = await Promise.all(
./frontend/src/services/aiService.js:export default aiService;
./frontend/src/services/diagnosticsService.ts:    const response = await apiClient.get('/auth/vehicles');
./frontend/src/services/diagnosticsService.ts:    const response = await apiClient.get(`/auth/vehicles/${vehicleId}/diagnostics`);
./frontend/src/services/diagnosticsService.ts:    const response = await apiClient.post(`/auth/vehicles/${vehicleId}/scan`);
./frontend/src/config/navigation.js:// 🎯 Core Workflow Navigation (primary daily operations)
./frontend/src/config/navigation.js:export const mainNavLinks = [
./frontend/src/config/navigation.js:// 🤖 AI-Powered Features (your competitive advantage!)
./frontend/src/config/navigation.js:export const aiNavLinks = [
./frontend/src/config/navigation.js:    to: '/ai-diagnostics',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    label: 'AI Diagnostics',
./frontend/src/config/navigation.js:    description: 'AI-powered vehicle diagnostics',
./frontend/src/config/navigation.js:    to: '/estimates/ai',  // FIXED: matches App.jsx
./frontend/src/config/navigation.js:    label: 'AI Estimates',
./frontend/src/config/navigation.js:    description: 'Start a new repair job'
./frontend/src/config/navigation.js:  { to: '/ai-diagnostics', label: 'AI', icon: '🧠' }  // NEW: Showcase AI
./frontend/src/config/navigation.js:// Primary CTA for main navbar
./frontend/src/config/navigation.js:    'AI Diagnostics (/ai-diagnostics)',
./frontend/src/config/navigation.js:    'Advanced AI Features',
./frontend/src/config/navigation.js:  admin: [...mainNavLinks, ...managementNavLinks, ...aiNavLinks, ...advancedNavLinks],
./frontend/src/config/navigation.js:  manager: [...mainNavLinks, ...managementNavLinks, ...aiNavLinks],
./frontend/src/config/navigation.js:    mainNavLinks[0], // Dashboard
./frontend/src/config/navigation.js:    mainNavLinks[2], // Vehicles
./frontend/src/config/navigation.js:    mainNavLinks[3], // Jobs
./frontend/src/config/navigation.js:    aiNavLinks[0],   // AI Diagnostics
./frontend/src/config/navigation.js:    aiNavLinks[2]    // Diagnosis Tools
./frontend/src/config/navigation.js:    mainNavLinks[0], // Dashboard
./frontend/src/config/navigation.js:  '/estimates/ai': ['Dashboard', 'Estimates', 'AI Estimates'],
./frontend/src/config/navigation.js:  '/ai-diagnostics': ['Dashboard', 'AI Diagnostics'],
./frontend/src/config/navigation.js:  email: "info@eddiesautomotive.com",
./frontend/src/config/navigation.js:    "General Auto Repair",
./frontend/src/config/navigation.js:    "AC Repair",
./frontend/src/config/navigation.js:  mainNavLinks,
./frontend/src/config/navigation.js:  aiNavLinks,
./frontend/src/utils/apiEndpoints.js:          showError('Server error. Try again later.');
./frontend/src/utils/apiEndpoints.js:        await api(config);
./frontend/src/utils/apiEndpoints.js:        console.error('[RequestQueue] Retry failed:', config.url, err);
./frontend/src/utils/apiEndpoints.js:    emailInvoice: (id) => mutateOrQueue('post', `/api/auth/jobs/${id}/email`, {}),
./frontend/src/utils/apiEndpoints.js:    markPaid: (id) => mutateOrQueue("post", `/api/auth/invoices/${id}/mark-paid`, {}),
./frontend/src/utils/apiEndpoints.js:  // AI Services
./frontend/src/utils/apiEndpoints.js:  ai: {
./frontend/src/utils/apiEndpoints.js:    diagnostics: (data) => mutateOrQueue('post', '/api/ai/diagnostics', data),
./frontend/src/utils/apiEndpoints.js:    estimate: (data) => mutateOrQueue('post', '/api/ai/estimate', data),
./frontend/src/utils/apiEndpoints.js:    chat: (data) => mutateOrQueue('post', '/api/ai/chat', data),
./frontend/src/utils/apiEndpoints.js:    status: () => api.get('/api/ai/status'),
./frontend/src/utils/apiEndpoints.js:    diagnosis: (data) => mutateOrQueue('post', '/api/ai/diagnostics', data),
./frontend/src/utils/apiEndpoints.js:    getDiagnosticsHistory: () => api.get('/api/auth/ai/diagnostics/history'),
./frontend/src/utils/apiEndpoints.js:export const aiService = apiEndpoints.ai;
./frontend/src/utils/aiDiagnosticsService.js:// src/utils/aiDiagnosticsService.js - AI Diagnostics API Service
./frontend/src/utils/aiDiagnosticsService.js:export const aiDiagnosticsService = {
./frontend/src/utils/aiDiagnosticsService.js:   * Generate comprehensive AI diagnosis
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/ai/diagnostics', diagnosticData);
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/ai/diagnostics', data);
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/obd2/lookup', { codes });
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.get("/api/auth/ai/diagnostics/history");
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/auth/customers/diagnosis', diagnosisData);
./frontend/src/utils/aiDiagnosticsService.js:        description: diagnosis.diagnosis?.primary_issue || 'AI Generated Estimate',
./frontend/src/utils/aiDiagnosticsService.js:        ai_generated: true,
./frontend/src/utils/aiDiagnosticsService.js:      const response = await api.post('/api/auth/estimates', estimateData);
./frontend/src/utils/aiDiagnosticsService.js:      powertrain: {
./frontend/src/utils/aiDiagnosticsService.js:      total_procedures_count: diagnosisData.repair_procedures?.length || 0,
./frontend/src/utils/aiDiagnosticsService.js:      estimated_completion_time: diagnosisData.estimated_repair_time || 'Unknown'
./frontend/src/utils/aiDiagnosticsService.js:   * Generate repair checklist from diagnosis
./frontend/src/utils/aiDiagnosticsService.js:   * @returns {Object} Repair checklist
./frontend/src/utils/aiDiagnosticsService.js:  generateRepairChecklist: (diagnosis) => {
./frontend/src/utils/aiDiagnosticsService.js:    // Add repair procedure items
./frontend/src/utils/aiDiagnosticsService.js:    if (diagnosisData.repair_procedures) {
./frontend/src/utils/aiDiagnosticsService.js:      diagnosisData.repair_procedures.forEach((procedure, index) => {
./frontend/src/utils/aiDiagnosticsService.js:  // ... rest of methods remain the same but with improved error handling and null checks
./frontend/src/utils/aiDiagnosticsService.js:export default aiDiagnosticsService;
./frontend/src/utils/tokenManager.js:// src/utils/tokenManager.js - Consistent with main api.js
./frontend/src/utils/tokenManager.js:const TOKEN_KEY = 'token'; // Changed from 'eddies_token' to match main api.js
./frontend/src/utils/api.js:  const response = await api.get(url, options);
./frontend/src/utils/testApi.js:      const response = await fetch('/api/health');
./frontend/src/utils/testApi.js:        results.health = `❌ Health check failed with status ${response.status}`;
./frontend/src/utils/testApi.js:      results.backend = `❌ Backend connection failed: ${error.message}`;
./frontend/src/utils/testApi.js:      const response = await apiEndpoints.auth.me();
./frontend/src/utils/testApi.js:        results.auth = `❌ Auth endpoint failed: ${error.message}`;
./frontend/src/utils/testApi.js:      const response = await apiEndpoints.dashboard.stats();
./frontend/src/utils/testApi.js:        results.dashboard = `❌ Dashboard failed: ${error.message}`;
./frontend/src/utils/testApi.js:      const response = await apiEndpoints.customers.getAll();
./frontend/src/utils/testApi.js:        results.customers = `❌ Customers failed: ${error.message}`;
./frontend/src/utils/testApi.js:    const response = await fetch('/api/health', {
./frontend/src/utils/testApi.js:      const data = await response.json();
./frontend/src/utils/testApi.js:      console.log('❌ Backend health check failed:', response.status);
./frontend/src/utils/testApi.js:    console.log('❌ Backend connection failed:', error.message);
./frontend/src/utils/testApi.js:    const result = await endpoint(...args);
./frontend/src/utils/testApi.js:    console.log(`❌ ${endpointName} failed:`, error.message);
./frontend/src/utils/billing.js: * Returns a detailed breakdown using Settings.
./frontend/src/utils/aiUtils.js:// AI utilities for automotive diagnostics and responses
./frontend/src/utils/aiUtils.js: * Generate AI-powered diagnostic response
./frontend/src/utils/aiUtils.js: * @returns {Promise<Object>} AI-generated diagnostic response
./frontend/src/utils/aiUtils.js:export const generateAIResponse = async (symptoms, vehicleInfo = {}) => {
./frontend/src/utils/aiUtils.js:    // Placeholder for AI integration (OpenAI, Claude, etc.)
./frontend/src/utils/aiUtils.js:    // This would typically make an API call to your AI service
./frontend/src/utils/aiUtils.js:    throw new Error('Failed to generate AI diagnostic response');
./frontend/src/utils/aiUtils.js: * Analyze diagnostic trouble codes using AI
./frontend/src/utils/aiUtils.js:        recommendedRepairs: getDTCRepairs(code)
./frontend/src/utils/aiUtils.js:      estimatedRepairTime: calculateRepairTime(codes),
./frontend/src/utils/aiUtils.js:      estimatedCost: calculateRepairCost(codes)
./frontend/src/utils/aiUtils.js:    throw new Error('Failed to analyze diagnostic codes');
./frontend/src/utils/aiUtils.js:    'P0300': ['Faulty spark plugs', 'Ignition coil failure', 'Fuel system issues'],
./frontend/src/utils/aiUtils.js:    'P0420': ['Catalytic converter failure', 'Oxygen sensor malfunction', 'Engine timing issues'],
./frontend/src/utils/aiUtils.js:    'P0171': ['Vacuum leaks', 'Mass airflow sensor issues', 'Fuel pump problems'],
./frontend/src/utils/aiUtils.js:const getDTCRepairs = (code) => {
./frontend/src/utils/aiUtils.js:  const repairs = {
./frontend/src/utils/aiUtils.js:    'P0171': ['Repair vacuum leaks', 'Replace MAF sensor', 'Test fuel pressure'],
./frontend/src/utils/aiUtils.js:  return repairs[code] || ['Perform diagnostic testing'];
./frontend/src/utils/aiUtils.js:const calculateRepairTime = (codes) => {
./frontend/src/utils/aiUtils.js:const calculateRepairCost = (codes) => {
./frontend/src/utils/index.js:export { default as aiDiagnosticsService } from './aiDiagnosticsService';
./frontend/src/utils/index.js:export { generateAIResponse, analyzeDiagnosticCodes } from './aiUtils';
./frontend/src/utils/services/customerService.js:const handleError = (error, fallbackMessage = 'Customer request failed') => {
./frontend/src/utils/services/customerService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/customerService.js:    return handleError(error, 'Failed to fetch customers');
./frontend/src/utils/services/customerService.js:    const response = await api.get(`${baseURL}/${id}`);
./frontend/src/utils/services/customerService.js:    return handleError(error, `Failed to fetch customer with ID ${id}`);
./frontend/src/utils/services/customerService.js:    const response = await api.post(baseURL, customerData);
./frontend/src/utils/services/customerService.js:    return handleError(error, 'Failed to create customer');
./frontend/src/utils/services/customerService.js:    const response = await api.put(`${baseURL}/${id}`, customerData);
./frontend/src/utils/services/customerService.js:    return handleError(error, `Failed to update customer with ID ${id}`);
./frontend/src/utils/services/customerService.js:    const response = await api.delete(`${baseURL}/${id}`);
./frontend/src/utils/services/customerService.js:    return handleError(error, `Failed to delete customer with ID ${id}`);
./frontend/src/utils/services/vehicleService.js:const handleError = (error, fallbackMessage = 'Vehicle request failed') => {
./frontend/src/utils/services/vehicleService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/vehicleService.js:    return handleError(error, 'Failed to fetch vehicles');
./frontend/src/utils/services/vehicleService.js:    const response = await api.get(`${baseURL}/${id}`);
./frontend/src/utils/services/vehicleService.js:    return handleError(error, `Failed to fetch vehicle with ID ${id}`);
./frontend/src/utils/services/vehicleService.js:    const response = await api.post(baseURL, vehicleData);
./frontend/src/utils/services/vehicleService.js:    return handleError(error, 'Failed to create vehicle');
./frontend/src/utils/services/vehicleService.js:    const response = await api.put(`${baseURL}/${id}`, vehicleData);
./frontend/src/utils/services/vehicleService.js:    return handleError(error, `Failed to update vehicle with ID ${id}`);
./frontend/src/utils/services/vehicleService.js:    const response = await api.delete(`${baseURL}/${id}`);
./frontend/src/utils/services/vehicleService.js:    return handleError(error, `Failed to delete vehicle with ID ${id}`);
./frontend/src/utils/services/jobService.js:const handleError = (error, fallbackMessage = 'Job request failed') => {
./frontend/src/utils/services/jobService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/jobService.js:    return handleError(error, 'Failed to fetch jobs');
./frontend/src/utils/services/jobService.js:    const response = await api.get(`${baseURL}/${id}`);
./frontend/src/utils/services/jobService.js:    return handleError(error, `Failed to fetch job with ID ${id}`);
./frontend/src/utils/services/jobService.js:    const response = await api.post(baseURL, jobData);
./frontend/src/utils/services/jobService.js:    return handleError(error, 'Failed to create job');
./frontend/src/utils/services/jobService.js:    const response = await api.put(`${baseURL}/${id}`, jobData);
./frontend/src/utils/services/jobService.js:    return handleError(error, `Failed to update job with ID ${id}`);
./frontend/src/utils/services/jobService.js:    const response = await api.patch(`${baseURL}/${id}/status`, statusData);
./frontend/src/utils/services/jobService.js:    return handleError(error, `Failed to update status for job ID ${id}`);
./frontend/src/utils/services/jobService.js:    const response = await api.delete(`${baseURL}/${id}`);
./frontend/src/utils/services/jobService.js:    return handleError(error, `Failed to delete job with ID ${id}`);
./frontend/src/utils/services/estimateService.js:const handleError = (error, fallbackMessage = 'Estimate request failed') => {
./frontend/src/utils/services/estimateService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/estimateService.js:    return handleError(error, 'Failed to fetch estimates');
./frontend/src/utils/services/estimateService.js:    const response = await api.get(`${baseURL}/${id}`);
./frontend/src/utils/services/estimateService.js:    return handleError(error, `Failed to fetch estimate with ID ${id}`);
./frontend/src/utils/services/estimateService.js:    const response = await api.post(baseURL, estimateData);
./frontend/src/utils/services/estimateService.js:    return handleError(error, 'Failed to create estimate');
./frontend/src/utils/services/estimateService.js:    const response = await api.put(`${baseURL}/${id}`, estimateData);
./frontend/src/utils/services/estimateService.js:    return handleError(error, `Failed to update estimate with ID ${id}`);
./frontend/src/utils/services/estimateService.js:    const response = await api.delete(`${baseURL}/${id}`);
./frontend/src/utils/services/estimateService.js:    return handleError(error, `Failed to delete estimate with ID ${id}`);
./frontend/src/utils/services/invoiceService.js:const handleError = (error, fallbackMessage = 'Invoice request failed') => {
./frontend/src/utils/services/invoiceService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/invoiceService.js:    return handleError(error, 'Failed to fetch invoices');
./frontend/src/utils/services/invoiceService.js:    const response = await api.get(`${baseURL}/${id}`);
./frontend/src/utils/services/invoiceService.js:    return handleError(error, `Failed to fetch invoice with ID ${id}`);
./frontend/src/utils/services/invoiceService.js:    const response = await api.post(baseURL, invoiceData);
./frontend/src/utils/services/invoiceService.js:    return handleError(error, 'Failed to create invoice');
./frontend/src/utils/services/invoiceService.js:    const response = await api.put(`${baseURL}/${id}`, invoiceData);
./frontend/src/utils/services/invoiceService.js:    return handleError(error, `Failed to update invoice with ID ${id}`);
./frontend/src/utils/services/invoiceService.js:    const response = await api.delete(`${baseURL}/${id}`);
./frontend/src/utils/services/invoiceService.js:    return handleError(error, `Failed to delete invoice with ID ${id}`);
./frontend/src/utils/services/appointmentService.js:const handleError = (error, fallbackMessage = 'Appointment request failed') => {
./frontend/src/utils/services/appointmentService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/appointmentService.js:    return handleError(error, 'Failed to fetch appointments');
./frontend/src/utils/services/appointmentService.js:    const response = await api.get(`${baseURL}/${id}`);
./frontend/src/utils/services/appointmentService.js:    return handleError(error, `Failed to fetch appointment with ID ${id}`);
./frontend/src/utils/services/appointmentService.js:    const response = await api.post(baseURL, appointmentData);
./frontend/src/utils/services/appointmentService.js:    return handleError(error, 'Failed to create appointment');
./frontend/src/utils/services/appointmentService.js:    const response = await api.put(`${baseURL}/${id}`, appointmentData);
./frontend/src/utils/services/appointmentService.js:    return handleError(error, `Failed to update appointment with ID ${id}`);
./frontend/src/utils/services/appointmentService.js:    const response = await api.delete(`${baseURL}/${id}`);
./frontend/src/utils/services/appointmentService.js:    return handleError(error, `Failed to delete appointment with ID ${id}`);
./frontend/src/utils/services/timeclockService.js:const handleError = (error, fallbackMessage = 'Time clock request failed') => {
./frontend/src/utils/services/timeclockService.js:    const response = await apiEndpoints.timeclock.getStatus();
./frontend/src/utils/services/timeclockService.js:    return handleError(error, 'Failed to fetch time clock status');
./frontend/src/utils/services/timeclockService.js:    const response = await apiEndpoints.timeclock.clockIn();
./frontend/src/utils/services/timeclockService.js:    return handleError(error, 'Failed to clock in');
./frontend/src/utils/services/timeclockService.js:    const response = await apiEndpoints.timeclock.clockOut();
./frontend/src/utils/services/timeclockService.js:    return handleError(error, 'Failed to clock out');
./frontend/src/utils/services/reportService.js:const handleError = (error, fallbackMessage = 'Report request failed') => {
./frontend/src/utils/services/reportService.js:// Fetch a list of available reports
./frontend/src/utils/services/reportService.js:    const response = await api.get(baseURL, { params });
./frontend/src/utils/services/reportService.js:    return handleError(error, 'Failed to fetch reports');
./frontend/src/utils/services/reportService.js:    const response = await api.get(`${baseURL}/${reportType}`, { params });
./frontend/src/utils/services/reportService.js:    return handleError(error, `Failed to fetch ${reportType} report`);
./frontend/src/utils/services/reportService.js:    const response = await api.post(`${baseURL}/custom`, reportData);
./frontend/src/utils/services/reportService.js:    return handleError(error, 'Failed to generate custom report');
./frontend/src/utils/services/diagnosticsService.js:const handleError = (error, fallbackMessage = 'Diagnostics request failed') => {
./frontend/src/utils/services/diagnosticsService.js:    const response = await api.get(`${baseURL}/status`);
./frontend/src/utils/services/diagnosticsService.js:    return handleError(error, 'Failed to fetch system status');
./frontend/src/utils/services/diagnosticsService.js:    const response = await api.post(`${API_BASE_URL}/api/diagnostics/test`, { testType });
./frontend/src/utils/services/diagnosticsService.js:    return handleError(error, `Failed to run diagnostic test: ${testType}`);
./frontend/src/utils/services/migrationServices.js:      const response = await uploadApi.post('/api/migration/analyze', formData);
./frontend/src/utils/services/migrationServices.js:      const response = await uploadApi.post('/api/migration/import', payload);
./frontend/src/utils/services/dashboardService.js:      const response = await api.get('/api/auth/dashboard/stats');
./frontend/src/utils/services/dashboardService.js:        const [customers, jobs, invoices] = await Promise.all([
./frontend/src/utils/services/dashboardService.js:          unpaidInvoices: invoices.data?.filter(inv => inv.status !== 'paid')?.length || 0
./frontend/src/utils/services/dashboardService.js:          unpaidInvoices: 0
./frontend/src/utils/services/aiService.js:// src/utils/services/aiService.js - AI Service API Client
./frontend/src/utils/services/aiService.js:import { generateAIResponse } from '../../components/ai/AIProvider';
./frontend/src/utils/services/aiService.js:// Main AI Service for chat and diagnostics
./frontend/src/utils/services/aiService.js:export const aiService = {
./frontend/src/utils/services/aiService.js:  // Send chat message to AI
./frontend/src/utils/services/aiService.js:      const response = await api.post('/api/ai/chat', {
./frontend/src/utils/services/aiService.js:      console.error('AI Chat Error:', error);
./frontend/src/utils/services/aiService.js:      // Fallback to client-side AI if backend fails
./frontend/src/utils/services/aiService.js:        const prompt = `${contextString}${historyString}\nUser: ${message}\nAI Assistant:`;
./frontend/src/utils/services/aiService.js:        const aiResponse = await generateAIResponse(prompt, {
./frontend/src/utils/services/aiService.js:          message: aiResponse,
./frontend/src/utils/services/aiService.js:          error: 'AI service temporarily unavailable'
./frontend/src/utils/services/aiService.js:      const response = await api.post('/api/ai/diagnostics', diagnosticData);
./frontend/src/utils/services/aiService.js:      console.error('AI Diagnostics Error:', error);
./frontend/src/utils/services/aiService.js:      // Fallback to client-side AI
./frontend/src/utils/services/aiService.js:  "primary_issue": "main problem description",
./frontend/src/utils/services/aiService.js:  "estimated_repair_time": "2-4 hours"
./frontend/src/utils/services/aiService.js:        const aiResponse = await generateAIResponse(prompt);
./frontend/src/utils/services/aiService.js:          const parsedResponse = JSON.parse(aiResponse);
./frontend/src/utils/services/aiService.js:                primary_issue: "Unable to parse AI response",
./frontend/src/utils/services/aiService.js:          error: 'Diagnostic service temporarily unavailable'
./frontend/src/utils/services/aiService.js:      const response = await api.get('/api/auth/ai/diagnostics/history');
./frontend/src/utils/services/aiService.js:      console.warn('Failed to fetch diagnostics history:', error);
./frontend/src/utils/services/aiService.js:        description: diagnosis.primary_issue || 'AI Generated Estimate',
./frontend/src/utils/services/aiService.js:        ai_generated: true,
./frontend/src/utils/services/aiService.js:      const response = await api.post('/api/auth/estimates', estimateData);
./frontend/src/utils/services/aiService.js:      console.error('Failed to create estimate:', error);
./frontend/src/utils/services/aiService.js:      const response = await api.post('/api/obd2/lookup', { codes: code });
./frontend/src/utils/services/aiService.js:            'Repair exhaust leaks'
./frontend/src/utils/services/aiService.js:// Export default aiService for backward compatibility
./frontend/src/utils/services/aiService.js:export default aiService;
./frontend/src/utils/statusUtils.js:    'paid': 'text-green-600 bg-green-100',
./frontend/src/utils/statusUtils.js:    'unpaid': 'text-red-600 bg-red-100',
./frontend/src/utils/statusUtils.js:    'paid': 'CheckCircle',
./frontend/src/utils/statusUtils.js:    'unpaid': 'AlertCircle',
./frontend/src/utils/errorUtils.jsx:      return await operation();
./frontend/src/utils/errorUtils.jsx:      await new Promise(resolve => setTimeout(resolve, delay * attempt));
./frontend/src/utils/apiLimiter.js:      const response = await fetch(url, options);
./frontend/src/utils/shopService.js:    const response = await api.get('/auth/settings/shop');
./frontend/src/utils/shopService.js:    showError('Failed to load shop settings');
./frontend/src/utils/shopService.js:    const response = await api.put('/auth/settings/shop', settings);
./frontend/src/utils/shopService.js:    showError('Failed to update shop settings');
./frontend/src/hooks/useDataOperations.js:      const response = await customerService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch customers');
./frontend/src/hooks/useDataOperations.js:      const response = await customerService.create(customerData);
./frontend/src/hooks/useDataOperations.js:      showError('Failed to create customer');
./frontend/src/hooks/useDataOperations.js:      const response = await vehicleService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch vehicles');
./frontend/src/hooks/useDataOperations.js:      const response = await vehicleService.create(vehicleData);
./frontend/src/hooks/useDataOperations.js:      showError('Failed to create vehicle');
./frontend/src/hooks/useDataOperations.js:      const response = await jobService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch jobs');
./frontend/src/hooks/useDataOperations.js:      const response = await jobService.create(jobData);
./frontend/src/hooks/useDataOperations.js:      showError('Failed to create job');
./frontend/src/hooks/useDataOperations.js:      const response = await estimateService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch estimates');
./frontend/src/hooks/useDataOperations.js:      const response = await estimateService.create(estimateData);
./frontend/src/hooks/useDataOperations.js:      showError('Failed to create estimate');
./frontend/src/hooks/useDataOperations.js:      const response = await invoiceService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch invoices');
./frontend/src/hooks/useDataOperations.js:      const response = await invoiceService.create(invoiceData);
./frontend/src/hooks/useDataOperations.js:      showError('Failed to create invoice');
./frontend/src/hooks/useDataOperations.js:      const response = await appointmentService.getAll();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch appointments');
./frontend/src/hooks/useDataOperations.js:      const response = await reportService.getAll(params);
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch reports');
./frontend/src/hooks/useDataOperations.js:      const response = await diagnosticsService.getSystemStatus();
./frontend/src/hooks/useDataOperations.js:      showError('Failed to fetch diagnostics status');
./frontend/src/hooks/useDataOperations.js:      const response = await diagnosticsService.runTest(testType);
./frontend/src/hooks/useDataOperations.js:      showError(`Failed to run diagnostic test: ${testType}`);
./frontend/src/hooks/useDataOperations.js:      await Promise.allSettled([
./frontend/src/hooks/useDataOperations.js:      console.error('Failed to refresh data:', error);
./frontend/src/hooks/useDataOperations.js:          const response = await fetch('/api/migration/analyze', {
./frontend/src/hooks/useDataOperations.js:          const result = await response.json();
./frontend/src/hooks/useDataOperations.js:            showError(result.error || 'Analysis failed');
./frontend/src/hooks/useDataOperations.js:          showError('Failed to analyze file');
./frontend/src/hooks/useDataOperations.js:          const response = await fetch('/api/migration/import', {
./frontend/src/hooks/useDataOperations.js:          const result = await response.json();
./frontend/src/hooks/useDataOperations.js:            showError(result.error || 'Import failed');
./frontend/src/hooks/useDataOperations.js:          showError('Failed to import data');
./frontend/src/hooks/useApi.jsx:      const response = await api(config);
./frontend/src/hooks/useApi.jsx:      const { data } = await enhancedGet(url, options);
./frontend/src/hooks/useShopData.js:          await Promise.all([
./frontend/src/hooks/useShopData.js:      const [customersData, vehiclesData, jobsData] = await Promise.all([
./frontend/src/hooks/useDataOperations.js.backup:      const response = await reportService.getAll(params);
./frontend/src/hooks/useDataOperations.js.backup:      console.error('Failed to fetch reports:', error);
./frontend/src/hooks/useDataOperations.js.backup:      showError('Failed to fetch reports');
./frontend/src/hooks/useDataOperations.js.backup:      const response = await diagnosticsService.getSystemStatus();
./frontend/src/hooks/useDataOperations.js.backup:      console.error('Failed to fetch diagnostics status:', error);
./frontend/src/hooks/useDataOperations.js.backup:      showError('Failed to fetch diagnostics status');
./frontend/src/hooks/useDataOperations.js.backup:      const response = await diagnosticsService.runTest(testType);
./frontend/src/hooks/useDataOperations.js.backup:      console.error('Failed to run diagnostic test:', error);
./frontend/src/hooks/useDataOperations.js.backup:      showError(`Failed to run diagnostic test: ${testType}`);
./frontend/src/hooks/useDataOperations.js.backup:          const response = await fetch('/api/migration/analyze', {
./frontend/src/hooks/useDataOperations.js.backup:          const result = await response.json();
./frontend/src/hooks/useDataOperations.js.backup:            showError(result.error || 'Analysis failed');
./frontend/src/hooks/useDataOperations.js.backup:          showError('Failed to analyze file');
./frontend/src/hooks/useDataOperations.js.backup:          const response = await fetch('/api/migration/import', {
./frontend/src/hooks/useDataOperations.js.backup:          const result = await response.json();
./frontend/src/hooks/useDataOperations.js.backup:            showError(result.error || 'Import failed');
./frontend/src/hooks/useDataOperations.js.backup:          showError('Failed to import data');
./frontend/src/hooks/useDataOperations.js.backup:      await Promise.allSettled([
./frontend/src/hooks/useDataOperations.js.backup:      console.error('Failed to refresh data:', error);
./frontend/src/hooks/useDataOperations.js.backup:          const response = await fetch('/api/migration/analyze', {
./frontend/src/hooks/useDataOperations.js.backup:          const result = await response.json();
./frontend/src/hooks/useDataOperations.js.backup:            showError(result.error || 'Analysis failed');
./frontend/src/hooks/useDataOperations.js.backup:          showError('Failed to analyze file');
./frontend/src/hooks/useDataOperations.js.backup:          const response = await fetch('/api/migration/import', {
./frontend/src/hooks/useDataOperations.js.backup:          const result = await response.json();
./frontend/src/hooks/useDataOperations.js.backup:            showError(result.error || 'Import failed');
./frontend/src/hooks/useDataOperations.js.backup:          showError('Failed to import data');
./frontend/src/hooks/useAuth.js.backup:      const response = await apiEndpoints.auth.login(credentials);
./frontend/src/hooks/useAuth.js.backup:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/hooks/useAuth.js.backup:      await apiEndpoints.auth.logout();
./frontend/src/hooks/useAuth.js.backup:      console.warn('Logout request failed:', error.message);
./frontend/src/hooks/useAuth.js.backup:      const response = await apiEndpoints.auth.refresh();
./frontend/src/hooks/useAuth.js.backup:      console.warn('Token refresh failed:', error.message);
./frontend/src/hooks/useAuth.js.backup:      await logout();
./frontend/src/hooks/useAuth.js.backup:      const response = await apiEndpoints.auth.me();
./frontend/src/hooks/useAuth.js.backup:      console.warn('Failed to get current user:', error.message);
./frontend/src/hooks/useAuth.js.backup:        await logout();
./frontend/src/hooks/useAuth.js.backup:          await getCurrentUser();
./frontend/src/hooks/useAuth.js.backup:          await getCurrentUser();
./frontend/src/hooks/useAuth.js.backup:      await apiEndpoints.auth.changePassword(passwordData);
./frontend/src/contexts/AuthContext.jsx:  const login = async (email, password) => {
./frontend/src/contexts/AuthContext.jsx:      const response = await apiEndpoints.auth.login({ email, password });
./frontend/src/contexts/AuthContext.jsx:      setError(err.response?.data?.message || 'Login failed');
./frontend/src/contexts/AuthContext.jsx:      return { success: false, error: err.response?.data?.message || 'Login failed' };
./frontend/src/contexts/AuthContext.jsx:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx:      setError(err.response?.data?.message || 'Registration failed');
./frontend/src/contexts/AuthContext.jsx:      return { success: false, error: err.response?.data?.message || 'Registration failed' };
./frontend/src/contexts/DataContext.jsx:// src/contexts/DataContext.jsx - Enhanced with AI integration
./frontend/src/contexts/DataContext.jsx:import { timeclockService, reportsService, aiService } from '../utils/apiEndpoints';
./frontend/src/contexts/DataContext.jsx:      ] = await Promise.allSettled([
./frontend/src/contexts/DataContext.jsx:      setError(err.message || 'Failed to refresh data');
./frontend/src/contexts/DataContext.jsx:    aiService,
./frontend/src/contexts/ShopContext.jsx:    email: ""
./frontend/src/contexts/SettingsProvider.jsx:      email: "",
./frontend/src/contexts/SettingsProvider.jsx:    aiSettings: {},
./frontend/src/contexts/SettingsProvider.jsx:        const response = await apiEndpoints.settings.get();
./frontend/src/contexts/SettingsProvider.jsx:            email: data.email || "",
./frontend/src/contexts/SettingsProvider.jsx:          aiSettings: data.aiSettings || {}
./frontend/src/contexts/SettingsProvider.jsx:        console.error('Failed to load settings:', error);
./frontend/src/contexts/SettingsProvider.jsx:      const response = await apiEndpoints.settings.update({
./frontend/src/contexts/SettingsProvider.jsx:        email: newShopSettings.email,
./frontend/src/contexts/SettingsProvider.jsx:      console.error('Failed to update shop settings:', error);
./frontend/src/contexts/SettingsProvider.jsx:        error: error.response?.data?.message || error.message || 'Failed to update settings'
./frontend/src/contexts/test_login.sh:  -d '{"email":"admin@eddiesauto.com","password":"admin123"}' \
./frontend/src/contexts/test_login.sh:  -d '{"email":"admin@example.com","password":"admin_password"}' \
./frontend/src/contexts/test_login.sh:    echo "   Email: admin@eddiesauto.com"
./frontend/src/contexts/test_login.sh:    echo "   Email: admin@example.com"
./frontend/src/contexts/AuthContext.jsx.backup:  const login = async (email, password) => {
./frontend/src/contexts/AuthContext.jsx.backup:      const response = await apiEndpoints.auth.login({ email, password });
./frontend/src/contexts/AuthContext.jsx.backup:      setError(err.response?.data?.message || 'Login failed');
./frontend/src/contexts/AuthContext.jsx.backup:      return { success: false, error: err.response?.data?.message || 'Login failed' };
./frontend/src/contexts/AuthContext.jsx.backup:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx.backup:      setError(err.response?.data?.message || 'Registration failed');
./frontend/src/contexts/AuthContext.jsx.backup:      return { success: false, error: err.response?.data?.message || 'Registration failed' };
./frontend/src/contexts/AuthContext.jsx.broken:  const login = async (email, password) => {
./frontend/src/contexts/AuthContext.jsx.broken:      const response = await apiEndpoints.auth.login({ email, password });
./frontend/src/contexts/AuthContext.jsx.broken:      setError(err.response?.data?.message || 'Login failed');
./frontend/src/contexts/AuthContext.jsx.broken:      return { success: false, error: err.response?.data?.message || 'Login failed' };
./frontend/src/contexts/AuthContext.jsx.broken:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx.broken:      setError(err.response?.data?.message || "Registration failed");
./frontend/src/contexts/AuthContext.jsx.broken:      return { success: false, error: err.response?.data?.message || "Registration failed" };
./frontend/src/contexts/AuthContext.jsx.broken:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx.broken:      setError(err.response?.data?.message || "Registration failed");
./frontend/src/contexts/AuthContext.jsx.broken:      return { success: false, error: err.response?.data?.message || "Registration failed" };
./frontend/src/contexts/AuthContext.jsx.broken:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx.broken:      setError(err.response?.data?.message || "Registration failed");
./frontend/src/contexts/AuthContext.jsx.broken:      return { success: false, error: err.response?.data?.message || "Registration failed" };
./frontend/src/contexts/AuthContext.jsx.broken:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx.broken:      setError(err.response?.data?.message || "Registration failed");
./frontend/src/contexts/AuthContext.jsx.broken:      return { success: false, error: err.response?.data?.message || "Registration failed" };
./frontend/src/contexts/AuthContext.jsx.broken:      const response = await apiEndpoints.auth.register(userData);
./frontend/src/contexts/AuthContext.jsx.broken:      setError(err.response?.data?.message || "Registration failed");
./frontend/src/contexts/AuthContext.jsx.broken:      return { success: false, error: err.response?.data?.message || "Registration failed" };
./frontend/src/layouts/Layout.jsx:        {/* Top Navigation / Main Navbar */}
./frontend/src/layouts/Layout.jsx:        {/* Main page content */}
./frontend/src/layouts/Layout.jsx:        <main className="flex-1">
./frontend/src/layouts/Layout.jsx:        </main>
./frontend/src/layouts/ProtectedDashboardLayout.jsx:        {/* Main Content Area */}
./frontend/src/layouts/ProtectedDashboardLayout.jsx:          {/* Main page content */}
./frontend/src/layouts/ProtectedDashboardLayout.jsx:          <main className="flex-1 overflow-y-auto">
./frontend/src/layouts/ProtectedDashboardLayout.jsx:          </main>
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:        {/* Top Navigation / Main Navbar */}
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:        {/* Main page content */}
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:        <main className="flex-1">
./frontend/src/layouts/ProtectedDashboardLayout.jsx.backup:        </main>
./frontend/src/index.css.backup:@tailwind base;
./frontend/src/index.css.backup:@tailwind components;
./frontend/src/index.css.backup:@tailwind utilities;
./frontend/src/health.json:<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>
./frontend/src/_backups/Dashboard.tsx:      const response = await axios.get('/api/v1/dashboard/stats');
./frontend/src/_backups/Dashboard.tsx:        <p className="text-blue-100">World-class auto repair management</p>
./frontend/src/_backups/Dashboard.tsx:                <span>Daily Goal Progress</span>
./frontend/src/_backups/VehicleDiagnostics.tsx:      const response = await apiEndpoints.vehicles.getAll();
./frontend/src/_backups/App.tsx:const VehicleDetail = lazy(() => import('./pages/VehicleDetail'))
./frontend/src/_backups/App.tsx:const EstimateAI = lazy(() => import('./pages/EstimateAI'))
./frontend/src/_backups/App.tsx:const CustomerDetail = lazy(() => import('./pages/CustomerDetail'))
./frontend/src/_backups/App.tsx:                <Route path=":id" element={<VehicleDetail />} />
./frontend/src/_backups/App.tsx:                <Route path=":id" element={<CustomerDetail />} />
./frontend/src/_backups/App.tsx:                <Route index element={<EstimateAI />} />
./frontend/src/_backups/App.tsx:                <Route path="ai" element={<EstimateAI />} />
./frontend/src/fix_api.sh:    markPaid: (invoice_id, data) => api.post(`/api/auth/invoices/${invoice_id}/mark-paid`, data),
./frontend/src/fix_api.sh:export const invoices_int_invoice_id_mark_paid_post = (invoice_id, data) =>
./frontend/src/fix_api.sh:  apiEndpoints.invoices.markPaid(invoice_id, data);
./frontend/src/fix_api.sh:echo "- Corrected markPaid to include data parameter"
./frontend/src/App-20250831_000053.jsx:  CustomerDetail,
./frontend/src/App-20250831_000053.jsx:  VehicleDetail,
./frontend/src/App-20250831_000053.jsx:  JobDetail,
./frontend/src/App-20250831_000053.jsx:  EstimateDetail,
./frontend/src/App-20250831_000053.jsx:  InvoiceDetail,
./frontend/src/App-20250831_000053.jsx:  AIDiagnostics
./frontend/src/App-20250831_000053.jsx:              <Route path="customers/:id" element={<CustomerDetail />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="vehicles/:id" element={<VehicleDetail />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="jobs/:id" element={<JobDetail />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="estimates/:id" element={<EstimateDetail />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="invoices/:id" element={<InvoiceDetail />} />
./frontend/src/App-20250831_000053.jsx:              <Route path="ai-diagnostics" element={<AIDiagnostics />} />
./frontend/src/index.js:export { default as AIEstimateModal } from './components/AIEstimateModal';
./frontend/src/index.js:export { default as PayrollReportDetail } from './components/PayrollReportDetail';
./frontend/src/index.js:export { default as AIDiagnosticHelper } from './components/AIDiagnosticHelper';
./frontend/src/index.js:export { default as JobDetail } from './pages/JobDetail';
./frontend/src/index.js:export { default as EstimateDetail } from './pages/EstimateDetail';
./frontend/src/index.js:export { default as EstimateAI } from './pages/EstimateAI';
./frontend/src/index.js:export { default as CustomerDetail } from './pages/CustomerDetail';
./frontend/src/index.js:export { default as VehicleDetail } from './pages/VehicleDetail';
./frontend/src/index.js:export { default as AIDiagnostics } from './pages/AIDiagnostics';


== Coverage Summary ==
dashboard -> Backend routes: 0, Frontend mentions: 195
settings -> Backend routes: 0, Frontend mentions: 249
invoices -> Backend routes: 0, Frontend mentions: 123
estimates -> Backend routes: 0, Frontend mentions: 208
customers -> Backend routes: 0, Frontend mentions: 557
vehicles -> Backend routes: 0, Frontend mentions: 325
jobs -> Backend routes: 0, Frontend mentions: 300
appointments -> Backend routes: 0, Frontend mentions: 136
ai -> Backend routes: 0, Frontend mentions: 1328

===== End of Report =====
